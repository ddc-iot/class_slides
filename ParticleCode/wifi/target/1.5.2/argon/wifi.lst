
c:/Users/IoTPa/Documents/Particle/wifi/target/1.5.2/argon/wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001b04  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5b20  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003dc44  000d5b24  0001dc44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000b44  2003dcac  2003dcac  0002dcac  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5b8c  000d5b8c  00025b8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5bb4  000d5bb4  00025bb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000af1d7  00000000  00000000  00025bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d0b3  00000000  00000000  000d4d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001abff  00000000  00000000  000e1e42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002100  00000000  00000000  000fca41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004030  00000000  00000000  000feb41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002f0e3  00000000  00000000  00102b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001f00f  00000000  00000000  00131c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000febcf  00000000  00000000  00150c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c1a0  00000000  00000000  0024f834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 faab 	bl	d5588 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fab0 	bl	d559e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dc44 	.word	0x2003dc44
   d4048:	000d5b24 	.word	0x000d5b24
   d404c:	2003dcac 	.word	0x2003dcac
   d4050:	2003dcac 	.word	0x2003dcac
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f000 fdb7 	bl	d4bcc <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d5b14 	.word	0x000d5b14
   d4080:	000d5adc 	.word	0x000d5adc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b83a 	b.w	d40fc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f94b 	bl	d4324 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bd5d 	b.w	d4b50 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 bb2f 	b.w	d46f8 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 bb2d 	b.w	d46f8 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <__tcf_1>:
int found;
int i;
byte mac[6];

String security[6] = {"WLAN_SEC_UNSEC", "WLAN_SEC_WEP", "WLAN_SEC_WPA", "WLAN_SEC_WPA2", "WLAN_SEC_WPA_ENTERPRISE", "WLAN_SEC_WPA2_ENTERPRISE"};
String cypher[4] = {"N/A","WLAN_CIPHER_AES", "WLAN_CIPHER_TKIP", "WLAN_CIPHER_AES_TKIP"};
   d40b0:	b510      	push	{r4, lr}
   d40b2:	4c09      	ldr	r4, [pc, #36]	; (d40d8 <__tcf_1+0x28>)
   d40b4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d40b8:	f000 fba6 	bl	d4808 <_ZN6StringD1Ev>
   d40bc:	f104 0020 	add.w	r0, r4, #32
   d40c0:	f000 fba2 	bl	d4808 <_ZN6StringD1Ev>
   d40c4:	f104 0010 	add.w	r0, r4, #16
   d40c8:	f000 fb9e 	bl	d4808 <_ZN6StringD1Ev>
   d40cc:	4620      	mov	r0, r4
   d40ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d40d2:	f000 bb99 	b.w	d4808 <_ZN6StringD1Ev>
   d40d6:	bf00      	nop
   d40d8:	2003e3b4 	.word	0x2003e3b4

000d40dc <__tcf_0>:
int cytype;
int found;
int i;
byte mac[6];

String security[6] = {"WLAN_SEC_UNSEC", "WLAN_SEC_WEP", "WLAN_SEC_WPA", "WLAN_SEC_WPA2", "WLAN_SEC_WPA_ENTERPRISE", "WLAN_SEC_WPA2_ENTERPRISE"};
   d40dc:	b538      	push	{r3, r4, r5, lr}
   d40de:	4d06      	ldr	r5, [pc, #24]	; (d40f8 <__tcf_0+0x1c>)
   d40e0:	2400      	movs	r4, #0
   d40e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
   d40e6:	4428      	add	r0, r5
   d40e8:	3c10      	subs	r4, #16
   d40ea:	f000 fb8d 	bl	d4808 <_ZN6StringD1Ev>
   d40ee:	f114 0f60 	cmn.w	r4, #96	; 0x60
   d40f2:	d1f6      	bne.n	d40e2 <__tcf_0+0x6>
   d40f4:	bd38      	pop	{r3, r4, r5, pc}
   d40f6:	bf00      	nop
   d40f8:	2003dcb4 	.word	0x2003dcb4

000d40fc <setup>:
String cypher[4] = {"N/A","WLAN_CIPHER_AES", "WLAN_CIPHER_TKIP", "WLAN_CIPHER_AES_TKIP"};

void setup() {
   d40fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4100:	b090      	sub	sp, #64	; 0x40
  Serial.begin(9600);
   d4102:	f000 fe63 	bl	d4dcc <_Z16_fetch_usbserialv>
   d4106:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d410a:	f000 fe53 	bl	d4db4 <_ZN9USBSerial5beginEl>
  delay(100);
   d410e:	2064      	movs	r0, #100	; 0x64
   d4110:	f000 fce0 	bl	d4ad4 <delay>

  Serial.printf("Scan Argon for Saved Credentials \n");
   d4114:	f000 fe5a 	bl	d4dcc <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4118:	4a6e      	ldr	r2, [pc, #440]	; (d42d4 <setup+0x1d8>)
   d411a:	4c6f      	ldr	r4, [pc, #444]	; (d42d8 <setup+0x1dc>)
  Serial.printf("ip address: %s \n", WiFi.localIP().toString().c_str());
  WiFi.macAddress(mac);
  Serial.printf("mac: %02X:%02X:%02X:%02X:%02X:%02X \n", mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
  found = WiFi.getCredentials(ap, 5);
   d411c:	4e6f      	ldr	r6, [pc, #444]	; (d42dc <setup+0x1e0>)
  Serial.printf("Credentials for %d Access Points Found \n",found);
  for (i = 0; i < found; i++) {
    sectype = (int) ap[i].security;
   d411e:	f8df 91fc 	ldr.w	r9, [pc, #508]	; d431c <setup+0x220>
   d4122:	2100      	movs	r1, #0
   d4124:	f000 fc89 	bl	d4a3a <_ZN5Print11printf_implEbPKcz>
void setup() {
  Serial.begin(9600);
  delay(100);

  Serial.printf("Scan Argon for Saved Credentials \n");
  Serial.printf("ip address: %s \n", WiFi.localIP().toString().c_str());
   d4128:	f000 fe50 	bl	d4dcc <_Z16_fetch_usbserialv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   d412c:	2200      	movs	r2, #0
   d412e:	4611      	mov	r1, r2
   d4130:	4605      	mov	r5, r0
   d4132:	6860      	ldr	r0, [r4, #4]
   d4134:	f000 fa78 	bl	d4628 <network_config>
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
        return mac;
    }

    IPAddress localIP() {
        return IPAddress(wifi_config()->nw.aucIP);
   d4138:	1c81      	adds	r1, r0, #2
   d413a:	a80a      	add	r0, sp, #40	; 0x28
   d413c:	f000 fdba 	bl	d4cb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }

    String toString() const { return String(*this); }
   d4140:	a90a      	add	r1, sp, #40	; 0x28
   d4142:	a806      	add	r0, sp, #24
   d4144:	f000 fbee 	bl	d4924 <_ZN6StringC1ERK9Printable>
   d4148:	9b06      	ldr	r3, [sp, #24]
   d414a:	4a65      	ldr	r2, [pc, #404]	; (d42e0 <setup+0x1e4>)
   d414c:	2100      	movs	r1, #0
   d414e:	4628      	mov	r0, r5
   d4150:	f000 fc73 	bl	d4a3a <_ZN5Print11printf_implEbPKcz>
   d4154:	a806      	add	r0, sp, #24
   d4156:	f000 fb57 	bl	d4808 <_ZN6StringD1Ev>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   d415a:	2200      	movs	r2, #0
   d415c:	4611      	mov	r1, r2
   d415e:	6860      	ldr	r0, [r4, #4]
     * Retrieves a 6-octet MAC address
     * @param mac
     * @return
     */
    uint8_t* macAddress(uint8_t *mac) {
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
   d4160:	4d60      	ldr	r5, [pc, #384]	; (d42e4 <setup+0x1e8>)
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   d4162:	f000 fa61 	bl	d4628 <network_config>
     * Retrieves a 6-octet MAC address
     * @param mac
     * @return
     */
    uint8_t* macAddress(uint8_t *mac) {
        memcpy(mac, wifi_config()->nw.uaMacAddr, 6);
   d4166:	f850 3f57 	ldr.w	r3, [r0, #87]!
   d416a:	602b      	str	r3, [r5, #0]
   d416c:	8883      	ldrh	r3, [r0, #4]
   d416e:	80ab      	strh	r3, [r5, #4]
  WiFi.macAddress(mac);
  Serial.printf("mac: %02X:%02X:%02X:%02X:%02X:%02X \n", mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
   d4170:	f000 fe2c 	bl	d4dcc <_Z16_fetch_usbserialv>
   d4174:	796a      	ldrb	r2, [r5, #5]
   d4176:	782b      	ldrb	r3, [r5, #0]
   d4178:	9204      	str	r2, [sp, #16]
   d417a:	792a      	ldrb	r2, [r5, #4]
   d417c:	9203      	str	r2, [sp, #12]
   d417e:	78ea      	ldrb	r2, [r5, #3]
   d4180:	9202      	str	r2, [sp, #8]
   d4182:	78aa      	ldrb	r2, [r5, #2]
   d4184:	9201      	str	r2, [sp, #4]
   d4186:	786a      	ldrb	r2, [r5, #1]
   d4188:	9200      	str	r2, [sp, #0]
   d418a:	2100      	movs	r1, #0
   d418c:	4a56      	ldr	r2, [pc, #344]	; (d42e8 <setup+0x1ec>)
   d418e:	f000 fc54 	bl	d4a3a <_ZN5Print11printf_implEbPKcz>
  found = WiFi.getCredentials(ap, 5);
   d4192:	2205      	movs	r2, #5
   d4194:	4955      	ldr	r1, [pc, #340]	; (d42ec <setup+0x1f0>)
   d4196:	4620      	mov	r0, r4
   d4198:	f000 ffd8 	bl	d514c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>
  Serial.printf("Credentials for %d Access Points Found \n",found);
  for (i = 0; i < found; i++) {
   d419c:	4c54      	ldr	r4, [pc, #336]	; (d42f0 <setup+0x1f4>)

  Serial.printf("Scan Argon for Saved Credentials \n");
  Serial.printf("ip address: %s \n", WiFi.localIP().toString().c_str());
  WiFi.macAddress(mac);
  Serial.printf("mac: %02X:%02X:%02X:%02X:%02X:%02X \n", mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
  found = WiFi.getCredentials(ap, 5);
   d419e:	6030      	str	r0, [r6, #0]
  Serial.printf("Credentials for %d Access Points Found \n",found);
   d41a0:	f000 fe14 	bl	d4dcc <_Z16_fetch_usbserialv>
   d41a4:	6833      	ldr	r3, [r6, #0]
   d41a6:	4a53      	ldr	r2, [pc, #332]	; (d42f4 <setup+0x1f8>)
   d41a8:	2100      	movs	r1, #0
   d41aa:	f000 fc46 	bl	d4a3a <_ZN5Print11printf_implEbPKcz>
  for (i = 0; i < found; i++) {
   d41ae:	2300      	movs	r3, #0
   d41b0:	6023      	str	r3, [r4, #0]
   d41b2:	46ca      	mov	sl, r9
   d41b4:	6823      	ldr	r3, [r4, #0]
   d41b6:	6832      	ldr	r2, [r6, #0]
   d41b8:	4f4d      	ldr	r7, [pc, #308]	; (d42f0 <setup+0x1f4>)
   d41ba:	4293      	cmp	r3, r2
   d41bc:	da57      	bge.n	d426e <setup+0x172>
    sectype = (int) ap[i].security;
   d41be:	4a4b      	ldr	r2, [pc, #300]	; (d42ec <setup+0x1f0>)
    cytype = (int) ap[i].cipher;
   d41c0:	f8df 815c 	ldr.w	r8, [pc, #348]	; d4320 <setup+0x224>
  WiFi.macAddress(mac);
  Serial.printf("mac: %02X:%02X:%02X:%02X:%02X:%02X \n", mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
  found = WiFi.getCredentials(ap, 5);
  Serial.printf("Credentials for %d Access Points Found \n",found);
  for (i = 0; i < found; i++) {
    sectype = (int) ap[i].security;
   d41c4:	2138      	movs	r1, #56	; 0x38
   d41c6:	4359      	muls	r1, r3
   d41c8:	1853      	adds	r3, r2, r1
   d41ca:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
    cytype = (int) ap[i].cipher;
   d41ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   d41d2:	f8c8 3000 	str.w	r3, [r8]
  WiFi.macAddress(mac);
  Serial.printf("mac: %02X:%02X:%02X:%02X:%02X:%02X \n", mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
  found = WiFi.getCredentials(ap, 5);
  Serial.printf("Credentials for %d Access Points Found \n",found);
  for (i = 0; i < found; i++) {
    sectype = (int) ap[i].security;
   d41d6:	f8c9 0000 	str.w	r0, [r9]
    cytype = (int) ap[i].cipher;
    for(int j=0;j<6;j++){
   d41da:	2300      	movs	r3, #0
      mac[j] = ap[i].bssid[j];
   d41dc:	18c8      	adds	r0, r1, r3
   d41de:	4410      	add	r0, r2
   d41e0:	4f40      	ldr	r7, [pc, #256]	; (d42e4 <setup+0x1e8>)
   d41e2:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
   d41e6:	54e8      	strb	r0, [r5, r3]
  found = WiFi.getCredentials(ap, 5);
  Serial.printf("Credentials for %d Access Points Found \n",found);
  for (i = 0; i < found; i++) {
    sectype = (int) ap[i].security;
    cytype = (int) ap[i].cipher;
    for(int j=0;j<6;j++){
   d41e8:	3301      	adds	r3, #1
   d41ea:	2b06      	cmp	r3, #6
   d41ec:	d1f6      	bne.n	d41dc <setup+0xe0>
      mac[j] = ap[i].bssid[j];
    }
    
    Serial.printf("AP%d - ssid: %s \n", i,ap[i].ssid);
   d41ee:	f000 fded 	bl	d4dcc <_Z16_fetch_usbserialv>
   d41f2:	6823      	ldr	r3, [r4, #0]
   d41f4:	493d      	ldr	r1, [pc, #244]	; (d42ec <setup+0x1f0>)
   d41f6:	2238      	movs	r2, #56	; 0x38
   d41f8:	fb02 1203 	mla	r2, r2, r3, r1
   d41fc:	3204      	adds	r2, #4
   d41fe:	2100      	movs	r1, #0
   d4200:	9200      	str	r2, [sp, #0]
   d4202:	4a3d      	ldr	r2, [pc, #244]	; (d42f8 <setup+0x1fc>)
   d4204:	f000 fc19 	bl	d4a3a <_ZN5Print11printf_implEbPKcz>
    Serial.printf("AP%d - mac: %02X:%02X:%02X:%02X:%02X:%02X \n", i,mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
   d4208:	f000 fde0 	bl	d4dcc <_Z16_fetch_usbserialv>
   d420c:	797b      	ldrb	r3, [r7, #5]
   d420e:	9305      	str	r3, [sp, #20]
   d4210:	793b      	ldrb	r3, [r7, #4]
   d4212:	9304      	str	r3, [sp, #16]
   d4214:	78fb      	ldrb	r3, [r7, #3]
   d4216:	9303      	str	r3, [sp, #12]
   d4218:	78bb      	ldrb	r3, [r7, #2]
   d421a:	9302      	str	r3, [sp, #8]
   d421c:	787b      	ldrb	r3, [r7, #1]
   d421e:	9301      	str	r3, [sp, #4]
   d4220:	783b      	ldrb	r3, [r7, #0]
   d4222:	9300      	str	r3, [sp, #0]
   d4224:	6823      	ldr	r3, [r4, #0]
   d4226:	4a35      	ldr	r2, [pc, #212]	; (d42fc <setup+0x200>)
   d4228:	2100      	movs	r1, #0
   d422a:	f000 fc06 	bl	d4a3a <_ZN5Print11printf_implEbPKcz>
    Serial.printf("AP%d - security: %d (security %s) \n", i,sectype,security[sectype].c_str());
   d422e:	f000 fdcd 	bl	d4dcc <_Z16_fetch_usbserialv>
   d4232:	f8da 3000 	ldr.w	r3, [sl]
   d4236:	4932      	ldr	r1, [pc, #200]	; (d4300 <setup+0x204>)
   d4238:	011a      	lsls	r2, r3, #4
   d423a:	588a      	ldr	r2, [r1, r2]
   d423c:	9201      	str	r2, [sp, #4]
   d423e:	9300      	str	r3, [sp, #0]
   d4240:	6823      	ldr	r3, [r4, #0]
   d4242:	4a30      	ldr	r2, [pc, #192]	; (d4304 <setup+0x208>)
   d4244:	2100      	movs	r1, #0
   d4246:	f000 fbf8 	bl	d4a3a <_ZN5Print11printf_implEbPKcz>
    Serial.printf("AP%d - cipher:   %d (cipher %s) \n\n", i,cytype, cypher[cytype].c_str());
   d424a:	f000 fdbf 	bl	d4dcc <_Z16_fetch_usbserialv>
   d424e:	f8d8 3000 	ldr.w	r3, [r8]
   d4252:	492d      	ldr	r1, [pc, #180]	; (d4308 <setup+0x20c>)
   d4254:	011a      	lsls	r2, r3, #4
   d4256:	588a      	ldr	r2, [r1, r2]
   d4258:	9201      	str	r2, [sp, #4]
   d425a:	9300      	str	r3, [sp, #0]
   d425c:	6823      	ldr	r3, [r4, #0]
   d425e:	4a2b      	ldr	r2, [pc, #172]	; (d430c <setup+0x210>)
   d4260:	2100      	movs	r1, #0
   d4262:	f000 fbea 	bl	d4a3a <_ZN5Print11printf_implEbPKcz>
  Serial.printf("ip address: %s \n", WiFi.localIP().toString().c_str());
  WiFi.macAddress(mac);
  Serial.printf("mac: %02X:%02X:%02X:%02X:%02X:%02X \n", mac[0],mac[1],mac[2],mac[3],mac[4],mac[5]);
  found = WiFi.getCredentials(ap, 5);
  Serial.printf("Credentials for %d Access Points Found \n",found);
  for (i = 0; i < found; i++) {
   d4266:	6823      	ldr	r3, [r4, #0]
   d4268:	3301      	adds	r3, #1
   d426a:	6023      	str	r3, [r4, #0]
   d426c:	e7a2      	b.n	d41b4 <setup+0xb8>
    Serial.printf("AP%d - security: %d (security %s) \n", i,sectype,security[sectype].c_str());
    Serial.printf("AP%d - cipher:   %d (cipher %s) \n\n", i,cytype, cypher[cytype].c_str());
  }


  Serial.printf("\n \nWifi Scan of available networks \n");
   d426e:	f000 fdad 	bl	d4dcc <_Z16_fetch_usbserialv>
   d4272:	4a27      	ldr	r2, [pc, #156]	; (d4310 <setup+0x214>)
   d4274:	2100      	movs	r1, #0
   d4276:	f000 fbe0 	bl	d4a3a <_ZN5Print11printf_implEbPKcz>
  found = WiFi.scan(aps, 20); 
   d427a:	2214      	movs	r2, #20
   d427c:	4925      	ldr	r1, [pc, #148]	; (d4314 <setup+0x218>)
   d427e:	4816      	ldr	r0, [pc, #88]	; (d42d8 <setup+0x1dc>)
   d4280:	f000 ff52 	bl	d5128 <_ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>
   d4284:	4b15      	ldr	r3, [pc, #84]	; (d42dc <setup+0x1e0>)
   d4286:	6018      	str	r0, [r3, #0]
  for (i=0; i<found; i++) {
   d4288:	2300      	movs	r3, #0
   d428a:	603b      	str	r3, [r7, #0]
   d428c:	463d      	mov	r5, r7
    Serial.printf("ssid=%s security=%d cipher=%d, channel=%d rssi=%d \n", aps[i].ssid, (int)aps[i].security, (int)aps[i].cipher, aps[i].channel, aps[i].rssi);
   d428e:	4f21      	ldr	r7, [pc, #132]	; (d4314 <setup+0x218>)
  }


  Serial.printf("\n \nWifi Scan of available networks \n");
  found = WiFi.scan(aps, 20); 
  for (i=0; i<found; i++) {
   d4290:	6822      	ldr	r2, [r4, #0]
   d4292:	6833      	ldr	r3, [r6, #0]
   d4294:	429a      	cmp	r2, r3
   d4296:	da19      	bge.n	d42cc <setup+0x1d0>
    Serial.printf("ssid=%s security=%d cipher=%d, channel=%d rssi=%d \n", aps[i].ssid, (int)aps[i].security, (int)aps[i].cipher, aps[i].channel, aps[i].rssi);
   d4298:	f000 fd98 	bl	d4dcc <_Z16_fetch_usbserialv>
   d429c:	682b      	ldr	r3, [r5, #0]
   d429e:	2238      	movs	r2, #56	; 0x38
   d42a0:	fb02 7303 	mla	r3, r2, r3, r7
   d42a4:	3304      	adds	r3, #4
   d42a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   d42a8:	9203      	str	r2, [sp, #12]
   d42aa:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   d42ae:	9202      	str	r2, [sp, #8]
   d42b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   d42b4:	9201      	str	r2, [sp, #4]
   d42b6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   d42ba:	9200      	str	r2, [sp, #0]
   d42bc:	2100      	movs	r1, #0
   d42be:	4a16      	ldr	r2, [pc, #88]	; (d4318 <setup+0x21c>)
   d42c0:	f000 fbbb 	bl	d4a3a <_ZN5Print11printf_implEbPKcz>
  }


  Serial.printf("\n \nWifi Scan of available networks \n");
  found = WiFi.scan(aps, 20); 
  for (i=0; i<found; i++) {
   d42c4:	682b      	ldr	r3, [r5, #0]
   d42c6:	3301      	adds	r3, #1
   d42c8:	602b      	str	r3, [r5, #0]
   d42ca:	e7e1      	b.n	d4290 <setup+0x194>
    Serial.printf("ssid=%s security=%d cipher=%d, channel=%d rssi=%d \n", aps[i].ssid, (int)aps[i].security, (int)aps[i].cipher, aps[i].channel, aps[i].rssi);
  }
}
   d42cc:	b010      	add	sp, #64	; 0x40
   d42ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d42d2:	bf00      	nop
   d42d4:	000d5634 	.word	0x000d5634
   d42d8:	2003e73c 	.word	0x2003e73c
   d42dc:	2003dd18 	.word	0x2003dd18
   d42e0:	000d5657 	.word	0x000d5657
   d42e4:	2003dd1c 	.word	0x2003dd1c
   d42e8:	000d56aa 	.word	0x000d56aa
   d42ec:	2003dd24 	.word	0x2003dd24
   d42f0:	2003dcb0 	.word	0x2003dcb0
   d42f4:	000d5668 	.word	0x000d5668
   d42f8:	000d5691 	.word	0x000d5691
   d42fc:	000d56a3 	.word	0x000d56a3
   d4300:	2003dcb4 	.word	0x2003dcb4
   d4304:	000d56cf 	.word	0x000d56cf
   d4308:	2003e3b4 	.word	0x2003e3b4
   d430c:	000d56f3 	.word	0x000d56f3
   d4310:	000d5716 	.word	0x000d5716
   d4314:	2003df54 	.word	0x2003df54
   d4318:	000d573b 	.word	0x000d573b
   d431c:	2003dd14 	.word	0x2003dd14
   d4320:	2003e3f4 	.word	0x2003e3f4

000d4324 <loop>:

void loop() {
   d4324:	4770      	bx	lr
	...

000d4328 <_GLOBAL__sub_I_ap>:

   d4328:	b570      	push	{r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d432a:	f000 f891 	bl	d4450 <HAL_Pin_Map>

#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
   d432e:	4d27      	ldr	r5, [pc, #156]	; (d43cc <_GLOBAL__sub_I_ap+0xa4>)
   d4330:	2400      	movs	r4, #0
   d4332:	2638      	movs	r6, #56	; 0x38
   d4334:	1928      	adds	r0, r5, r4
   d4336:	2238      	movs	r2, #56	; 0x38
   d4338:	2100      	movs	r1, #0
   d433a:	f001 f930 	bl	d559e <memset>
       size = sizeof(*this);
   d433e:	5166      	str	r6, [r4, r5]
   d4340:	3438      	adds	r4, #56	; 0x38
 * Description: Determine which WiFi connections the Argon has stored and which are visible
 * Author: Brian Rashap
 * Date: 16-SEP-2020
 */

WiFiAccessPoint ap[10];
   d4342:	f5b4 7f0c 	cmp.w	r4, #560	; 0x230
   d4346:	d1f5      	bne.n	d4334 <_GLOBAL__sub_I_ap+0xc>

#ifdef __cplusplus

   WiFiAccessPoint()
   {
       memset(this, 0, sizeof(*this));
   d4348:	4d21      	ldr	r5, [pc, #132]	; (d43d0 <_GLOBAL__sub_I_ap+0xa8>)
   d434a:	2400      	movs	r4, #0
   d434c:	2638      	movs	r6, #56	; 0x38
   d434e:	1928      	adds	r0, r5, r4
   d4350:	2238      	movs	r2, #56	; 0x38
   d4352:	2100      	movs	r1, #0
   d4354:	f001 f923 	bl	d559e <memset>
       size = sizeof(*this);
   d4358:	5166      	str	r6, [r4, r5]
   d435a:	3438      	adds	r4, #56	; 0x38
WiFiAccessPoint aps[20];
   d435c:	f5b4 6f8c 	cmp.w	r4, #1120	; 0x460
   d4360:	d1f5      	bne.n	d434e <_GLOBAL__sub_I_ap+0x26>
int cytype;
int found;
int i;
byte mac[6];

String security[6] = {"WLAN_SEC_UNSEC", "WLAN_SEC_WEP", "WLAN_SEC_WPA", "WLAN_SEC_WPA2", "WLAN_SEC_WPA_ENTERPRISE", "WLAN_SEC_WPA2_ENTERPRISE"};
   d4362:	491c      	ldr	r1, [pc, #112]	; (d43d4 <_GLOBAL__sub_I_ap+0xac>)
   d4364:	481c      	ldr	r0, [pc, #112]	; (d43d8 <_GLOBAL__sub_I_ap+0xb0>)
   d4366:	f000 fa96 	bl	d4896 <_ZN6StringC1EPK19__FlashStringHelper>
   d436a:	491c      	ldr	r1, [pc, #112]	; (d43dc <_GLOBAL__sub_I_ap+0xb4>)
   d436c:	481c      	ldr	r0, [pc, #112]	; (d43e0 <_GLOBAL__sub_I_ap+0xb8>)
   d436e:	f000 fa92 	bl	d4896 <_ZN6StringC1EPK19__FlashStringHelper>
   d4372:	491c      	ldr	r1, [pc, #112]	; (d43e4 <_GLOBAL__sub_I_ap+0xbc>)
   d4374:	481c      	ldr	r0, [pc, #112]	; (d43e8 <_GLOBAL__sub_I_ap+0xc0>)
   d4376:	f000 fa8e 	bl	d4896 <_ZN6StringC1EPK19__FlashStringHelper>
   d437a:	491c      	ldr	r1, [pc, #112]	; (d43ec <_GLOBAL__sub_I_ap+0xc4>)
   d437c:	481c      	ldr	r0, [pc, #112]	; (d43f0 <_GLOBAL__sub_I_ap+0xc8>)
   d437e:	f000 fa8a 	bl	d4896 <_ZN6StringC1EPK19__FlashStringHelper>
   d4382:	491c      	ldr	r1, [pc, #112]	; (d43f4 <_GLOBAL__sub_I_ap+0xcc>)
   d4384:	481c      	ldr	r0, [pc, #112]	; (d43f8 <_GLOBAL__sub_I_ap+0xd0>)
   d4386:	f000 fa86 	bl	d4896 <_ZN6StringC1EPK19__FlashStringHelper>
   d438a:	491c      	ldr	r1, [pc, #112]	; (d43fc <_GLOBAL__sub_I_ap+0xd4>)
   d438c:	481c      	ldr	r0, [pc, #112]	; (d4400 <_GLOBAL__sub_I_ap+0xd8>)
   d438e:	f000 fa82 	bl	d4896 <_ZN6StringC1EPK19__FlashStringHelper>
   d4392:	4a1c      	ldr	r2, [pc, #112]	; (d4404 <_GLOBAL__sub_I_ap+0xdc>)
   d4394:	491c      	ldr	r1, [pc, #112]	; (d4408 <_GLOBAL__sub_I_ap+0xe0>)
   d4396:	2000      	movs	r0, #0
   d4398:	f000 ff98 	bl	d52cc <__aeabi_atexit>
String cypher[4] = {"N/A","WLAN_CIPHER_AES", "WLAN_CIPHER_TKIP", "WLAN_CIPHER_AES_TKIP"};
   d439c:	491b      	ldr	r1, [pc, #108]	; (d440c <_GLOBAL__sub_I_ap+0xe4>)
   d439e:	481c      	ldr	r0, [pc, #112]	; (d4410 <_GLOBAL__sub_I_ap+0xe8>)
   d43a0:	f000 fa79 	bl	d4896 <_ZN6StringC1EPK19__FlashStringHelper>
   d43a4:	491b      	ldr	r1, [pc, #108]	; (d4414 <_GLOBAL__sub_I_ap+0xec>)
   d43a6:	481c      	ldr	r0, [pc, #112]	; (d4418 <_GLOBAL__sub_I_ap+0xf0>)
   d43a8:	f000 fa75 	bl	d4896 <_ZN6StringC1EPK19__FlashStringHelper>
   d43ac:	491b      	ldr	r1, [pc, #108]	; (d441c <_GLOBAL__sub_I_ap+0xf4>)
   d43ae:	481c      	ldr	r0, [pc, #112]	; (d4420 <_GLOBAL__sub_I_ap+0xf8>)
   d43b0:	f000 fa71 	bl	d4896 <_ZN6StringC1EPK19__FlashStringHelper>
   d43b4:	491b      	ldr	r1, [pc, #108]	; (d4424 <_GLOBAL__sub_I_ap+0xfc>)
   d43b6:	481c      	ldr	r0, [pc, #112]	; (d4428 <_GLOBAL__sub_I_ap+0x100>)
   d43b8:	f000 fa6d 	bl	d4896 <_ZN6StringC1EPK19__FlashStringHelper>
   d43bc:	4a11      	ldr	r2, [pc, #68]	; (d4404 <_GLOBAL__sub_I_ap+0xdc>)
   d43be:	491b      	ldr	r1, [pc, #108]	; (d442c <_GLOBAL__sub_I_ap+0x104>)
   d43c0:	2000      	movs	r0, #0
  }
}

void loop() {

   d43c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
int found;
int i;
byte mac[6];

String security[6] = {"WLAN_SEC_UNSEC", "WLAN_SEC_WEP", "WLAN_SEC_WPA", "WLAN_SEC_WPA2", "WLAN_SEC_WPA_ENTERPRISE", "WLAN_SEC_WPA2_ENTERPRISE"};
String cypher[4] = {"N/A","WLAN_CIPHER_AES", "WLAN_CIPHER_TKIP", "WLAN_CIPHER_AES_TKIP"};
   d43c6:	f000 bf81 	b.w	d52cc <__aeabi_atexit>
   d43ca:	bf00      	nop
   d43cc:	2003dd24 	.word	0x2003dd24
   d43d0:	2003df54 	.word	0x2003df54
   d43d4:	000d576f 	.word	0x000d576f
   d43d8:	2003dcb4 	.word	0x2003dcb4
   d43dc:	000d577e 	.word	0x000d577e
   d43e0:	2003dcc4 	.word	0x2003dcc4
   d43e4:	000d578b 	.word	0x000d578b
   d43e8:	2003dcd4 	.word	0x2003dcd4
   d43ec:	000d5798 	.word	0x000d5798
   d43f0:	2003dce4 	.word	0x2003dce4
   d43f4:	000d57a6 	.word	0x000d57a6
   d43f8:	2003dcf4 	.word	0x2003dcf4
   d43fc:	000d57be 	.word	0x000d57be
   d4400:	2003dd04 	.word	0x2003dd04
   d4404:	2003dcac 	.word	0x2003dcac
   d4408:	000d40dd 	.word	0x000d40dd
   d440c:	000d57d7 	.word	0x000d57d7
   d4410:	2003e3b4 	.word	0x2003e3b4
   d4414:	000d57db 	.word	0x000d57db
   d4418:	2003e3c4 	.word	0x2003e3c4
   d441c:	000d57eb 	.word	0x000d57eb
   d4420:	2003e3d4 	.word	0x2003e3d4
   d4424:	000d57fc 	.word	0x000d57fc
   d4428:	2003e3e4 	.word	0x2003e3e4
   d442c:	000d40b1 	.word	0x000d40b1

000d4430 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4430:	b508      	push	{r3, lr}
   d4432:	4b02      	ldr	r3, [pc, #8]	; (d443c <netdb_freeaddrinfo+0xc>)
   d4434:	681b      	ldr	r3, [r3, #0]
   d4436:	689b      	ldr	r3, [r3, #8]
   d4438:	9301      	str	r3, [sp, #4]
   d443a:	bd08      	pop	{r3, pc}
   d443c:	00030268 	.word	0x00030268

000d4440 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4440:	b508      	push	{r3, lr}
   d4442:	4b02      	ldr	r3, [pc, #8]	; (d444c <netdb_getaddrinfo+0xc>)
   d4444:	681b      	ldr	r3, [r3, #0]
   d4446:	68db      	ldr	r3, [r3, #12]
   d4448:	9301      	str	r3, [sp, #4]
   d444a:	bd08      	pop	{r3, pc}
   d444c:	00030268 	.word	0x00030268

000d4450 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4450:	b508      	push	{r3, lr}
   d4452:	4b02      	ldr	r3, [pc, #8]	; (d445c <HAL_Pin_Map+0xc>)
   d4454:	681b      	ldr	r3, [r3, #0]
   d4456:	681b      	ldr	r3, [r3, #0]
   d4458:	9301      	str	r3, [sp, #4]
   d445a:	bd08      	pop	{r3, pc}
   d445c:	0003022c 	.word	0x0003022c

000d4460 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4460:	b508      	push	{r3, lr}
   d4462:	4b02      	ldr	r3, [pc, #8]	; (d446c <HAL_RNG_GetRandomNumber+0xc>)
   d4464:	681b      	ldr	r3, [r3, #0]
   d4466:	685b      	ldr	r3, [r3, #4]
   d4468:	9301      	str	r3, [sp, #4]
   d446a:	bd08      	pop	{r3, pc}
   d446c:	00030218 	.word	0x00030218

000d4470 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4470:	b508      	push	{r3, lr}
   d4472:	4b02      	ldr	r3, [pc, #8]	; (d447c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4474:	681b      	ldr	r3, [r3, #0]
   d4476:	695b      	ldr	r3, [r3, #20]
   d4478:	9301      	str	r3, [sp, #4]
   d447a:	bd08      	pop	{r3, pc}
   d447c:	00030218 	.word	0x00030218

000d4480 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4480:	b508      	push	{r3, lr}
   d4482:	4b02      	ldr	r3, [pc, #8]	; (d448c <os_thread_is_current+0xc>)
   d4484:	681b      	ldr	r3, [r3, #0]
   d4486:	689b      	ldr	r3, [r3, #8]
   d4488:	9301      	str	r3, [sp, #4]
   d448a:	bd08      	pop	{r3, pc}
   d448c:	00030248 	.word	0x00030248

000d4490 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b02      	ldr	r3, [pc, #8]	; (d449c <os_thread_join+0xc>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	691b      	ldr	r3, [r3, #16]
   d4498:	9301      	str	r3, [sp, #4]
   d449a:	bd08      	pop	{r3, pc}
   d449c:	00030248 	.word	0x00030248

000d44a0 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <os_thread_cleanup+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	695b      	ldr	r3, [r3, #20]
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	00030248 	.word	0x00030248

000d44b0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <os_mutex_recursive_create+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030248 	.word	0x00030248

000d44c0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <os_mutex_recursive_destroy+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030248 	.word	0x00030248

000d44d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <inet_inet_ntop+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	695b      	ldr	r3, [r3, #20]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030264 	.word	0x00030264

000d44e0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <HAL_USART_Init+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	681b      	ldr	r3, [r3, #0]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	0003023c 	.word	0x0003023c

000d44f0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <HAL_USART_Write_Data+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	68db      	ldr	r3, [r3, #12]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	0003023c 	.word	0x0003023c

000d4500 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <HAL_USART_Available_Data+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	691b      	ldr	r3, [r3, #16]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	0003023c 	.word	0x0003023c

000d4510 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <HAL_USART_Read_Data+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	695b      	ldr	r3, [r3, #20]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	0003023c 	.word	0x0003023c

000d4520 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <HAL_USART_Peek_Data+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	699b      	ldr	r3, [r3, #24]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	0003023c 	.word	0x0003023c

000d4530 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <HAL_USART_Flush_Data+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	69db      	ldr	r3, [r3, #28]
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	0003023c 	.word	0x0003023c

000d4540 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <HAL_USART_Available_Data_For_Write+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	0003023c 	.word	0x0003023c

000d4550 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <HAL_USB_USART_Init+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	681b      	ldr	r3, [r3, #0]
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	0003024c 	.word	0x0003024c

000d4560 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <HAL_USB_USART_Begin+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	685b      	ldr	r3, [r3, #4]
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	0003024c 	.word	0x0003024c

000d4570 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <HAL_USB_USART_Available_Data+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	691b      	ldr	r3, [r3, #16]
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	0003024c 	.word	0x0003024c

000d4580 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	695b      	ldr	r3, [r3, #20]
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	0003024c 	.word	0x0003024c

000d4590 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <HAL_USB_USART_Receive_Data+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	699b      	ldr	r3, [r3, #24]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	0003024c 	.word	0x0003024c

000d45a0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <HAL_USB_USART_Send_Data+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	69db      	ldr	r3, [r3, #28]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	0003024c 	.word	0x0003024c

000d45b0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <HAL_USB_USART_Flush_Data+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	6a1b      	ldr	r3, [r3, #32]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	0003024c 	.word	0x0003024c

000d45c0 <wlan_scan>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
DYNALIB_FN(21, hal_wlan, wlan_set_ipaddress, void(const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, const HAL_IPAddress*, void*))
DYNALIB_FN(22, hal_wlan, wlan_set_ipaddress_source, void(IPAddressSource, bool, void*))
DYNALIB_FN(23, hal_wlan, wlan_scan, int(wlan_scan_result_t, void*))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <wlan_scan+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030274 	.word	0x00030274

000d45d0 <wlan_get_credentials>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <wlan_get_credentials+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030274 	.word	0x00030274

000d45e0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <set_system_mode+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	685b      	ldr	r3, [r3, #4]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030220 	.word	0x00030220

000d45f0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <system_delay_ms+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	695b      	ldr	r3, [r3, #20]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030220 	.word	0x00030220

000d4600 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b03      	ldr	r3, [pc, #12]	; (d4610 <system_ctrl_set_app_request_handler+0x10>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d460a:	9301      	str	r3, [sp, #4]
   d460c:	bd08      	pop	{r3, pc}
   d460e:	0000      	.short	0x0000
   d4610:	00030220 	.word	0x00030220

000d4614 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b03      	ldr	r3, [pc, #12]	; (d4624 <system_ctrl_set_result+0x10>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d461e:	9301      	str	r3, [sp, #4]
   d4620:	bd08      	pop	{r3, pc}
   d4622:	0000      	.short	0x0000
   d4624:	00030220 	.word	0x00030220

000d4628 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   d4628:	b508      	push	{r3, lr}
   d462a:	4b02      	ldr	r3, [pc, #8]	; (d4634 <network_config+0xc>)
   d462c:	681b      	ldr	r3, [r3, #0]
   d462e:	681b      	ldr	r3, [r3, #0]
   d4630:	9301      	str	r3, [sp, #4]
   d4632:	bd08      	pop	{r3, pc}
   d4634:	00030240 	.word	0x00030240

000d4638 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4638:	b508      	push	{r3, lr}
   d463a:	4b02      	ldr	r3, [pc, #8]	; (d4644 <network_connect+0xc>)
   d463c:	681b      	ldr	r3, [r3, #0]
   d463e:	685b      	ldr	r3, [r3, #4]
   d4640:	9301      	str	r3, [sp, #4]
   d4642:	bd08      	pop	{r3, pc}
   d4644:	00030240 	.word	0x00030240

000d4648 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4648:	b508      	push	{r3, lr}
   d464a:	4b02      	ldr	r3, [pc, #8]	; (d4654 <network_connecting+0xc>)
   d464c:	681b      	ldr	r3, [r3, #0]
   d464e:	689b      	ldr	r3, [r3, #8]
   d4650:	9301      	str	r3, [sp, #4]
   d4652:	bd08      	pop	{r3, pc}
   d4654:	00030240 	.word	0x00030240

000d4658 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4658:	b508      	push	{r3, lr}
   d465a:	4b02      	ldr	r3, [pc, #8]	; (d4664 <network_disconnect+0xc>)
   d465c:	681b      	ldr	r3, [r3, #0]
   d465e:	68db      	ldr	r3, [r3, #12]
   d4660:	9301      	str	r3, [sp, #4]
   d4662:	bd08      	pop	{r3, pc}
   d4664:	00030240 	.word	0x00030240

000d4668 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4668:	b508      	push	{r3, lr}
   d466a:	4b02      	ldr	r3, [pc, #8]	; (d4674 <network_ready+0xc>)
   d466c:	681b      	ldr	r3, [r3, #0]
   d466e:	691b      	ldr	r3, [r3, #16]
   d4670:	9301      	str	r3, [sp, #4]
   d4672:	bd08      	pop	{r3, pc}
   d4674:	00030240 	.word	0x00030240

000d4678 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <network_on+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	695b      	ldr	r3, [r3, #20]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030240 	.word	0x00030240

000d4688 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <network_off+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	699b      	ldr	r3, [r3, #24]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030240 	.word	0x00030240

000d4698 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <network_listen+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	69db      	ldr	r3, [r3, #28]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	00030240 	.word	0x00030240

000d46a8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <network_listening+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	6a1b      	ldr	r3, [r3, #32]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	00030240 	.word	0x00030240

000d46b8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <network_set_listen_timeout+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	00030240 	.word	0x00030240

000d46c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <network_get_listen_timeout+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	00030240 	.word	0x00030240

000d46d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030244 	.word	0x00030244

000d46e8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <malloc+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	681b      	ldr	r3, [r3, #0]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	0003021c 	.word	0x0003021c

000d46f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <free+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	685b      	ldr	r3, [r3, #4]
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	0003021c 	.word	0x0003021c

000d4708 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <realloc+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	689b      	ldr	r3, [r3, #8]
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	0003021c 	.word	0x0003021c

000d4718 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <vsnprintf+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	0003021c 	.word	0x0003021c

000d4728 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4728:	2200      	movs	r2, #0
   d472a:	4611      	mov	r1, r2
   d472c:	6840      	ldr	r0, [r0, #4]
   d472e:	f7ff bfbb 	b.w	d46a8 <network_listening>

000d4732 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4732:	2200      	movs	r2, #0
   d4734:	4611      	mov	r1, r2
   d4736:	6840      	ldr	r0, [r0, #4]
   d4738:	f7ff bfc6 	b.w	d46c8 <network_get_listen_timeout>

000d473c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d473c:	2200      	movs	r2, #0
   d473e:	6840      	ldr	r0, [r0, #4]
   d4740:	f7ff bfba 	b.w	d46b8 <network_set_listen_timeout>

000d4744 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4744:	2200      	movs	r2, #0
   d4746:	f081 0101 	eor.w	r1, r1, #1
   d474a:	6840      	ldr	r0, [r0, #4]
   d474c:	f7ff bfa4 	b.w	d4698 <network_listen>

000d4750 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4750:	2300      	movs	r3, #0
   d4752:	461a      	mov	r2, r3
   d4754:	4619      	mov	r1, r3
   d4756:	6840      	ldr	r0, [r0, #4]
   d4758:	f7ff bf96 	b.w	d4688 <network_off>

000d475c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d475c:	2300      	movs	r3, #0
   d475e:	461a      	mov	r2, r3
   d4760:	4619      	mov	r1, r3
   d4762:	6840      	ldr	r0, [r0, #4]
   d4764:	f7ff bf88 	b.w	d4678 <network_on>

000d4768 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4768:	2200      	movs	r2, #0
   d476a:	4611      	mov	r1, r2
   d476c:	6840      	ldr	r0, [r0, #4]
   d476e:	f7ff bf7b 	b.w	d4668 <network_ready>

000d4772 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4772:	2200      	movs	r2, #0
   d4774:	4611      	mov	r1, r2
   d4776:	6840      	ldr	r0, [r0, #4]
   d4778:	f7ff bf66 	b.w	d4648 <network_connecting>

000d477c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d477c:	2200      	movs	r2, #0
   d477e:	2102      	movs	r1, #2
   d4780:	6840      	ldr	r0, [r0, #4]
   d4782:	f7ff bf69 	b.w	d4658 <network_disconnect>

000d4786 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4786:	2300      	movs	r3, #0
   d4788:	461a      	mov	r2, r3
   d478a:	6840      	ldr	r0, [r0, #4]
   d478c:	f7ff bf54 	b.w	d4638 <network_connect>

000d4790 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4790:	4b02      	ldr	r3, [pc, #8]	; (d479c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4792:	2203      	movs	r2, #3
   d4794:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4796:	4a02      	ldr	r2, [pc, #8]	; (d47a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4798:	601a      	str	r2, [r3, #0]
   d479a:	4770      	bx	lr
   d479c:	2003e3f8 	.word	0x2003e3f8
   d47a0:	000d581c 	.word	0x000d581c

000d47a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d47a4:	b510      	push	{r4, lr}
   d47a6:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d47a8:	6800      	ldr	r0, [r0, #0]
   d47aa:	b118      	cbz	r0, d47b4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d47ac:	f7ff ffa4 	bl	d46f8 <free>
            wakeupSource_ = nullptr;
   d47b0:	2300      	movs	r3, #0
   d47b2:	6023      	str	r3, [r4, #0]
   d47b4:	bd10      	pop	{r4, pc}

000d47b6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d47b6:	b510      	push	{r4, lr}
   d47b8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d47ba:	f7ff fff3 	bl	d47a4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d47be:	4620      	mov	r0, r4
   d47c0:	bd10      	pop	{r4, pc}
	...

000d47c4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d47c4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d47c6:	4c09      	ldr	r4, [pc, #36]	; (d47ec <_GLOBAL__sub_I_System+0x28>)
   d47c8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d47ca:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d47ce:	6020      	str	r0, [r4, #0]
   d47d0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d47d2:	71a0      	strb	r0, [r4, #6]
   d47d4:	8120      	strh	r0, [r4, #8]
   d47d6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d47d8:	f7ff ff02 	bl	d45e0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d47dc:	4620      	mov	r0, r4
   d47de:	4a04      	ldr	r2, [pc, #16]	; (d47f0 <_GLOBAL__sub_I_System+0x2c>)
   d47e0:	4904      	ldr	r1, [pc, #16]	; (d47f4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d47e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d47e6:	f000 bd71 	b.w	d52cc <__aeabi_atexit>
   d47ea:	bf00      	nop
   d47ec:	2003e400 	.word	0x2003e400
   d47f0:	2003dcac 	.word	0x2003dcac
   d47f4:	000d47b7 	.word	0x000d47b7

000d47f8 <_ZN21StringPrintableHelperD1Ev>:
{
	if (buffer) return float(atof(buffer));
	return 0;
}

class StringPrintableHelper : public Print
   d47f8:	4770      	bx	lr

000d47fa <_ZN21StringPrintableHelperD0Ev>:
   d47fa:	b510      	push	{r4, lr}
   d47fc:	210c      	movs	r1, #12
   d47fe:	4604      	mov	r4, r0
   d4800:	f000 fd69 	bl	d52d6 <_ZdlPvj>
   d4804:	4620      	mov	r0, r4
   d4806:	bd10      	pop	{r4, pc}

000d4808 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4808:	b510      	push	{r4, lr}
   d480a:	4604      	mov	r4, r0
{
	free(buffer);
   d480c:	6800      	ldr	r0, [r0, #0]
   d480e:	f7ff ff73 	bl	d46f8 <free>
}
   d4812:	4620      	mov	r0, r4
   d4814:	bd10      	pop	{r4, pc}

000d4816 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4816:	b510      	push	{r4, lr}
   d4818:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d481a:	6800      	ldr	r0, [r0, #0]
   d481c:	b108      	cbz	r0, d4822 <_ZN6String10invalidateEv+0xc>
   d481e:	f7ff ff6b 	bl	d46f8 <free>
	buffer = NULL;
   d4822:	2300      	movs	r3, #0
   d4824:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4826:	60a3      	str	r3, [r4, #8]
   d4828:	6063      	str	r3, [r4, #4]
   d482a:	bd10      	pop	{r4, pc}

000d482c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d482c:	b538      	push	{r3, r4, r5, lr}
   d482e:	4604      	mov	r4, r0
   d4830:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4832:	6800      	ldr	r0, [r0, #0]
   d4834:	3101      	adds	r1, #1
   d4836:	f7ff ff67 	bl	d4708 <realloc>
	if (newbuffer) {
   d483a:	b110      	cbz	r0, d4842 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d483c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4840:	2001      	movs	r0, #1
	}
	return 0;
}
   d4842:	bd38      	pop	{r3, r4, r5, pc}

000d4844 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4844:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4846:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4848:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d484a:	b113      	cbz	r3, d4852 <_ZN6String7reserveEj+0xe>
   d484c:	6843      	ldr	r3, [r0, #4]
   d484e:	428b      	cmp	r3, r1
   d4850:	d207      	bcs.n	d4862 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4852:	4620      	mov	r0, r4
   d4854:	f7ff ffea 	bl	d482c <_ZN6String12changeBufferEj>
   d4858:	b120      	cbz	r0, d4864 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d485a:	68a3      	ldr	r3, [r4, #8]
   d485c:	b90b      	cbnz	r3, d4862 <_ZN6String7reserveEj+0x1e>
   d485e:	6822      	ldr	r2, [r4, #0]
   d4860:	7013      	strb	r3, [r2, #0]
   d4862:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4864:	bd10      	pop	{r4, pc}

000d4866 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4866:	b570      	push	{r4, r5, r6, lr}
   d4868:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d486a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d486c:	4604      	mov	r4, r0
   d486e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4870:	f7ff ffe8 	bl	d4844 <_ZN6String7reserveEj>
   d4874:	b918      	cbnz	r0, d487e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4876:	4620      	mov	r0, r4
   d4878:	f7ff ffcd 	bl	d4816 <_ZN6String10invalidateEv>
		return *this;
   d487c:	e009      	b.n	d4892 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d487e:	462a      	mov	r2, r5
   d4880:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4882:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4884:	6820      	ldr	r0, [r4, #0]
   d4886:	f000 fe7f 	bl	d5588 <memcpy>
	buffer[len] = 0;
   d488a:	6822      	ldr	r2, [r4, #0]
   d488c:	68a3      	ldr	r3, [r4, #8]
   d488e:	2100      	movs	r1, #0
   d4890:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4892:	4620      	mov	r0, r4
   d4894:	bd70      	pop	{r4, r5, r6, pc}

000d4896 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4896:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4898:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d489a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d489c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d489e:	6043      	str	r3, [r0, #4]
	len = 0;
   d48a0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d48a2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d48a4:	460d      	mov	r5, r1
   d48a6:	b139      	cbz	r1, d48b8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d48a8:	4608      	mov	r0, r1
   d48aa:	f000 feb1 	bl	d5610 <strlen>
   d48ae:	4629      	mov	r1, r5
   d48b0:	4602      	mov	r2, r0
   d48b2:	4620      	mov	r0, r4
   d48b4:	f7ff ffd7 	bl	d4866 <_ZN6String4copyEPKcj>
}
   d48b8:	4620      	mov	r0, r4
   d48ba:	bd38      	pop	{r3, r4, r5, pc}

000d48bc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d48bc:	b570      	push	{r4, r5, r6, lr}
   d48be:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d48c0:	460e      	mov	r6, r1
   d48c2:	b909      	cbnz	r1, d48c8 <_ZN6String6concatEPKcj+0xc>
   d48c4:	2000      	movs	r0, #0
   d48c6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d48c8:	b16a      	cbz	r2, d48e6 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d48ca:	6883      	ldr	r3, [r0, #8]
   d48cc:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d48ce:	4629      	mov	r1, r5
   d48d0:	f7ff ffb8 	bl	d4844 <_ZN6String7reserveEj>
   d48d4:	2800      	cmp	r0, #0
   d48d6:	d0f5      	beq.n	d48c4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d48d8:	6820      	ldr	r0, [r4, #0]
   d48da:	68a3      	ldr	r3, [r4, #8]
   d48dc:	4631      	mov	r1, r6
   d48de:	4418      	add	r0, r3
   d48e0:	f000 fe8e 	bl	d5600 <strcpy>
	len = newlen;
   d48e4:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d48e6:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d48e8:	bd70      	pop	{r4, r5, r6, pc}

000d48ea <_ZN21StringPrintableHelper5writeEPKhj>:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
    }

    virtual size_t write(const uint8_t *buffer, size_t size) override
   d48ea:	b538      	push	{r3, r4, r5, lr}
   d48ec:	4604      	mov	r4, r0
    {
        unsigned len = s.length();
   d48ee:	6880      	ldr	r0, [r0, #8]
   d48f0:	6885      	ldr	r5, [r0, #8]
        s.concat((const char*)buffer, size);
   d48f2:	f7ff ffe3 	bl	d48bc <_ZN6String6concatEPKcj>
   d48f6:	68a3      	ldr	r3, [r4, #8]
        return s.length()-len;
   d48f8:	6898      	ldr	r0, [r3, #8]
    }
   d48fa:	1b40      	subs	r0, r0, r5
   d48fc:	bd38      	pop	{r3, r4, r5, pc}

000d48fe <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d48fe:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d4900:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
   d4902:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
   d4906:	2201      	movs	r2, #1
   d4908:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d490a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d490e:	f7ff ffd5 	bl	d48bc <_ZN6String6concatEPKcj>
}
   d4912:	b003      	add	sp, #12
   d4914:	f85d fb04 	ldr.w	pc, [sp], #4

000d4918 <_ZN21StringPrintableHelper5writeEh>:
        unsigned len = s.length();
        s.concat((const char*)buffer, size);
        return s.length()-len;
    }

    virtual size_t write(uint8_t c) override
   d4918:	b508      	push	{r3, lr}
    {
        return s.concat((char)c);
   d491a:	6880      	ldr	r0, [r0, #8]
   d491c:	f7ff ffef 	bl	d48fe <_ZN6String6concatEc>
    }
   d4920:	bd08      	pop	{r3, pc}
	...

000d4924 <_ZN6StringC1ERK9Printable>:
};

String::String(const Printable& printable)
   d4924:	b530      	push	{r4, r5, lr}
   d4926:	b085      	sub	sp, #20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4928:	2300      	movs	r3, #0
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d492a:	460d      	mov	r5, r1
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d492c:	9302      	str	r3, [sp, #8]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d492e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4930:	6043      	str	r3, [r0, #4]
	len = 0;
   d4932:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4934:	7303      	strb	r3, [r0, #12]
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
        s.reserve(20);
   d4936:	2114      	movs	r1, #20
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d4938:	4b06      	ldr	r3, [pc, #24]	; (d4954 <_ZN6StringC1ERK9Printable+0x30>)
   d493a:	9301      	str	r3, [sp, #4]
    {
        return s.concat((char)c);
    }
};

String::String(const Printable& printable)
   d493c:	4604      	mov	r4, r0
{
    String& s;

public:

    StringPrintableHelper(String& s_) : s(s_) {
   d493e:	9003      	str	r0, [sp, #12]
        s.reserve(20);
   d4940:	f7ff ff80 	bl	d4844 <_ZN6String7reserveEj>

String::String(const Printable& printable)
{
    init();
    StringPrintableHelper help(*this);
    printable.printTo(help);
   d4944:	682b      	ldr	r3, [r5, #0]
   d4946:	a901      	add	r1, sp, #4
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	4628      	mov	r0, r5
   d494c:	4798      	blx	r3
}
   d494e:	4620      	mov	r0, r4
   d4950:	b005      	add	sp, #20
   d4952:	bd30      	pop	{r4, r5, pc}
   d4954:	000d5850 	.word	0x000d5850

000d4958 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4958:	b510      	push	{r4, lr}
   d495a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d495c:	6800      	ldr	r0, [r0, #0]
   d495e:	b108      	cbz	r0, d4964 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4960:	f7ff fdae 	bl	d44c0 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4964:	4620      	mov	r0, r4
   d4966:	bd10      	pop	{r4, pc}

000d4968 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4968:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d496a:	4c06      	ldr	r4, [pc, #24]	; (d4984 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d496c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d496e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4970:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4972:	f7ff fd9d 	bl	d44b0 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4976:	4620      	mov	r0, r4
   d4978:	4a03      	ldr	r2, [pc, #12]	; (d4988 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d497a:	4904      	ldr	r1, [pc, #16]	; (d498c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d497c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4980:	f000 bca4 	b.w	d52cc <__aeabi_atexit>
   d4984:	2003e40c 	.word	0x2003e40c
   d4988:	2003dcac 	.word	0x2003dcac
   d498c:	000d4959 	.word	0x000d4959

000d4990 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4992:	4606      	mov	r6, r0
   d4994:	460d      	mov	r5, r1
   d4996:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4998:	2400      	movs	r4, #0
  while (size--) {
   d499a:	42bd      	cmp	r5, r7
   d499c:	d00c      	beq.n	d49b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d499e:	6833      	ldr	r3, [r6, #0]
   d49a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d49a4:	689b      	ldr	r3, [r3, #8]
   d49a6:	4630      	mov	r0, r6
   d49a8:	4798      	blx	r3
     if (chunk>=0)
   d49aa:	2800      	cmp	r0, #0
   d49ac:	db01      	blt.n	d49b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d49ae:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d49b0:	e7f3      	b.n	d499a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d49b2:	2c00      	cmp	r4, #0
   d49b4:	bf08      	it	eq
   d49b6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d49b8:	4620      	mov	r0, r4
   d49ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d49bc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d49bc:	b570      	push	{r4, r5, r6, lr}
   d49be:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d49c0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d49c2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d49c4:	b149      	cbz	r1, d49da <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d49c6:	f000 fe23 	bl	d5610 <strlen>
   d49ca:	682b      	ldr	r3, [r5, #0]
   d49cc:	4602      	mov	r2, r0
   d49ce:	4621      	mov	r1, r4
   d49d0:	4628      	mov	r0, r5
   d49d2:	68db      	ldr	r3, [r3, #12]
    }
   d49d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d49d8:	4718      	bx	r3
    }
   d49da:	bd70      	pop	{r4, r5, r6, pc}

000d49dc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d49dc:	6803      	ldr	r3, [r0, #0]
   d49de:	689b      	ldr	r3, [r3, #8]
   d49e0:	4718      	bx	r3

000d49e2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d49e2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d49e4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d49e6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d49e8:	f7ff fff8 	bl	d49dc <_ZN5Print5printEc>
  n += print('\n');
   d49ec:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d49ee:	4604      	mov	r4, r0
  n += print('\n');
   d49f0:	4628      	mov	r0, r5
   d49f2:	f7ff fff3 	bl	d49dc <_ZN5Print5printEc>
  return n;
}
   d49f6:	4420      	add	r0, r4
   d49f8:	bd38      	pop	{r3, r4, r5, pc}

000d49fa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d49fa:	b530      	push	{r4, r5, lr}
   d49fc:	b08b      	sub	sp, #44	; 0x2c
   d49fe:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4a00:	2100      	movs	r1, #0
   d4a02:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4a06:	2a01      	cmp	r2, #1
   d4a08:	bf98      	it	ls
   d4a0a:	220a      	movls	r2, #10
   d4a0c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4a10:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4a14:	fb05 3312 	mls	r3, r5, r2, r3
   d4a18:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4a1c:	2b09      	cmp	r3, #9
   d4a1e:	bf94      	ite	ls
   d4a20:	3330      	addls	r3, #48	; 0x30
   d4a22:	3337      	addhi	r3, #55	; 0x37
   d4a24:	b2db      	uxtb	r3, r3
   d4a26:	4621      	mov	r1, r4
   d4a28:	f804 3901 	strb.w	r3, [r4], #-1
   d4a2c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4a2e:	2d00      	cmp	r5, #0
   d4a30:	d1ee      	bne.n	d4a10 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4a32:	f7ff ffc3 	bl	d49bc <_ZN5Print5writeEPKc>
}
   d4a36:	b00b      	add	sp, #44	; 0x2c
   d4a38:	bd30      	pop	{r4, r5, pc}

000d4a3a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4a3a:	b40c      	push	{r2, r3}
   d4a3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4a40:	b087      	sub	sp, #28
   d4a42:	af00      	add	r7, sp, #0
   d4a44:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d4a48:	4605      	mov	r5, r0
   d4a4a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d4a4e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d4a50:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d4a52:	4623      	mov	r3, r4
   d4a54:	464a      	mov	r2, r9
   d4a56:	2114      	movs	r1, #20
   d4a58:	1d38      	adds	r0, r7, #4
   d4a5a:	f7ff fe5d 	bl	d4718 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d4a5e:	2813      	cmp	r0, #19
   d4a60:	d805      	bhi.n	d4a6e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4a62:	1d39      	adds	r1, r7, #4
   d4a64:	4628      	mov	r0, r5
   d4a66:	f7ff ffa9 	bl	d49bc <_ZN5Print5writeEPKc>
   d4a6a:	4604      	mov	r4, r0
   d4a6c:	e013      	b.n	d4a96 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4a6e:	f100 0308 	add.w	r3, r0, #8
   d4a72:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d4a76:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d4a78:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d4a7c:	1c41      	adds	r1, r0, #1
   d4a7e:	4623      	mov	r3, r4
   d4a80:	464a      	mov	r2, r9
   d4a82:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d4a84:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d4a86:	f7ff fe47 	bl	d4718 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4a8a:	4669      	mov	r1, sp
   d4a8c:	4628      	mov	r0, r5
   d4a8e:	f7ff ff95 	bl	d49bc <_ZN5Print5writeEPKc>
   d4a92:	4604      	mov	r4, r0
   d4a94:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d4a96:	b11e      	cbz	r6, d4aa0 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d4a98:	4628      	mov	r0, r5
   d4a9a:	f7ff ffa2 	bl	d49e2 <_ZN5Print7printlnEv>
   d4a9e:	4404      	add	r4, r0
    return n;
}
   d4aa0:	4620      	mov	r0, r4
   d4aa2:	371c      	adds	r7, #28
   d4aa4:	46bd      	mov	sp, r7
   d4aa6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4aaa:	b002      	add	sp, #8
   d4aac:	4770      	bx	lr
	...

000d4ab0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4ab0:	4b01      	ldr	r3, [pc, #4]	; (d4ab8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4ab2:	4a02      	ldr	r2, [pc, #8]	; (d4abc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4ab4:	601a      	str	r2, [r3, #0]
   d4ab6:	4770      	bx	lr
   d4ab8:	2003e410 	.word	0x2003e410
   d4abc:	000d58d3 	.word	0x000d58d3

000d4ac0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4ac0:	4b02      	ldr	r3, [pc, #8]	; (d4acc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4ac2:	681a      	ldr	r2, [r3, #0]
   d4ac4:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4ac6:	601a      	str	r2, [r3, #0]
   d4ac8:	4770      	bx	lr
   d4aca:	bf00      	nop
   d4acc:	2003dc44 	.word	0x2003dc44
   d4ad0:	2003e414 	.word	0x2003e414

000d4ad4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4ad4:	2100      	movs	r1, #0
   d4ad6:	f7ff bd8b 	b.w	d45f0 <system_delay_ms>

000d4ada <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ada:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4adc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ade:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4ae0:	b113      	cbz	r3, d4ae8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ae2:	2203      	movs	r2, #3
   d4ae4:	4601      	mov	r1, r0
   d4ae6:	4798      	blx	r3
    }
   d4ae8:	4620      	mov	r0, r4
   d4aea:	bd10      	pop	{r4, pc}

000d4aec <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4aec:	b510      	push	{r4, lr}
   d4aee:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4af0:	f7ff fff3 	bl	d4ada <_ZNSt14_Function_baseD1Ev>
   d4af4:	4620      	mov	r0, r4
   d4af6:	bd10      	pop	{r4, pc}

000d4af8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4af8:	4803      	ldr	r0, [pc, #12]	; (d4b08 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4afa:	4a04      	ldr	r2, [pc, #16]	; (d4b0c <_GLOBAL__sub_I_RGB+0x14>)
   d4afc:	4904      	ldr	r1, [pc, #16]	; (d4b10 <_GLOBAL__sub_I_RGB+0x18>)
   d4afe:	2300      	movs	r3, #0
   d4b00:	6083      	str	r3, [r0, #8]
   d4b02:	f000 bbe3 	b.w	d52cc <__aeabi_atexit>
   d4b06:	bf00      	nop
   d4b08:	2003e418 	.word	0x2003e418
   d4b0c:	2003dcac 	.word	0x2003dcac
   d4b10:	000d4aed 	.word	0x000d4aed

000d4b14 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4b14:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4b16:	4b0c      	ldr	r3, [pc, #48]	; (d4b48 <serialEventRun+0x34>)
   d4b18:	b133      	cbz	r3, d4b28 <serialEventRun+0x14>
   d4b1a:	f000 f957 	bl	d4dcc <_Z16_fetch_usbserialv>
   d4b1e:	6803      	ldr	r3, [r0, #0]
   d4b20:	691b      	ldr	r3, [r3, #16]
   d4b22:	4798      	blx	r3
   d4b24:	2800      	cmp	r0, #0
   d4b26:	dc09      	bgt.n	d4b3c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4b28:	4b08      	ldr	r3, [pc, #32]	; (d4b4c <serialEventRun+0x38>)
   d4b2a:	b163      	cbz	r3, d4b46 <serialEventRun+0x32>
   d4b2c:	f000 f9cc 	bl	d4ec8 <_Z22__fetch_global_Serial1v>
   d4b30:	6803      	ldr	r3, [r0, #0]
   d4b32:	691b      	ldr	r3, [r3, #16]
   d4b34:	4798      	blx	r3
   d4b36:	2800      	cmp	r0, #0
   d4b38:	dc03      	bgt.n	d4b42 <serialEventRun+0x2e>
   d4b3a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4b3c:	f3af 8000 	nop.w
   d4b40:	e7f2      	b.n	d4b28 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4b42:	f3af 8000 	nop.w
   d4b46:	bd08      	pop	{r3, pc}
	...

000d4b50 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4b50:	b508      	push	{r3, lr}
	serialEventRun();
   d4b52:	f7ff ffdf 	bl	d4b14 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4b56:	f7ff fc8b 	bl	d4470 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4b5a:	4b01      	ldr	r3, [pc, #4]	; (d4b60 <_post_loop+0x10>)
   d4b5c:	6018      	str	r0, [r3, #0]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	2003e74c 	.word	0x2003e74c

000d4b64 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4b64:	4802      	ldr	r0, [pc, #8]	; (d4b70 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4b66:	4a03      	ldr	r2, [pc, #12]	; (d4b74 <_Z33system_initialize_user_backup_ramv+0x10>)
   d4b68:	4903      	ldr	r1, [pc, #12]	; (d4b78 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4b6a:	1a12      	subs	r2, r2, r0
   d4b6c:	f000 bd0c 	b.w	d5588 <memcpy>
   d4b70:	2003f400 	.word	0x2003f400
   d4b74:	2003f404 	.word	0x2003f404
   d4b78:	000d5b20 	.word	0x000d5b20

000d4b7c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4b7c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4b7e:	2300      	movs	r3, #0
   d4b80:	9300      	str	r3, [sp, #0]
   d4b82:	461a      	mov	r2, r3
   d4b84:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4b88:	f7ff fd44 	bl	d4614 <system_ctrl_set_result>
}
   d4b8c:	b003      	add	sp, #12
   d4b8e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4b94 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d4b94:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4b96:	8843      	ldrh	r3, [r0, #2]
   d4b98:	2b0a      	cmp	r3, #10
   d4b9a:	d008      	beq.n	d4bae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4b9c:	2b50      	cmp	r3, #80	; 0x50
   d4b9e:	d109      	bne.n	d4bb4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d4ba0:	4b09      	ldr	r3, [pc, #36]	; (d4bc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4ba2:	681b      	ldr	r3, [r3, #0]
   d4ba4:	b13b      	cbz	r3, d4bb6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d4ba6:	b003      	add	sp, #12
   d4ba8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d4bac:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d4bae:	f7ff ffe5 	bl	d4b7c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d4bb2:	e006      	b.n	d4bc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4bb4:	2300      	movs	r3, #0
   d4bb6:	9300      	str	r3, [sp, #0]
   d4bb8:	461a      	mov	r2, r3
   d4bba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4bbe:	f7ff fd29 	bl	d4614 <system_ctrl_set_result>
        break;
    }
}
   d4bc2:	b003      	add	sp, #12
   d4bc4:	f85d fb04 	ldr.w	pc, [sp], #4
   d4bc8:	2003e428 	.word	0x2003e428

000d4bcc <module_user_init_hook>:

void module_user_init_hook()
{
   d4bcc:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4bce:	4c10      	ldr	r4, [pc, #64]	; (d4c10 <module_user_init_hook+0x44>)
   d4bd0:	4d10      	ldr	r5, [pc, #64]	; (d4c14 <module_user_init_hook+0x48>)
   d4bd2:	6823      	ldr	r3, [r4, #0]
   d4bd4:	42ab      	cmp	r3, r5
   d4bd6:	4b10      	ldr	r3, [pc, #64]	; (d4c18 <module_user_init_hook+0x4c>)
   d4bd8:	bf0c      	ite	eq
   d4bda:	2201      	moveq	r2, #1
   d4bdc:	2200      	movne	r2, #0
   d4bde:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4be0:	d002      	beq.n	d4be8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d4be2:	f7ff ffbf 	bl	d4b64 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4be6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4be8:	f7ff fc3a 	bl	d4460 <HAL_RNG_GetRandomNumber>
   d4bec:	4604      	mov	r4, r0
    srand(seed);
   d4bee:	f000 fcdf 	bl	d55b0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4bf2:	4b0a      	ldr	r3, [pc, #40]	; (d4c1c <module_user_init_hook+0x50>)
   d4bf4:	b113      	cbz	r3, d4bfc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d4bf6:	4620      	mov	r0, r4
   d4bf8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4bfc:	2100      	movs	r1, #0
   d4bfe:	4807      	ldr	r0, [pc, #28]	; (d4c1c <module_user_init_hook+0x50>)
   d4c00:	f7ff fd6a 	bl	d46d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c04:	2100      	movs	r1, #0
   d4c06:	4806      	ldr	r0, [pc, #24]	; (d4c20 <module_user_init_hook+0x54>)
}
   d4c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4c0c:	f7ff bcf8 	b.w	d4600 <system_ctrl_set_app_request_handler>
   d4c10:	2003f400 	.word	0x2003f400
   d4c14:	9a271c1e 	.word	0x9a271c1e
   d4c18:	2003e42c 	.word	0x2003e42c
   d4c1c:	00000000 	.word	0x00000000
   d4c20:	000d4b95 	.word	0x000d4b95

000d4c24 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4c24:	4770      	bx	lr

000d4c26 <_ZN9IPAddressD0Ev>:
   d4c26:	b510      	push	{r4, lr}
   d4c28:	2118      	movs	r1, #24
   d4c2a:	4604      	mov	r4, r0
   d4c2c:	f000 fb53 	bl	d52d6 <_ZdlPvj>
   d4c30:	4620      	mov	r0, r4
   d4c32:	bd10      	pop	{r4, pc}

000d4c34 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c34:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c36:	7d03      	ldrb	r3, [r0, #20]
   d4c38:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c3a:	b08d      	sub	sp, #52	; 0x34
   d4c3c:	460e      	mov	r6, r1
   d4c3e:	f100 0704 	add.w	r7, r0, #4
   d4c42:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c46:	d002      	beq.n	d4c4e <_ZNK9IPAddress7printToER5Print+0x1a>
   d4c48:	f100 0508 	add.w	r5, r0, #8
   d4c4c:	e018      	b.n	d4c80 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c4e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c50:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4c52:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c56:	232f      	movs	r3, #47	; 0x2f
   d4c58:	462a      	mov	r2, r5
   d4c5a:	200a      	movs	r0, #10
   d4c5c:	f7ff fc38 	bl	d44d0 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4c60:	4628      	mov	r0, r5
   d4c62:	f000 fcd5 	bl	d5610 <strlen>
   d4c66:	6833      	ldr	r3, [r6, #0]
   d4c68:	4602      	mov	r2, r0
   d4c6a:	68db      	ldr	r3, [r3, #12]
   d4c6c:	4629      	mov	r1, r5
   d4c6e:	4630      	mov	r0, r6
   d4c70:	4798      	blx	r3
   d4c72:	e00f      	b.n	d4c94 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4c74:	b124      	cbz	r4, d4c80 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4c76:	212e      	movs	r1, #46	; 0x2e
   d4c78:	4630      	mov	r0, r6
   d4c7a:	f7ff feaf 	bl	d49dc <_ZN5Print5printEc>
   d4c7e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4c80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4c84:	220a      	movs	r2, #10
   d4c86:	4630      	mov	r0, r6
   d4c88:	f7ff feb7 	bl	d49fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c8c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c8e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c90:	d1f0      	bne.n	d4c74 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c92:	4620      	mov	r0, r4
    }
    return n;
}
   d4c94:	b00d      	add	sp, #52	; 0x34
   d4c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c98 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4c98:	b510      	push	{r4, lr}
   d4c9a:	4b05      	ldr	r3, [pc, #20]	; (d4cb0 <_ZN9IPAddressC1Ev+0x18>)
   d4c9c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4c9e:	2211      	movs	r2, #17
   d4ca0:	f840 3b04 	str.w	r3, [r0], #4
   d4ca4:	2100      	movs	r1, #0
   d4ca6:	f000 fc7a 	bl	d559e <memset>
{
    clear();
}
   d4caa:	4620      	mov	r0, r4
   d4cac:	bd10      	pop	{r4, pc}
   d4cae:	bf00      	nop
   d4cb0:	000d5974 	.word	0x000d5974

000d4cb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4cb4:	4603      	mov	r3, r0
   d4cb6:	4a07      	ldr	r2, [pc, #28]	; (d4cd4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4cb8:	b510      	push	{r4, lr}
   d4cba:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4cbe:	f101 0210 	add.w	r2, r1, #16
   d4cc2:	f851 4b04 	ldr.w	r4, [r1], #4
   d4cc6:	f843 4b04 	str.w	r4, [r3], #4
   d4cca:	4291      	cmp	r1, r2
   d4ccc:	d1f9      	bne.n	d4cc2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4cce:	780a      	ldrb	r2, [r1, #0]
   d4cd0:	701a      	strb	r2, [r3, #0]
}
   d4cd2:	bd10      	pop	{r4, pc}
   d4cd4:	000d5974 	.word	0x000d5974

000d4cd8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4cd8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4cda:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4cde:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4ce2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4ce6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4cea:	2304      	movs	r3, #4
   d4cec:	6041      	str	r1, [r0, #4]
   d4cee:	7503      	strb	r3, [r0, #20]
   d4cf0:	bd10      	pop	{r4, pc}

000d4cf2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4cf2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4cf4:	780d      	ldrb	r5, [r1, #0]
   d4cf6:	788b      	ldrb	r3, [r1, #2]
   d4cf8:	784a      	ldrb	r2, [r1, #1]
   d4cfa:	78c9      	ldrb	r1, [r1, #3]
   d4cfc:	9100      	str	r1, [sp, #0]
   d4cfe:	4629      	mov	r1, r5
   d4d00:	f7ff ffea 	bl	d4cd8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4d04:	b003      	add	sp, #12
   d4d06:	bd30      	pop	{r4, r5, pc}

000d4d08 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4d08:	7441      	strb	r1, [r0, #17]
   d4d0a:	4770      	bx	lr

000d4d0c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4d0c:	4770      	bx	lr

000d4d0e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d4d0e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4d10:	2100      	movs	r1, #0
   d4d12:	7c00      	ldrb	r0, [r0, #16]
   d4d14:	f7ff fc3c 	bl	d4590 <HAL_USB_USART_Receive_Data>
}
   d4d18:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d1c:	bf28      	it	cs
   d4d1e:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d22:	bd08      	pop	{r3, pc}

000d4d24 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d4d24:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4d26:	2101      	movs	r1, #1
   d4d28:	7c00      	ldrb	r0, [r0, #16]
   d4d2a:	f7ff fc31 	bl	d4590 <HAL_USB_USART_Receive_Data>
}
   d4d2e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4d32:	bf28      	it	cs
   d4d34:	f04f 30ff 	movcs.w	r0, #4294967295
   d4d38:	bd08      	pop	{r3, pc}

000d4d3a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d4d3a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4d3c:	7c00      	ldrb	r0, [r0, #16]
   d4d3e:	f7ff fc1f 	bl	d4580 <HAL_USB_USART_Available_Data_For_Write>
}
   d4d42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d46:	bd08      	pop	{r3, pc}

000d4d48 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d4d48:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4d4a:	7c00      	ldrb	r0, [r0, #16]
   d4d4c:	f7ff fc10 	bl	d4570 <HAL_USB_USART_Available_Data>
}
   d4d50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4d54:	bd08      	pop	{r3, pc}

000d4d56 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d4d56:	7c00      	ldrb	r0, [r0, #16]
   d4d58:	f7ff bc2a 	b.w	d45b0 <HAL_USB_USART_Flush_Data>

000d4d5c <_ZN9USBSerialD0Ev>:
   d4d5c:	b510      	push	{r4, lr}
   d4d5e:	2114      	movs	r1, #20
   d4d60:	4604      	mov	r4, r0
   d4d62:	f000 fab8 	bl	d52d6 <_ZdlPvj>
   d4d66:	4620      	mov	r0, r4
   d4d68:	bd10      	pop	{r4, pc}

000d4d6a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4d6a:	b538      	push	{r3, r4, r5, lr}
   d4d6c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4d6e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d4d70:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4d72:	f7ff fc05 	bl	d4580 <HAL_USB_USART_Available_Data_For_Write>
   d4d76:	2800      	cmp	r0, #0
   d4d78:	dc01      	bgt.n	d4d7e <_ZN9USBSerial5writeEh+0x14>
   d4d7a:	7c60      	ldrb	r0, [r4, #17]
   d4d7c:	b128      	cbz	r0, d4d8a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4d7e:	4629      	mov	r1, r5
   d4d80:	7c20      	ldrb	r0, [r4, #16]
   d4d82:	f7ff fc0d 	bl	d45a0 <HAL_USB_USART_Send_Data>
   d4d86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d4d8a:	bd38      	pop	{r3, r4, r5, pc}

000d4d8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4d8c:	b510      	push	{r4, lr}
   d4d8e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4d90:	2300      	movs	r3, #0
   d4d92:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4d94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4d98:	60a3      	str	r3, [r4, #8]
   d4d9a:	4b05      	ldr	r3, [pc, #20]	; (d4db0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4d9c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d4d9e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4da0:	4608      	mov	r0, r1
{
  _serial = serial;
   d4da2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d4da4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d4da6:	4611      	mov	r1, r2
   d4da8:	f7ff fbd2 	bl	d4550 <HAL_USB_USART_Init>
}
   d4dac:	4620      	mov	r0, r4
   d4dae:	bd10      	pop	{r4, pc}
   d4db0:	000d5988 	.word	0x000d5988

000d4db4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4db4:	2200      	movs	r2, #0
   d4db6:	7c00      	ldrb	r0, [r0, #16]
   d4db8:	f7ff bbd2 	b.w	d4560 <HAL_USB_USART_Begin>

000d4dbc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4dbc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4dbe:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4dc0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4dc2:	2100      	movs	r1, #0
   d4dc4:	f000 fbeb 	bl	d559e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4dc8:	4620      	mov	r0, r4
   d4dca:	bd10      	pop	{r4, pc}

000d4dcc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4dcc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4dce:	4d0e      	ldr	r5, [pc, #56]	; (d4e08 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d4dd0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4dd2:	a801      	add	r0, sp, #4
   d4dd4:	f7ff fff2 	bl	d4dbc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4dd8:	6829      	ldr	r1, [r5, #0]
   d4dda:	f011 0401 	ands.w	r4, r1, #1
   d4dde:	d110      	bne.n	d4e02 <_Z16_fetch_usbserialv+0x36>
   d4de0:	4628      	mov	r0, r5
   d4de2:	f7ff f95c 	bl	d409e <__cxa_guard_acquire>
   d4de6:	b160      	cbz	r0, d4e02 <_Z16_fetch_usbserialv+0x36>
   d4de8:	aa01      	add	r2, sp, #4
   d4dea:	4621      	mov	r1, r4
   d4dec:	4807      	ldr	r0, [pc, #28]	; (d4e0c <_Z16_fetch_usbserialv+0x40>)
   d4dee:	f7ff ffcd 	bl	d4d8c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4df2:	4628      	mov	r0, r5
   d4df4:	f7ff f958 	bl	d40a8 <__cxa_guard_release>
   d4df8:	4a05      	ldr	r2, [pc, #20]	; (d4e10 <_Z16_fetch_usbserialv+0x44>)
   d4dfa:	4906      	ldr	r1, [pc, #24]	; (d4e14 <_Z16_fetch_usbserialv+0x48>)
   d4dfc:	4803      	ldr	r0, [pc, #12]	; (d4e0c <_Z16_fetch_usbserialv+0x40>)
   d4dfe:	f000 fa65 	bl	d52cc <__aeabi_atexit>
	return _usbserial;
}
   d4e02:	4802      	ldr	r0, [pc, #8]	; (d4e0c <_Z16_fetch_usbserialv+0x40>)
   d4e04:	b007      	add	sp, #28
   d4e06:	bd30      	pop	{r4, r5, pc}
   d4e08:	2003e430 	.word	0x2003e430
   d4e0c:	2003e434 	.word	0x2003e434
   d4e10:	2003dcac 	.word	0x2003dcac
   d4e14:	000d4d0d 	.word	0x000d4d0d

000d4e18 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d4e18:	4770      	bx	lr

000d4e1a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4e1a:	7441      	strb	r1, [r0, #17]
   d4e1c:	4770      	bx	lr

000d4e1e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d4e1e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d4e20:	7c00      	ldrb	r0, [r0, #16]
   d4e22:	f7ff fb8d 	bl	d4540 <HAL_USART_Available_Data_For_Write>
}
   d4e26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e2a:	bd08      	pop	{r3, pc}

000d4e2c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4e2c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d4e2e:	7c00      	ldrb	r0, [r0, #16]
   d4e30:	f7ff fb66 	bl	d4500 <HAL_USART_Available_Data>
}
   d4e34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4e38:	bd08      	pop	{r3, pc}

000d4e3a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4e3a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d4e3c:	7c00      	ldrb	r0, [r0, #16]
   d4e3e:	f7ff fb6f 	bl	d4520 <HAL_USART_Peek_Data>
}
   d4e42:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e46:	bf28      	it	cs
   d4e48:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e4c:	bd08      	pop	{r3, pc}

000d4e4e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4e4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d4e50:	7c00      	ldrb	r0, [r0, #16]
   d4e52:	f7ff fb5d 	bl	d4510 <HAL_USART_Read_Data>
}
   d4e56:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d4e5a:	bf28      	it	cs
   d4e5c:	f04f 30ff 	movcs.w	r0, #4294967295
   d4e60:	bd08      	pop	{r3, pc}

000d4e62 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d4e62:	7c00      	ldrb	r0, [r0, #16]
   d4e64:	f7ff bb64 	b.w	d4530 <HAL_USART_Flush_Data>

000d4e68 <_ZN11USARTSerialD0Ev>:
   d4e68:	b510      	push	{r4, lr}
   d4e6a:	2114      	movs	r1, #20
   d4e6c:	4604      	mov	r4, r0
   d4e6e:	f000 fa32 	bl	d52d6 <_ZdlPvj>
   d4e72:	4620      	mov	r0, r4
   d4e74:	bd10      	pop	{r4, pc}

000d4e76 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4e76:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4e78:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d4e7a:	4604      	mov	r4, r0
   d4e7c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d4e7e:	b925      	cbnz	r5, d4e8a <_ZN11USARTSerial5writeEh+0x14>
   d4e80:	7c00      	ldrb	r0, [r0, #16]
   d4e82:	f7ff fb5d 	bl	d4540 <HAL_USART_Available_Data_For_Write>
   d4e86:	2800      	cmp	r0, #0
   d4e88:	dd05      	ble.n	d4e96 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4e8a:	4631      	mov	r1, r6
   d4e8c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d4e92:	f7ff bb2d 	b.w	d44f0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d4e96:	4628      	mov	r0, r5
   d4e98:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4e9c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d4e9c:	b510      	push	{r4, lr}
   d4e9e:	4604      	mov	r4, r0
   d4ea0:	4608      	mov	r0, r1
   d4ea2:	4611      	mov	r1, r2
   d4ea4:	2200      	movs	r2, #0
   d4ea6:	6062      	str	r2, [r4, #4]
   d4ea8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4eac:	60a2      	str	r2, [r4, #8]
   d4eae:	4a05      	ldr	r2, [pc, #20]	; (d4ec4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d4eb0:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d4eb2:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d4eb4:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d4eb6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d4eb8:	461a      	mov	r2, r3
   d4eba:	f7ff fb11 	bl	d44e0 <HAL_USART_Init>
}
   d4ebe:	4620      	mov	r0, r4
   d4ec0:	bd10      	pop	{r4, pc}
   d4ec2:	bf00      	nop
   d4ec4:	000d59b8 	.word	0x000d59b8

000d4ec8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4ec8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4eca:	4d0c      	ldr	r5, [pc, #48]	; (d4efc <_Z22__fetch_global_Serial1v+0x34>)
   d4ecc:	6829      	ldr	r1, [r5, #0]
   d4ece:	f011 0401 	ands.w	r4, r1, #1
   d4ed2:	d111      	bne.n	d4ef8 <_Z22__fetch_global_Serial1v+0x30>
   d4ed4:	4628      	mov	r0, r5
   d4ed6:	f7ff f8e2 	bl	d409e <__cxa_guard_acquire>
   d4eda:	b168      	cbz	r0, d4ef8 <_Z22__fetch_global_Serial1v+0x30>
   d4edc:	4a08      	ldr	r2, [pc, #32]	; (d4f00 <_Z22__fetch_global_Serial1v+0x38>)
   d4ede:	4b09      	ldr	r3, [pc, #36]	; (d4f04 <_Z22__fetch_global_Serial1v+0x3c>)
   d4ee0:	4809      	ldr	r0, [pc, #36]	; (d4f08 <_Z22__fetch_global_Serial1v+0x40>)
   d4ee2:	4621      	mov	r1, r4
   d4ee4:	f7ff ffda 	bl	d4e9c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d4ee8:	4628      	mov	r0, r5
   d4eea:	f7ff f8dd 	bl	d40a8 <__cxa_guard_release>
   d4eee:	4a07      	ldr	r2, [pc, #28]	; (d4f0c <_Z22__fetch_global_Serial1v+0x44>)
   d4ef0:	4907      	ldr	r1, [pc, #28]	; (d4f10 <_Z22__fetch_global_Serial1v+0x48>)
   d4ef2:	4805      	ldr	r0, [pc, #20]	; (d4f08 <_Z22__fetch_global_Serial1v+0x40>)
   d4ef4:	f000 f9ea 	bl	d52cc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4ef8:	4803      	ldr	r0, [pc, #12]	; (d4f08 <_Z22__fetch_global_Serial1v+0x40>)
   d4efa:	bd38      	pop	{r3, r4, r5, pc}
   d4efc:	2003e4e0 	.word	0x2003e4e0
   d4f00:	2003e4e4 	.word	0x2003e4e4
   d4f04:	2003e45c 	.word	0x2003e45c
   d4f08:	2003e448 	.word	0x2003e448
   d4f0c:	2003dcac 	.word	0x2003dcac
   d4f10:	000d4e19 	.word	0x000d4e19

000d4f14 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f14:	2200      	movs	r2, #0
   d4f16:	4611      	mov	r1, r2
   d4f18:	6840      	ldr	r0, [r0, #4]
   d4f1a:	f7ff bbc5 	b.w	d46a8 <network_listening>

000d4f1e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f1e:	2200      	movs	r2, #0
   d4f20:	4611      	mov	r1, r2
   d4f22:	6840      	ldr	r0, [r0, #4]
   d4f24:	f7ff bbd0 	b.w	d46c8 <network_get_listen_timeout>

000d4f28 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f28:	2200      	movs	r2, #0
   d4f2a:	6840      	ldr	r0, [r0, #4]
   d4f2c:	f7ff bbc4 	b.w	d46b8 <network_set_listen_timeout>

000d4f30 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f30:	2200      	movs	r2, #0
   d4f32:	f081 0101 	eor.w	r1, r1, #1
   d4f36:	6840      	ldr	r0, [r0, #4]
   d4f38:	f7ff bbae 	b.w	d4698 <network_listen>

000d4f3c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4f3c:	2300      	movs	r3, #0
   d4f3e:	461a      	mov	r2, r3
   d4f40:	2101      	movs	r1, #1
   d4f42:	6840      	ldr	r0, [r0, #4]
   d4f44:	f7ff bba0 	b.w	d4688 <network_off>

000d4f48 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4f48:	2300      	movs	r3, #0
   d4f4a:	461a      	mov	r2, r3
   d4f4c:	4619      	mov	r1, r3
   d4f4e:	6840      	ldr	r0, [r0, #4]
   d4f50:	f7ff bb92 	b.w	d4678 <network_on>

000d4f54 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f54:	2200      	movs	r2, #0
   d4f56:	4611      	mov	r1, r2
   d4f58:	6840      	ldr	r0, [r0, #4]
   d4f5a:	f7ff bb85 	b.w	d4668 <network_ready>

000d4f5e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f5e:	2200      	movs	r2, #0
   d4f60:	4611      	mov	r1, r2
   d4f62:	6840      	ldr	r0, [r0, #4]
   d4f64:	f7ff bb70 	b.w	d4648 <network_connecting>

000d4f68 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f68:	2200      	movs	r2, #0
   d4f6a:	2102      	movs	r1, #2
   d4f6c:	6840      	ldr	r0, [r0, #4]
   d4f6e:	f7ff bb73 	b.w	d4658 <network_disconnect>

000d4f72 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4f72:	2300      	movs	r3, #0
   d4f74:	461a      	mov	r2, r3
   d4f76:	6840      	ldr	r0, [r0, #4]
   d4f78:	f7ff bb5e 	b.w	d4638 <network_connect>

000d4f7c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4f7c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f7e:	4605      	mov	r5, r0
   d4f80:	b188      	cbz	r0, d4fa6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f82:	6804      	ldr	r4, [r0, #0]
   d4f84:	b14c      	cbz	r4, d4f9a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d4f86:	68a3      	ldr	r3, [r4, #8]
   d4f88:	b11b      	cbz	r3, d4f92 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f8a:	2203      	movs	r2, #3
   d4f8c:	4621      	mov	r1, r4
   d4f8e:	4620      	mov	r0, r4
   d4f90:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f92:	2110      	movs	r1, #16
   d4f94:	4620      	mov	r0, r4
   d4f96:	f000 f99e 	bl	d52d6 <_ZdlPvj>
   d4f9a:	4628      	mov	r0, r5
   d4f9c:	2114      	movs	r1, #20
      }
   d4f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4fa2:	f000 b998 	b.w	d52d6 <_ZdlPvj>
   d4fa6:	bd38      	pop	{r3, r4, r5, pc}

000d4fa8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4fa8:	b110      	cbz	r0, d4fb0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4faa:	6803      	ldr	r3, [r0, #0]
   d4fac:	685b      	ldr	r3, [r3, #4]
   d4fae:	4718      	bx	r3
   d4fb0:	4770      	bx	lr

000d4fb2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4fb2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4fb4:	6803      	ldr	r3, [r0, #0]
   d4fb6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4fb8:	b1bb      	cbz	r3, d4fea <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4fba:	6858      	ldr	r0, [r3, #4]
   d4fbc:	f7ff fa60 	bl	d4480 <os_thread_is_current>
   d4fc0:	b978      	cbnz	r0, d4fe2 <_ZN6ThreadD1Ev+0x30>
   d4fc2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4fc4:	7c5a      	ldrb	r2, [r3, #17]
   d4fc6:	b912      	cbnz	r2, d4fce <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4fc8:	6858      	ldr	r0, [r3, #4]
   d4fca:	f7ff fa61 	bl	d4490 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4fce:	6823      	ldr	r3, [r4, #0]
   d4fd0:	6858      	ldr	r0, [r3, #4]
   d4fd2:	f7ff fa65 	bl	d44a0 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4fd6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4fd8:	2300      	movs	r3, #0
   d4fda:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4fdc:	b128      	cbz	r0, d4fea <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4fde:	f7ff ffcd 	bl	d4f7c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4fe2:	6820      	ldr	r0, [r4, #0]
   d4fe4:	b108      	cbz	r0, d4fea <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4fe6:	f7ff ffc9 	bl	d4f7c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4fea:	4620      	mov	r0, r4
   d4fec:	bd10      	pop	{r4, pc}

000d4fee <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4fee:	b538      	push	{r3, r4, r5, lr}
   d4ff0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4ff2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4ff6:	b108      	cbz	r0, d4ffc <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4ff8:	f7ff f84f 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4ffc:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5000:	b108      	cbz	r0, d5006 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5002:	f7ff fa5d 	bl	d44c0 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5006:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d500a:	b135      	cbz	r5, d501a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d500c:	4628      	mov	r0, r5
   d500e:	f7ff ffd0 	bl	d4fb2 <_ZN6ThreadD1Ev>
   d5012:	2104      	movs	r1, #4
   d5014:	4628      	mov	r0, r5
   d5016:	f000 f95e 	bl	d52d6 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d501a:	6820      	ldr	r0, [r4, #0]
   d501c:	b108      	cbz	r0, d5022 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d501e:	f7ff ffc3 	bl	d4fa8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5022:	4620      	mov	r0, r4
   d5024:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5028 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5028:	b510      	push	{r4, lr}
   d502a:	4b04      	ldr	r3, [pc, #16]	; (d503c <_ZN5spark9MeshClassD1Ev+0x14>)
   d502c:	4604      	mov	r4, r0
   d502e:	f840 3b08 	str.w	r3, [r0], #8
   d5032:	f7ff ffdc 	bl	d4fee <_ZN5spark11MeshPublishD1Ev>
   d5036:	4620      	mov	r0, r4
   d5038:	bd10      	pop	{r4, pc}
   d503a:	bf00      	nop
   d503c:	000d59e8 	.word	0x000d59e8

000d5040 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5040:	b538      	push	{r3, r4, r5, lr}
   d5042:	4c0e      	ldr	r4, [pc, #56]	; (d507c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5044:	4b0e      	ldr	r3, [pc, #56]	; (d5080 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5046:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5048:	2500      	movs	r5, #0
   d504a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d504c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5050:	6063      	str	r3, [r4, #4]
   d5052:	60a5      	str	r5, [r4, #8]
   d5054:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5058:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d505c:	f7ff fa28 	bl	d44b0 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5060:	4b08      	ldr	r3, [pc, #32]	; (d5084 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5062:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5066:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d506a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d506c:	4620      	mov	r0, r4
   d506e:	4a06      	ldr	r2, [pc, #24]	; (d5088 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5070:	4906      	ldr	r1, [pc, #24]	; (d508c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5076:	f000 b929 	b.w	d52cc <__aeabi_atexit>
   d507a:	bf00      	nop
   d507c:	2003e568 	.word	0x2003e568
   d5080:	000d5a50 	.word	0x000d5a50
   d5084:	000d59e8 	.word	0x000d59e8
   d5088:	2003dcac 	.word	0x2003dcac
   d508c:	000d5029 	.word	0x000d5029

000d5090 <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv>:
                results[index++] = *result;
            }
        }

    protected:
        static void callback(WiFiAccessPoint* result, void* cookie)
   d5090:	b530      	push	{r4, r5, lr}
        WiFiAccessPoint* results;

        int index;

        void addResult(WiFiAccessPoint* result) {
            if (index<count) {
   d5092:	684b      	ldr	r3, [r1, #4]
   d5094:	688a      	ldr	r2, [r1, #8]
   d5096:	4293      	cmp	r3, r2
   d5098:	da10      	bge.n	d50bc <_ZN5spark16APArrayPopulator8callbackEP15WiFiAccessPointPv+0x2c>
                results[index++] = *result;
   d509a:	680a      	ldr	r2, [r1, #0]
   d509c:	1c5c      	adds	r4, r3, #1
   d509e:	604c      	str	r4, [r1, #4]
   d50a0:	4605      	mov	r5, r0
   d50a2:	2438      	movs	r4, #56	; 0x38
   d50a4:	fb04 2403 	mla	r4, r4, r3, r2
   d50a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50b4:	e895 0003 	ldmia.w	r5, {r0, r1}
   d50b8:	e884 0003 	stmia.w	r4, {r0, r1}
   d50bc:	bd30      	pop	{r4, r5, pc}

000d50be <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d50be:	2200      	movs	r2, #0
   d50c0:	4611      	mov	r1, r2
   d50c2:	6840      	ldr	r0, [r0, #4]
   d50c4:	f7ff bad0 	b.w	d4668 <network_ready>

000d50c8 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50c8:	2200      	movs	r2, #0
   d50ca:	4611      	mov	r1, r2
   d50cc:	6840      	ldr	r0, [r0, #4]
   d50ce:	f7ff baeb 	b.w	d46a8 <network_listening>

000d50d2 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d50d2:	2200      	movs	r2, #0
   d50d4:	4611      	mov	r1, r2
   d50d6:	6840      	ldr	r0, [r0, #4]
   d50d8:	f7ff baf6 	b.w	d46c8 <network_get_listen_timeout>

000d50dc <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d50dc:	2200      	movs	r2, #0
   d50de:	6840      	ldr	r0, [r0, #4]
   d50e0:	f7ff baea 	b.w	d46b8 <network_set_listen_timeout>

000d50e4 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d50e4:	2200      	movs	r2, #0
   d50e6:	f081 0101 	eor.w	r1, r1, #1
   d50ea:	6840      	ldr	r0, [r0, #4]
   d50ec:	f7ff bad4 	b.w	d4698 <network_listen>

000d50f0 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d50f0:	2300      	movs	r3, #0
   d50f2:	461a      	mov	r2, r3
   d50f4:	4619      	mov	r1, r3
   d50f6:	6840      	ldr	r0, [r0, #4]
   d50f8:	f7ff bac6 	b.w	d4688 <network_off>

000d50fc <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d50fc:	2300      	movs	r3, #0
   d50fe:	461a      	mov	r2, r3
   d5100:	4619      	mov	r1, r3
   d5102:	6840      	ldr	r0, [r0, #4]
   d5104:	f7ff bab8 	b.w	d4678 <network_on>

000d5108 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5108:	2200      	movs	r2, #0
   d510a:	4611      	mov	r1, r2
   d510c:	6840      	ldr	r0, [r0, #4]
   d510e:	f7ff ba9b 	b.w	d4648 <network_connecting>

000d5112 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5112:	2200      	movs	r2, #0
   d5114:	2102      	movs	r1, #2
   d5116:	6840      	ldr	r0, [r0, #4]
   d5118:	f7ff ba9e 	b.w	d4658 <network_disconnect>

000d511c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d511c:	2300      	movs	r3, #0
   d511e:	461a      	mov	r2, r3
   d5120:	6840      	ldr	r0, [r0, #4]
   d5122:	f7ff ba89 	b.w	d4638 <network_connect>
	...

000d5128 <_ZN5spark9WiFiClass4scanEP15WiFiAccessPointj>:
            return std::min(count, wlan_get_credentials(callback, this));
        }
    };


    int WiFiClass::scan(WiFiAccessPoint* results, size_t result_count) {
   d5128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
            this->index = 0;
   d512a:	2300      	movs	r3, #0
        }

        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
   d512c:	9101      	str	r1, [sp, #4]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_scan(callback, this));
   d512e:	4806      	ldr	r0, [pc, #24]	; (d5148 <_ZN5spark9WiFiClass4scanEP15WiFiAccessPointj+0x20>)
        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
            this->index = 0;
   d5130:	9302      	str	r3, [sp, #8]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_scan(callback, this));
   d5132:	a901      	add	r1, sp, #4

        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
   d5134:	9203      	str	r2, [sp, #12]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_scan(callback, this));
   d5136:	f7ff fa43 	bl	d45c0 <wlan_scan>


    int WiFiClass::scan(WiFiAccessPoint* results, size_t result_count) {
        APScan apScan(results, result_count);
        return apScan.start();
    }
   d513a:	9b03      	ldr	r3, [sp, #12]
   d513c:	4298      	cmp	r0, r3
   d513e:	bfa8      	it	ge
   d5140:	4618      	movge	r0, r3
   d5142:	b005      	add	sp, #20
   d5144:	f85d fb04 	ldr.w	pc, [sp], #4
   d5148:	000d5091 	.word	0x000d5091

000d514c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj>:

    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
   d514c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
            this->index = 0;
   d514e:	2300      	movs	r3, #0
        }

        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
   d5150:	9101      	str	r1, [sp, #4]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_get_credentials(callback, this));
   d5152:	4806      	ldr	r0, [pc, #24]	; (d516c <_ZN5spark9WiFiClass14getCredentialsEP15WiFiAccessPointj+0x20>)
        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
            this->index = 0;
   d5154:	9302      	str	r3, [sp, #8]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_get_credentials(callback, this));
   d5156:	a901      	add	r1, sp, #4

        int count;
    public:
        APArrayPopulator(WiFiAccessPoint* results, int size) {
            this->results = results;
            this->count = size;
   d5158:	9203      	str	r2, [sp, #12]
        public:
        using APArrayPopulator::APArrayPopulator;

        int start()
        {
            return std::min(count, wlan_get_credentials(callback, this));
   d515a:	f7ff fa39 	bl	d45d0 <wlan_get_credentials>
    }

    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }
   d515e:	9b03      	ldr	r3, [sp, #12]
   d5160:	4298      	cmp	r0, r3
   d5162:	bfa8      	it	ge
   d5164:	4618      	movge	r0, r3
   d5166:	b005      	add	sp, #20
   d5168:	f85d fb04 	ldr.w	pc, [sp], #4
   d516c:	000d5091 	.word	0x000d5091

000d5170 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5170:	4b02      	ldr	r3, [pc, #8]	; (d517c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5172:	2204      	movs	r2, #4
   d5174:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5176:	4a02      	ldr	r2, [pc, #8]	; (d5180 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5178:	601a      	str	r2, [r3, #0]
   d517a:	4770      	bx	lr
   d517c:	2003e73c 	.word	0x2003e73c
   d5180:	000d5a1c 	.word	0x000d5a1c

000d5184 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5184:	2300      	movs	r3, #0
   d5186:	461a      	mov	r2, r3
   d5188:	6840      	ldr	r0, [r0, #4]
   d518a:	f7ff ba55 	b.w	d4638 <network_connect>

000d518e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d518e:	2200      	movs	r2, #0
   d5190:	2102      	movs	r1, #2
   d5192:	6840      	ldr	r0, [r0, #4]
   d5194:	f7ff ba60 	b.w	d4658 <network_disconnect>

000d5198 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5198:	2200      	movs	r2, #0
   d519a:	4611      	mov	r1, r2
   d519c:	6840      	ldr	r0, [r0, #4]
   d519e:	f7ff ba53 	b.w	d4648 <network_connecting>

000d51a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d51a2:	2200      	movs	r2, #0
   d51a4:	4611      	mov	r1, r2
   d51a6:	6840      	ldr	r0, [r0, #4]
   d51a8:	f7ff ba5e 	b.w	d4668 <network_ready>

000d51ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d51ac:	2300      	movs	r3, #0
   d51ae:	461a      	mov	r2, r3
   d51b0:	4619      	mov	r1, r3
   d51b2:	6840      	ldr	r0, [r0, #4]
   d51b4:	f7ff ba60 	b.w	d4678 <network_on>

000d51b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d51b8:	2300      	movs	r3, #0
   d51ba:	461a      	mov	r2, r3
   d51bc:	4619      	mov	r1, r3
   d51be:	6840      	ldr	r0, [r0, #4]
   d51c0:	f7ff ba62 	b.w	d4688 <network_off>

000d51c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d51c4:	2200      	movs	r2, #0
   d51c6:	f081 0101 	eor.w	r1, r1, #1
   d51ca:	6840      	ldr	r0, [r0, #4]
   d51cc:	f7ff ba64 	b.w	d4698 <network_listen>

000d51d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d51d0:	2200      	movs	r2, #0
   d51d2:	6840      	ldr	r0, [r0, #4]
   d51d4:	f7ff ba70 	b.w	d46b8 <network_set_listen_timeout>

000d51d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d51d8:	2200      	movs	r2, #0
   d51da:	4611      	mov	r1, r2
   d51dc:	6840      	ldr	r0, [r0, #4]
   d51de:	f7ff ba73 	b.w	d46c8 <network_get_listen_timeout>

000d51e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d51e2:	2200      	movs	r2, #0
   d51e4:	4611      	mov	r1, r2
   d51e6:	6840      	ldr	r0, [r0, #4]
   d51e8:	f7ff ba5e 	b.w	d46a8 <network_listening>

000d51ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d51ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d51f0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d51f2:	b095      	sub	sp, #84	; 0x54
   d51f4:	4616      	mov	r6, r2
   d51f6:	460d      	mov	r5, r1
   d51f8:	4607      	mov	r7, r0
    IPAddress addr;
   d51fa:	f7ff fd4d 	bl	d4c98 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d51fe:	4621      	mov	r1, r4
   d5200:	2220      	movs	r2, #32
   d5202:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5204:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5206:	f000 f9ca 	bl	d559e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d520a:	2340      	movs	r3, #64	; 0x40
   d520c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d520e:	4621      	mov	r1, r4
   d5210:	466b      	mov	r3, sp
   d5212:	aa0c      	add	r2, sp, #48	; 0x30
   d5214:	4630      	mov	r0, r6
   d5216:	f7ff f913 	bl	d4440 <netdb_getaddrinfo>
    if (!r) {
   d521a:	4604      	mov	r4, r0
   d521c:	2800      	cmp	r0, #0
   d521e:	d144      	bne.n	d52aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5220:	4602      	mov	r2, r0
   d5222:	2101      	movs	r1, #1
   d5224:	6868      	ldr	r0, [r5, #4]
   d5226:	f7ff fa1f 	bl	d4668 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d522a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d522c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d522e:	4622      	mov	r2, r4
   d5230:	6868      	ldr	r0, [r5, #4]
   d5232:	f7ff fa19 	bl	d4668 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5236:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5238:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d523a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d523c:	2e00      	cmp	r6, #0
   d523e:	d034      	beq.n	d52aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5240:	2900      	cmp	r1, #0
   d5242:	d132      	bne.n	d52aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5244:	6873      	ldr	r3, [r6, #4]
   d5246:	2b02      	cmp	r3, #2
   d5248:	d002      	beq.n	d5250 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d524a:	2b0a      	cmp	r3, #10
   d524c:	d009      	beq.n	d5262 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d524e:	e02a      	b.n	d52a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5250:	f1b8 0f00 	cmp.w	r8, #0
   d5254:	d027      	beq.n	d52a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5256:	6971      	ldr	r1, [r6, #20]
   d5258:	4638      	mov	r0, r7
   d525a:	3104      	adds	r1, #4
   d525c:	f7ff fd49 	bl	d4cf2 <_ZN9IPAddressaSEPKh>
   d5260:	e020      	b.n	d52a4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5262:	f1b9 0f00 	cmp.w	r9, #0
   d5266:	d01e      	beq.n	d52a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5268:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d526a:	2211      	movs	r2, #17
   d526c:	a801      	add	r0, sp, #4
   d526e:	f000 f996 	bl	d559e <memset>
                    a.v = 6;
   d5272:	2306      	movs	r3, #6
   d5274:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5278:	ad01      	add	r5, sp, #4
   d527a:	f104 0308 	add.w	r3, r4, #8
   d527e:	3418      	adds	r4, #24
   d5280:	6818      	ldr	r0, [r3, #0]
   d5282:	6859      	ldr	r1, [r3, #4]
   d5284:	462a      	mov	r2, r5
   d5286:	c203      	stmia	r2!, {r0, r1}
   d5288:	3308      	adds	r3, #8
   d528a:	42a3      	cmp	r3, r4
   d528c:	4615      	mov	r5, r2
   d528e:	d1f7      	bne.n	d5280 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5290:	a901      	add	r1, sp, #4
   d5292:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5294:	ad07      	add	r5, sp, #28
   d5296:	f7ff fd0d 	bl	d4cb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d529a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d529c:	1d3c      	adds	r4, r7, #4
   d529e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d52a0:	682b      	ldr	r3, [r5, #0]
   d52a2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d52a4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d52a6:	69f6      	ldr	r6, [r6, #28]
   d52a8:	e7c8      	b.n	d523c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d52aa:	9800      	ldr	r0, [sp, #0]
   d52ac:	f7ff f8c0 	bl	d4430 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d52b0:	4638      	mov	r0, r7
   d52b2:	b015      	add	sp, #84	; 0x54
   d52b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d52b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d52b8:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d52ba:	4a03      	ldr	r2, [pc, #12]	; (d52c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d52bc:	601a      	str	r2, [r3, #0]
   d52be:	2200      	movs	r2, #0
   d52c0:	605a      	str	r2, [r3, #4]
   d52c2:	4770      	bx	lr
   d52c4:	2003e744 	.word	0x2003e744
   d52c8:	000d5a50 	.word	0x000d5a50

000d52cc <__aeabi_atexit>:
   d52cc:	460b      	mov	r3, r1
   d52ce:	4601      	mov	r1, r0
   d52d0:	4618      	mov	r0, r3
   d52d2:	f000 b94b 	b.w	d556c <__cxa_atexit>

000d52d6 <_ZdlPvj>:
   d52d6:	f7fe bede 	b.w	d4096 <_ZdlPv>
	...

000d52dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d52dc:	4b18      	ldr	r3, [pc, #96]	; (d5340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d52de:	681a      	ldr	r2, [r3, #0]
   d52e0:	07d1      	lsls	r1, r2, #31
   d52e2:	bf5c      	itt	pl
   d52e4:	2201      	movpl	r2, #1
   d52e6:	601a      	strpl	r2, [r3, #0]
   d52e8:	4b16      	ldr	r3, [pc, #88]	; (d5344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d52ea:	681a      	ldr	r2, [r3, #0]
   d52ec:	07d2      	lsls	r2, r2, #31
   d52ee:	bf5c      	itt	pl
   d52f0:	2201      	movpl	r2, #1
   d52f2:	601a      	strpl	r2, [r3, #0]
   d52f4:	4b14      	ldr	r3, [pc, #80]	; (d5348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d52f6:	681a      	ldr	r2, [r3, #0]
   d52f8:	07d0      	lsls	r0, r2, #31
   d52fa:	bf5c      	itt	pl
   d52fc:	2201      	movpl	r2, #1
   d52fe:	601a      	strpl	r2, [r3, #0]
   d5300:	4b12      	ldr	r3, [pc, #72]	; (d534c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5302:	681a      	ldr	r2, [r3, #0]
   d5304:	07d1      	lsls	r1, r2, #31
   d5306:	bf5c      	itt	pl
   d5308:	2201      	movpl	r2, #1
   d530a:	601a      	strpl	r2, [r3, #0]
   d530c:	4b10      	ldr	r3, [pc, #64]	; (d5350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d530e:	681a      	ldr	r2, [r3, #0]
   d5310:	07d2      	lsls	r2, r2, #31
   d5312:	bf5c      	itt	pl
   d5314:	2201      	movpl	r2, #1
   d5316:	601a      	strpl	r2, [r3, #0]
   d5318:	4b0e      	ldr	r3, [pc, #56]	; (d5354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d531a:	681a      	ldr	r2, [r3, #0]
   d531c:	07d0      	lsls	r0, r2, #31
   d531e:	bf5c      	itt	pl
   d5320:	2201      	movpl	r2, #1
   d5322:	601a      	strpl	r2, [r3, #0]
   d5324:	4b0c      	ldr	r3, [pc, #48]	; (d5358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5326:	681a      	ldr	r2, [r3, #0]
   d5328:	07d1      	lsls	r1, r2, #31
   d532a:	bf5c      	itt	pl
   d532c:	2201      	movpl	r2, #1
   d532e:	601a      	strpl	r2, [r3, #0]
   d5330:	4b0a      	ldr	r3, [pc, #40]	; (d535c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5332:	681a      	ldr	r2, [r3, #0]
   d5334:	07d2      	lsls	r2, r2, #31
   d5336:	bf5c      	itt	pl
   d5338:	2201      	movpl	r2, #1
   d533a:	601a      	strpl	r2, [r3, #0]
   d533c:	4770      	bx	lr
   d533e:	bf00      	nop
   d5340:	2003e76c 	.word	0x2003e76c
   d5344:	2003e768 	.word	0x2003e768
   d5348:	2003e764 	.word	0x2003e764
   d534c:	2003e760 	.word	0x2003e760
   d5350:	2003e75c 	.word	0x2003e75c
   d5354:	2003e758 	.word	0x2003e758
   d5358:	2003e754 	.word	0x2003e754
   d535c:	2003e750 	.word	0x2003e750

000d5360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5360:	4b24      	ldr	r3, [pc, #144]	; (d53f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5362:	681a      	ldr	r2, [r3, #0]
   d5364:	07d0      	lsls	r0, r2, #31
   d5366:	bf5c      	itt	pl
   d5368:	2201      	movpl	r2, #1
   d536a:	601a      	strpl	r2, [r3, #0]
   d536c:	4b22      	ldr	r3, [pc, #136]	; (d53f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d536e:	681a      	ldr	r2, [r3, #0]
   d5370:	07d1      	lsls	r1, r2, #31
   d5372:	bf5c      	itt	pl
   d5374:	2201      	movpl	r2, #1
   d5376:	601a      	strpl	r2, [r3, #0]
   d5378:	4b20      	ldr	r3, [pc, #128]	; (d53fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d537a:	681a      	ldr	r2, [r3, #0]
   d537c:	07d2      	lsls	r2, r2, #31
   d537e:	bf5c      	itt	pl
   d5380:	2201      	movpl	r2, #1
   d5382:	601a      	strpl	r2, [r3, #0]
   d5384:	4b1e      	ldr	r3, [pc, #120]	; (d5400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5386:	681a      	ldr	r2, [r3, #0]
   d5388:	07d0      	lsls	r0, r2, #31
   d538a:	bf5c      	itt	pl
   d538c:	2201      	movpl	r2, #1
   d538e:	601a      	strpl	r2, [r3, #0]
   d5390:	4b1c      	ldr	r3, [pc, #112]	; (d5404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5392:	681a      	ldr	r2, [r3, #0]
   d5394:	07d1      	lsls	r1, r2, #31
   d5396:	bf5c      	itt	pl
   d5398:	2201      	movpl	r2, #1
   d539a:	601a      	strpl	r2, [r3, #0]
   d539c:	4b1a      	ldr	r3, [pc, #104]	; (d5408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d539e:	681a      	ldr	r2, [r3, #0]
   d53a0:	07d2      	lsls	r2, r2, #31
   d53a2:	bf5c      	itt	pl
   d53a4:	2201      	movpl	r2, #1
   d53a6:	601a      	strpl	r2, [r3, #0]
   d53a8:	4b18      	ldr	r3, [pc, #96]	; (d540c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d53aa:	681a      	ldr	r2, [r3, #0]
   d53ac:	07d0      	lsls	r0, r2, #31
   d53ae:	bf5c      	itt	pl
   d53b0:	2201      	movpl	r2, #1
   d53b2:	601a      	strpl	r2, [r3, #0]
   d53b4:	4b16      	ldr	r3, [pc, #88]	; (d5410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d53b6:	681a      	ldr	r2, [r3, #0]
   d53b8:	07d1      	lsls	r1, r2, #31
   d53ba:	bf5c      	itt	pl
   d53bc:	2201      	movpl	r2, #1
   d53be:	601a      	strpl	r2, [r3, #0]
   d53c0:	4b14      	ldr	r3, [pc, #80]	; (d5414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d53c2:	681a      	ldr	r2, [r3, #0]
   d53c4:	07d2      	lsls	r2, r2, #31
   d53c6:	bf5c      	itt	pl
   d53c8:	2201      	movpl	r2, #1
   d53ca:	601a      	strpl	r2, [r3, #0]
   d53cc:	4b12      	ldr	r3, [pc, #72]	; (d5418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d53ce:	681a      	ldr	r2, [r3, #0]
   d53d0:	07d0      	lsls	r0, r2, #31
   d53d2:	bf5c      	itt	pl
   d53d4:	2201      	movpl	r2, #1
   d53d6:	601a      	strpl	r2, [r3, #0]
   d53d8:	4b10      	ldr	r3, [pc, #64]	; (d541c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d53da:	681a      	ldr	r2, [r3, #0]
   d53dc:	07d1      	lsls	r1, r2, #31
   d53de:	bf5c      	itt	pl
   d53e0:	2201      	movpl	r2, #1
   d53e2:	601a      	strpl	r2, [r3, #0]
   d53e4:	4b0e      	ldr	r3, [pc, #56]	; (d5420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d53e6:	681a      	ldr	r2, [r3, #0]
   d53e8:	07d2      	lsls	r2, r2, #31
   d53ea:	bf5c      	itt	pl
   d53ec:	2201      	movpl	r2, #1
   d53ee:	601a      	strpl	r2, [r3, #0]
   d53f0:	4770      	bx	lr
   d53f2:	bf00      	nop
   d53f4:	2003e79c 	.word	0x2003e79c
   d53f8:	2003e798 	.word	0x2003e798
   d53fc:	2003e794 	.word	0x2003e794
   d5400:	2003e790 	.word	0x2003e790
   d5404:	2003e78c 	.word	0x2003e78c
   d5408:	2003e788 	.word	0x2003e788
   d540c:	2003e784 	.word	0x2003e784
   d5410:	2003e780 	.word	0x2003e780
   d5414:	2003e77c 	.word	0x2003e77c
   d5418:	2003e778 	.word	0x2003e778
   d541c:	2003e774 	.word	0x2003e774
   d5420:	2003e770 	.word	0x2003e770

000d5424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5424:	4b24      	ldr	r3, [pc, #144]	; (d54b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5426:	681a      	ldr	r2, [r3, #0]
   d5428:	07d0      	lsls	r0, r2, #31
   d542a:	bf5c      	itt	pl
   d542c:	2201      	movpl	r2, #1
   d542e:	601a      	strpl	r2, [r3, #0]
   d5430:	4b22      	ldr	r3, [pc, #136]	; (d54bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5432:	681a      	ldr	r2, [r3, #0]
   d5434:	07d1      	lsls	r1, r2, #31
   d5436:	bf5c      	itt	pl
   d5438:	2201      	movpl	r2, #1
   d543a:	601a      	strpl	r2, [r3, #0]
   d543c:	4b20      	ldr	r3, [pc, #128]	; (d54c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d543e:	681a      	ldr	r2, [r3, #0]
   d5440:	07d2      	lsls	r2, r2, #31
   d5442:	bf5c      	itt	pl
   d5444:	2201      	movpl	r2, #1
   d5446:	601a      	strpl	r2, [r3, #0]
   d5448:	4b1e      	ldr	r3, [pc, #120]	; (d54c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d544a:	681a      	ldr	r2, [r3, #0]
   d544c:	07d0      	lsls	r0, r2, #31
   d544e:	bf5c      	itt	pl
   d5450:	2201      	movpl	r2, #1
   d5452:	601a      	strpl	r2, [r3, #0]
   d5454:	4b1c      	ldr	r3, [pc, #112]	; (d54c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5456:	681a      	ldr	r2, [r3, #0]
   d5458:	07d1      	lsls	r1, r2, #31
   d545a:	bf5c      	itt	pl
   d545c:	2201      	movpl	r2, #1
   d545e:	601a      	strpl	r2, [r3, #0]
   d5460:	4b1a      	ldr	r3, [pc, #104]	; (d54cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5462:	681a      	ldr	r2, [r3, #0]
   d5464:	07d2      	lsls	r2, r2, #31
   d5466:	bf5c      	itt	pl
   d5468:	2201      	movpl	r2, #1
   d546a:	601a      	strpl	r2, [r3, #0]
   d546c:	4b18      	ldr	r3, [pc, #96]	; (d54d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d546e:	681a      	ldr	r2, [r3, #0]
   d5470:	07d0      	lsls	r0, r2, #31
   d5472:	bf5c      	itt	pl
   d5474:	2201      	movpl	r2, #1
   d5476:	601a      	strpl	r2, [r3, #0]
   d5478:	4b16      	ldr	r3, [pc, #88]	; (d54d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d547a:	681a      	ldr	r2, [r3, #0]
   d547c:	07d1      	lsls	r1, r2, #31
   d547e:	bf5c      	itt	pl
   d5480:	2201      	movpl	r2, #1
   d5482:	601a      	strpl	r2, [r3, #0]
   d5484:	4b14      	ldr	r3, [pc, #80]	; (d54d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5486:	681a      	ldr	r2, [r3, #0]
   d5488:	07d2      	lsls	r2, r2, #31
   d548a:	bf5c      	itt	pl
   d548c:	2201      	movpl	r2, #1
   d548e:	601a      	strpl	r2, [r3, #0]
   d5490:	4b12      	ldr	r3, [pc, #72]	; (d54dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5492:	681a      	ldr	r2, [r3, #0]
   d5494:	07d0      	lsls	r0, r2, #31
   d5496:	bf5c      	itt	pl
   d5498:	2201      	movpl	r2, #1
   d549a:	601a      	strpl	r2, [r3, #0]
   d549c:	4b10      	ldr	r3, [pc, #64]	; (d54e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d549e:	681a      	ldr	r2, [r3, #0]
   d54a0:	07d1      	lsls	r1, r2, #31
   d54a2:	bf5c      	itt	pl
   d54a4:	2201      	movpl	r2, #1
   d54a6:	601a      	strpl	r2, [r3, #0]
   d54a8:	4b0e      	ldr	r3, [pc, #56]	; (d54e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d54aa:	681a      	ldr	r2, [r3, #0]
   d54ac:	07d2      	lsls	r2, r2, #31
   d54ae:	bf5c      	itt	pl
   d54b0:	2201      	movpl	r2, #1
   d54b2:	601a      	strpl	r2, [r3, #0]
   d54b4:	4770      	bx	lr
   d54b6:	bf00      	nop
   d54b8:	2003e7cc 	.word	0x2003e7cc
   d54bc:	2003e7c8 	.word	0x2003e7c8
   d54c0:	2003e7c4 	.word	0x2003e7c4
   d54c4:	2003e7c0 	.word	0x2003e7c0
   d54c8:	2003e7bc 	.word	0x2003e7bc
   d54cc:	2003e7b8 	.word	0x2003e7b8
   d54d0:	2003e7b4 	.word	0x2003e7b4
   d54d4:	2003e7b0 	.word	0x2003e7b0
   d54d8:	2003e7ac 	.word	0x2003e7ac
   d54dc:	2003e7a8 	.word	0x2003e7a8
   d54e0:	2003e7a4 	.word	0x2003e7a4
   d54e4:	2003e7a0 	.word	0x2003e7a0

000d54e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d54e8:	4b18      	ldr	r3, [pc, #96]	; (d554c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d54ea:	681a      	ldr	r2, [r3, #0]
   d54ec:	07d1      	lsls	r1, r2, #31
   d54ee:	bf5c      	itt	pl
   d54f0:	2201      	movpl	r2, #1
   d54f2:	601a      	strpl	r2, [r3, #0]
   d54f4:	4b16      	ldr	r3, [pc, #88]	; (d5550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d54f6:	681a      	ldr	r2, [r3, #0]
   d54f8:	07d2      	lsls	r2, r2, #31
   d54fa:	bf5c      	itt	pl
   d54fc:	2201      	movpl	r2, #1
   d54fe:	601a      	strpl	r2, [r3, #0]
   d5500:	4b14      	ldr	r3, [pc, #80]	; (d5554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5502:	681a      	ldr	r2, [r3, #0]
   d5504:	07d0      	lsls	r0, r2, #31
   d5506:	bf5c      	itt	pl
   d5508:	2201      	movpl	r2, #1
   d550a:	601a      	strpl	r2, [r3, #0]
   d550c:	4b12      	ldr	r3, [pc, #72]	; (d5558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d550e:	681a      	ldr	r2, [r3, #0]
   d5510:	07d1      	lsls	r1, r2, #31
   d5512:	bf5c      	itt	pl
   d5514:	2201      	movpl	r2, #1
   d5516:	601a      	strpl	r2, [r3, #0]
   d5518:	4b10      	ldr	r3, [pc, #64]	; (d555c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d551a:	681a      	ldr	r2, [r3, #0]
   d551c:	07d2      	lsls	r2, r2, #31
   d551e:	bf5c      	itt	pl
   d5520:	2201      	movpl	r2, #1
   d5522:	601a      	strpl	r2, [r3, #0]
   d5524:	4b0e      	ldr	r3, [pc, #56]	; (d5560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5526:	681a      	ldr	r2, [r3, #0]
   d5528:	07d0      	lsls	r0, r2, #31
   d552a:	bf5c      	itt	pl
   d552c:	2201      	movpl	r2, #1
   d552e:	601a      	strpl	r2, [r3, #0]
   d5530:	4b0c      	ldr	r3, [pc, #48]	; (d5564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5532:	681a      	ldr	r2, [r3, #0]
   d5534:	07d1      	lsls	r1, r2, #31
   d5536:	bf5c      	itt	pl
   d5538:	2201      	movpl	r2, #1
   d553a:	601a      	strpl	r2, [r3, #0]
   d553c:	4b0a      	ldr	r3, [pc, #40]	; (d5568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d553e:	681a      	ldr	r2, [r3, #0]
   d5540:	07d2      	lsls	r2, r2, #31
   d5542:	bf5c      	itt	pl
   d5544:	2201      	movpl	r2, #1
   d5546:	601a      	strpl	r2, [r3, #0]
   d5548:	4770      	bx	lr
   d554a:	bf00      	nop
   d554c:	2003e7ec 	.word	0x2003e7ec
   d5550:	2003e7e8 	.word	0x2003e7e8
   d5554:	2003e7e4 	.word	0x2003e7e4
   d5558:	2003e7e0 	.word	0x2003e7e0
   d555c:	2003e7dc 	.word	0x2003e7dc
   d5560:	2003e7d8 	.word	0x2003e7d8
   d5564:	2003e7d4 	.word	0x2003e7d4
   d5568:	2003e7d0 	.word	0x2003e7d0

000d556c <__cxa_atexit>:
   d556c:	b510      	push	{r4, lr}
   d556e:	4c05      	ldr	r4, [pc, #20]	; (d5584 <__cxa_atexit+0x18>)
   d5570:	4613      	mov	r3, r2
   d5572:	b12c      	cbz	r4, d5580 <__cxa_atexit+0x14>
   d5574:	460a      	mov	r2, r1
   d5576:	4601      	mov	r1, r0
   d5578:	2002      	movs	r0, #2
   d557a:	f3af 8000 	nop.w
   d557e:	bd10      	pop	{r4, pc}
   d5580:	4620      	mov	r0, r4
   d5582:	bd10      	pop	{r4, pc}
   d5584:	00000000 	.word	0x00000000

000d5588 <memcpy>:
   d5588:	b510      	push	{r4, lr}
   d558a:	1e43      	subs	r3, r0, #1
   d558c:	440a      	add	r2, r1
   d558e:	4291      	cmp	r1, r2
   d5590:	d004      	beq.n	d559c <memcpy+0x14>
   d5592:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5596:	f803 4f01 	strb.w	r4, [r3, #1]!
   d559a:	e7f8      	b.n	d558e <memcpy+0x6>
   d559c:	bd10      	pop	{r4, pc}

000d559e <memset>:
   d559e:	4402      	add	r2, r0
   d55a0:	4603      	mov	r3, r0
   d55a2:	4293      	cmp	r3, r2
   d55a4:	d002      	beq.n	d55ac <memset+0xe>
   d55a6:	f803 1b01 	strb.w	r1, [r3], #1
   d55aa:	e7fa      	b.n	d55a2 <memset+0x4>
   d55ac:	4770      	bx	lr
	...

000d55b0 <srand>:
   d55b0:	b538      	push	{r3, r4, r5, lr}
   d55b2:	4b12      	ldr	r3, [pc, #72]	; (d55fc <srand+0x4c>)
   d55b4:	681c      	ldr	r4, [r3, #0]
   d55b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d55b8:	4605      	mov	r5, r0
   d55ba:	b9d3      	cbnz	r3, d55f2 <srand+0x42>
   d55bc:	2018      	movs	r0, #24
   d55be:	f7ff f893 	bl	d46e8 <malloc>
   d55c2:	f243 330e 	movw	r3, #13070	; 0x330e
   d55c6:	63a0      	str	r0, [r4, #56]	; 0x38
   d55c8:	8003      	strh	r3, [r0, #0]
   d55ca:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d55ce:	8043      	strh	r3, [r0, #2]
   d55d0:	f241 2334 	movw	r3, #4660	; 0x1234
   d55d4:	8083      	strh	r3, [r0, #4]
   d55d6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d55da:	80c3      	strh	r3, [r0, #6]
   d55dc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d55e0:	8103      	strh	r3, [r0, #8]
   d55e2:	2305      	movs	r3, #5
   d55e4:	8143      	strh	r3, [r0, #10]
   d55e6:	230b      	movs	r3, #11
   d55e8:	8183      	strh	r3, [r0, #12]
   d55ea:	2201      	movs	r2, #1
   d55ec:	2300      	movs	r3, #0
   d55ee:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d55f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d55f4:	2200      	movs	r2, #0
   d55f6:	611d      	str	r5, [r3, #16]
   d55f8:	615a      	str	r2, [r3, #20]
   d55fa:	bd38      	pop	{r3, r4, r5, pc}
   d55fc:	2003dca8 	.word	0x2003dca8

000d5600 <strcpy>:
   d5600:	4603      	mov	r3, r0
   d5602:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5606:	f803 2b01 	strb.w	r2, [r3], #1
   d560a:	2a00      	cmp	r2, #0
   d560c:	d1f9      	bne.n	d5602 <strcpy+0x2>
   d560e:	4770      	bx	lr

000d5610 <strlen>:
   d5610:	4603      	mov	r3, r0
   d5612:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5616:	2a00      	cmp	r2, #0
   d5618:	d1fb      	bne.n	d5612 <strlen+0x2>
   d561a:	1a18      	subs	r0, r3, r0
   d561c:	3801      	subs	r0, #1
   d561e:	4770      	bx	lr

000d5620 <dynalib_user>:
   d5620:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5630:	0000 0000 6353 6e61 4120 6772 6e6f 6620     ....Scan Argon f
   d5640:	726f 5320 7661 6465 4320 6572 6564 746e     or Saved Credent
   d5650:	6169 736c 0a20 6900 2070 6461 7264 7365     ials ..ip addres
   d5660:	3a73 2520 2073 000a 7243 6465 6e65 6974     s: %s ..Credenti
   d5670:	6c61 2073 6f66 2072 6425 4120 6363 7365     als for %d Acces
   d5680:	2073 6f50 6e69 7374 4620 756f 646e 0a20     s Points Found .
   d5690:	4100 2550 2064 202d 7373 6469 203a 7325     .AP%d - ssid: %s
   d56a0:	0a20 4100 2550 2064 202d 616d 3a63 2520      ..AP%d - mac: %
   d56b0:	3230 3a58 3025 5832 253a 3230 3a58 3025     02X:%02X:%02X:%0
   d56c0:	5832 253a 3230 3a58 3025 5832 0a20 4100     2X:%02X:%02X ..A
   d56d0:	2550 2064 202d 6573 7563 6972 7974 203a     P%d - security: 
   d56e0:	6425 2820 6573 7563 6972 7974 2520 2973     %d (security %s)
   d56f0:	0a20 4100 2550 2064 202d 6963 6870 7265      ..AP%d - cipher
   d5700:	203a 2020 6425 2820 6963 6870 7265 2520     :   %d (cipher %
   d5710:	2973 0a20 000a 200a 570a 6669 2069 6353     s) .... .Wifi Sc
   d5720:	6e61 6f20 2066 7661 6961 616c 6c62 2065     an of available 
   d5730:	656e 7774 726f 736b 0a20 7300 6973 3d64     networks ..ssid=
   d5740:	7325 7320 6365 7275 7469 3d79 6425 6320     %s security=%d c
   d5750:	7069 6568 3d72 6425 202c 6863 6e61 656e     ipher=%d, channe
   d5760:	3d6c 6425 7220 7373 3d69 6425 0a20 5700     l=%d rssi=%d ..W
   d5770:	414c 5f4e 4553 5f43 4e55 4553 0043 4c57     LAN_SEC_UNSEC.WL
   d5780:	4e41 535f 4345 575f 5045 5700 414c 5f4e     AN_SEC_WEP.WLAN_
   d5790:	4553 5f43 5057 0041 4c57 4e41 535f 4345     SEC_WPA.WLAN_SEC
   d57a0:	575f 4150 0032 4c57 4e41 535f 4345 575f     _WPA2.WLAN_SEC_W
   d57b0:	4150 455f 544e 5245 5250 5349 0045 4c57     PA_ENTERPRISE.WL
   d57c0:	4e41 535f 4345 575f 4150 5f32 4e45 4554     AN_SEC_WPA2_ENTE
   d57d0:	5052 4952 4553 4e00 412f 5700 414c 5f4e     RPRISE.N/A.WLAN_
   d57e0:	4943 4850 5245 415f 5345 5700 414c 5f4e     CIPHER_AES.WLAN_
   d57f0:	4943 4850 5245 545f 494b 0050 4c57 4e41     CIPHER_TKIP.WLAN
   d5800:	435f 5049 4548 5f52 4541 5f53 4b54 5049     _CIPHER_AES_TKIP
   d5810:	0000 0000                                   ....

000d5814 <_ZTVN5spark13EthernetClassE>:
	...
   d581c:	4787 000d 477d 000d 4773 000d 4769 000d     .G..}G..sG..iG..
   d582c:	475d 000d 4751 000d 4745 000d 473d 000d     ]G..QG..EG..=G..
   d583c:	4733 000d 4729 000d 51ed 000d               3G..)G...Q..

000d5848 <_ZTV21StringPrintableHelper>:
	...
   d5850:	47f9 000d 47fb 000d 4919 000d 48eb 000d     .G...G...I...H..
   d5860:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d5870:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d5880:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   d5890:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   d58a0:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   d58b0:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   d58c0:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   d58d0:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   d58e0:	2500 0064 202c 2800 3a29 0020 5b20 6300     .%d., .(): . [.c
   d58f0:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
   d5900:	2073 203d 0d00 000a 0066 6e6c 6600 006e     s = ....f.ln.fn.
   d5910:	6f63 6564 6400 7465 6961 006c 6f6e 656e     code.detail.none
   d5920:	7400 6172 6563 6900 666e 006f 6177 6e72     .trace.info.warn
   d5930:	6500 7272 726f 7000 6e61 6369 6100 6c6c     .error.panic.all
   d5940:	5a00 2500 302b 6433 253a 3230 0075 5925     .Z.%+03d:%02u.%Y
   d5950:	252d 2d6d 6425 2554 3a48 4d25 253a 2553     -%m-%dT%H:%M:%S%
   d5960:	007a 7361 7463 6d69 0065 0000               z.asctime...

000d596c <_ZTV9IPAddress>:
	...
   d5974:	4c35 000d 4c25 000d 4c27 000d               5L..%L..'L..

000d5980 <_ZTV9USBSerial>:
	...
   d5988:	4d0d 000d 4d5d 000d 4d6b 000d 4991 000d     .M..]M..kM...I..
   d5998:	4d49 000d 4d0f 000d 4d25 000d 4d57 000d     IM...M..%M..WM..
   d59a8:	4d3b 000d 4d09 000d                         ;M...M..

000d59b0 <_ZTV11USARTSerial>:
	...
   d59b8:	4e19 000d 4e69 000d 4e77 000d 4991 000d     .N..iN..wN...I..
   d59c8:	4e2d 000d 4e4f 000d 4e3b 000d 4e63 000d     -N..ON..;N..cN..
   d59d8:	4e1b 000d 4e1f 000d                         .N...N..

000d59e0 <_ZTVN5spark9MeshClassE>:
	...
   d59e8:	4f73 000d 4f69 000d 4f5f 000d 4f55 000d     sO..iO.._O..UO..
   d59f8:	4f49 000d 4f3d 000d 4f31 000d 4f29 000d     IO..=O..1O..)O..
   d5a08:	4f1f 000d 4f15 000d 51ed 000d               .O...O...Q..

000d5a14 <_ZTVN5spark9WiFiClassE>:
	...
   d5a1c:	511d 000d 5113 000d 5109 000d 50bf 000d     .Q...Q...Q...P..
   d5a2c:	50fd 000d 50f1 000d 50e5 000d 50dd 000d     .P...P...P...P..
   d5a3c:	50d3 000d 50c9 000d 51ed 000d               .P...P...Q..

000d5a48 <_ZTVN5spark12NetworkClassE>:
	...
   d5a50:	5185 000d 518f 000d 5199 000d 51a3 000d     .Q...Q...Q...Q..
   d5a60:	51ad 000d 51b9 000d 51c5 000d 51d1 000d     .Q...Q...Q...Q..
   d5a70:	51d9 000d 51e3 000d 51ed 000d               .Q...Q...Q..

000d5a7c <__sf_fake_stdin>:
	...

000d5a9c <__sf_fake_stdout>:
	...

000d5abc <__sf_fake_stderr>:
	...

000d5adc <link_const_variable_data_end>:
   d5adc:	000d4329 	.word	0x000d4329
   d5ae0:	000d4791 	.word	0x000d4791
   d5ae4:	000d47c5 	.word	0x000d47c5
   d5ae8:	000d4969 	.word	0x000d4969
   d5aec:	000d4ab1 	.word	0x000d4ab1
   d5af0:	000d4ac1 	.word	0x000d4ac1
   d5af4:	000d4af9 	.word	0x000d4af9
   d5af8:	000d5041 	.word	0x000d5041
   d5afc:	000d5171 	.word	0x000d5171
   d5b00:	000d52b9 	.word	0x000d52b9
   d5b04:	000d52dd 	.word	0x000d52dd
   d5b08:	000d5361 	.word	0x000d5361
   d5b0c:	000d5425 	.word	0x000d5425
   d5b10:	000d54e9 	.word	0x000d54e9

000d5b14 <link_constructors_end>:
	...
