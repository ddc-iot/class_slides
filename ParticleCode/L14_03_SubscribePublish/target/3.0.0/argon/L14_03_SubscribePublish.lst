
c:/Users/IoTPa/Documents/IoT/class_slides/ParticleCode/L14_03_SubscribePublish/target/3.0.0/argon/L14_03_SubscribePublish.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005090  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d90b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000001d8  2003e33c  000d90b4  0001e33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002dc  2003e514  2003e514  0002e514  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d928c  000d928c  0002928c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d92b4  000d92b4  000292b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00156278  00000000  00000000  000292b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000147c5  00000000  00000000  0017f530  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000314a7  00000000  00000000  00193cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002728  00000000  00000000  001c519c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008af8  00000000  00000000  001c78c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036021  00000000  00000000  001d03bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00037659  00000000  00000000  002063dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00124964  00000000  00000000  0023da36  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000076b8  00000000  00000000  0036239c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f002 fccb 	bl	d69cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f002 fced 	bl	d6a1c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e33c 	.word	0x2003e33c
   d404c:	000d90b4 	.word	0x000d90b4
   d4050:	2003e514 	.word	0x2003e514
   d4054:	2003e514 	.word	0x2003e514
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f001 f91b 	bl	d529c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d908c 	.word	0x000d908c
   d4080:	000d90b0 	.word	0x000d90b0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b85a 	b.w	d413c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8df 	bl	d424c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f001 b8c5 	b.w	d5220 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f000 bf15 	b.w	d4ec4 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bf1b 	b.w	d4ed4 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f000 fe68 	bl	d4d7c <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d4bad 	.word	0x000d4bad

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN19Adafruit_MQTT_SPARKD1Ev>:


// MQTT client implementation for a generic Arduino Client interface.  Can work
// with almost all Arduino network hardware like ethernet shield, wifi shield,
// and even other platforms like ESP8266.
class Adafruit_MQTT_SPARK : public Adafruit_MQTT {
   d40c4:	4770      	bx	lr
	...

000d40c8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40c8:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40ca:	6984      	ldr	r4, [r0, #24]
   d40cc:	4b0a      	ldr	r3, [pc, #40]	; (d40f8 <_ZN9TCPClientD1Ev+0x30>)
   d40ce:	6003      	str	r3, [r0, #0]
   d40d0:	4605      	mov	r5, r0
   d40d2:	b17c      	cbz	r4, d40f4 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d40d4:	6863      	ldr	r3, [r4, #4]
   d40d6:	3b01      	subs	r3, #1
   d40d8:	6063      	str	r3, [r4, #4]
   d40da:	b95b      	cbnz	r3, d40f4 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d40dc:	6823      	ldr	r3, [r4, #0]
   d40de:	4620      	mov	r0, r4
   d40e0:	689b      	ldr	r3, [r3, #8]
   d40e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40e4:	68a3      	ldr	r3, [r4, #8]
   d40e6:	3b01      	subs	r3, #1
   d40e8:	60a3      	str	r3, [r4, #8]
   d40ea:	b91b      	cbnz	r3, d40f4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40ec:	6823      	ldr	r3, [r4, #0]
   d40ee:	4620      	mov	r0, r4
   d40f0:	68db      	ldr	r3, [r3, #12]
   d40f2:	4798      	blx	r3
   d40f4:	4628      	mov	r0, r5
   d40f6:	bd38      	pop	{r3, r4, r5, pc}
   d40f8:	000d8c6c 	.word	0x000d8c6c

000d40fc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40fc:	b510      	push	{r4, lr}
   d40fe:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4100:	6800      	ldr	r0, [r0, #0]
   d4102:	b108      	cbz	r0, d4108 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4104:	f000 fee6 	bl	d4ed4 <free>
class SystemClass {
   d4108:	4620      	mov	r0, r4
   d410a:	bd10      	pop	{r4, pc}

000d410c <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d410c:	b40e      	push	{r1, r2, r3}
   d410e:	b503      	push	{r0, r1, lr}
   d4110:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4112:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4114:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4118:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d411a:	f000 fffe 	bl	d511a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d411e:	b002      	add	sp, #8
   d4120:	f85d eb04 	ldr.w	lr, [sp], #4
   d4124:	b003      	add	sp, #12
   d4126:	4770      	bx	lr

000d4128 <_ZN9TCPClientD0Ev>:
   d4128:	b510      	push	{r4, lr}
   d412a:	4604      	mov	r4, r0
   d412c:	f7ff ffcc 	bl	d40c8 <_ZN9TCPClientD1Ev>
   d4130:	4620      	mov	r0, r4
   d4132:	211c      	movs	r1, #28
   d4134:	f001 fe3f 	bl	d5db6 <_ZdlPvj>
   d4138:	4620      	mov	r0, r4
   d413a:	bd10      	pop	{r4, pc}

000d413c <setup>:
unsigned long last, lastTime;
float value1, value2;

SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   d413c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Serial.begin(9600);
   d4140:	f001 f9cc 	bl	d54dc <_Z16_fetch_usbserialv>
   d4144:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4148:	f001 f9b8 	bl	d54bc <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d414c:	2000      	movs	r0, #0
   d414e:	f000 fd3d 	bl	d4bcc <hal_timer_millis>
   d4152:	f04f 0900 	mov.w	r9, #0
   d4156:	4680      	mov	r8, r0
        while (_while() && !_condition()) {
   d4158:	f643 2697 	movw	r6, #14999	; 0x3a97
   d415c:	2700      	movs	r7, #0
        return hal_timer_millis(nullptr);
   d415e:	2000      	movs	r0, #0
   d4160:	f000 fd34 	bl	d4bcc <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4164:	ebb0 0408 	subs.w	r4, r0, r8
   d4168:	eb61 0509 	sbc.w	r5, r1, r9
        while (_while() && !_condition()) {
   d416c:	42af      	cmp	r7, r5
   d416e:	bf08      	it	eq
   d4170:	42a6      	cmpeq	r6, r4
   d4172:	d307      	bcc.n	d4184 <setup+0x48>
  waitFor(Serial.isConnected, 15000); //wait for Serial Monitor to startup
   d4174:	f001 f9b2 	bl	d54dc <_Z16_fetch_usbserialv>
   d4178:	f001 f9a4 	bl	d54c4 <_ZN9USBSerial11isConnectedEv>
   d417c:	b910      	cbnz	r0, d4184 <setup+0x48>
            spark_process();
   d417e:	f000 fe91 	bl	d4ea4 <spark_process>
        while (_while() && !_condition()) {
   d4182:	e7ec      	b.n	d415e <setup+0x22>
   d4184:	f001 f9aa 	bl	d54dc <_Z16_fetch_usbserialv>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4188:	4c0d      	ldr	r4, [pc, #52]	; (d41c0 <setup+0x84>)

  //Connect to WiFi without going to Particle Cloud
  WiFi.connect();
  while(WiFi.connecting()) {
    Serial.printf(".");
   d418a:	4d0e      	ldr	r5, [pc, #56]	; (d41c4 <setup+0x88>)
  waitFor(Serial.isConnected, 15000); //wait for Serial Monitor to startup
   d418c:	f001 f99a 	bl	d54c4 <_ZN9USBSerial11isConnectedEv>
   d4190:	2300      	movs	r3, #0
   d4192:	6860      	ldr	r0, [r4, #4]
   d4194:	461a      	mov	r2, r3
   d4196:	4619      	mov	r1, r3
   d4198:	f000 fe24 	bl	d4de4 <network_connect>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d419c:	2200      	movs	r2, #0
   d419e:	6860      	ldr	r0, [r4, #4]
   d41a0:	4611      	mov	r1, r2
   d41a2:	f000 fe27 	bl	d4df4 <network_connecting>
  while(WiFi.connecting()) {
   d41a6:	b128      	cbz	r0, d41b4 <setup+0x78>
    Serial.printf(".");
   d41a8:	f001 f998 	bl	d54dc <_Z16_fetch_usbserialv>
   d41ac:	4629      	mov	r1, r5
   d41ae:	f7ff ffad 	bl	d410c <_ZN5Print6printfEPKcz>
  while(WiFi.connecting()) {
   d41b2:	e7f3      	b.n	d419c <setup+0x60>
  }

  // Setup MQTT subscription for onoff feed.
  mqtt.subscribe(&mqttObj2);
}
   d41b4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  mqtt.subscribe(&mqttObj2);
   d41b8:	4903      	ldr	r1, [pc, #12]	; (d41c8 <setup+0x8c>)
   d41ba:	4804      	ldr	r0, [pc, #16]	; (d41cc <setup+0x90>)
   d41bc:	f000 ba8e 	b.w	d46dc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>
   d41c0:	2003e7dc 	.word	0x2003e7dc
   d41c4:	000d8aa3 	.word	0x000d8aa3
   d41c8:	2003e628 	.word	0x2003e628
   d41cc:	2003e548 	.word	0x2003e548

000d41d0 <_Z12MQTT_connectv>:
    }
  }
}

// Function to connect and reconnect as necessary to the MQTT server.
void MQTT_connect() {
   d41d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int8_t ret;
 
  // Stop if already connected.
  if (mqtt.connected()) {
   d41d4:	4818      	ldr	r0, [pc, #96]	; (d4238 <_Z12MQTT_connectv+0x68>)
   d41d6:	f000 f927 	bl	d4428 <_ZN19Adafruit_MQTT_SPARK9connectedEv>
   d41da:	bb58      	cbnz	r0, d4234 <_Z12MQTT_connectv+0x64>
    return;
  }
 
  Serial.print("Connecting to MQTT... ");
   d41dc:	f001 f97e 	bl	d54dc <_Z16_fetch_usbserialv>
   d41e0:	4916      	ldr	r1, [pc, #88]	; (d423c <_Z12MQTT_connectv+0x6c>)
 
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d41e2:	4e15      	ldr	r6, [pc, #84]	; (d4238 <_Z12MQTT_connectv+0x68>)
       Serial.printf("%s\n",(char *)mqtt.connectErrorString(ret));
   d41e4:	f8df 8060 	ldr.w	r8, [pc, #96]	; d4248 <_Z12MQTT_connectv+0x78>
       Serial.printf("Retrying MQTT connection in 5 seconds..\n");
   d41e8:	4f15      	ldr	r7, [pc, #84]	; (d4240 <_Z12MQTT_connectv+0x70>)
  Serial.print("Connecting to MQTT... ");
   d41ea:	f000 ff5b 	bl	d50a4 <_ZN5Print5printEPKc>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d41ee:	4812      	ldr	r0, [pc, #72]	; (d4238 <_Z12MQTT_connectv+0x68>)
   d41f0:	f000 fc35 	bl	d4a5e <_ZN13Adafruit_MQTT7connectEv>
   d41f4:	4604      	mov	r4, r0
   d41f6:	b1c0      	cbz	r0, d422a <_Z12MQTT_connectv+0x5a>
       Serial.printf("%s\n",(char *)mqtt.connectErrorString(ret));
   d41f8:	f001 f970 	bl	d54dc <_Z16_fetch_usbserialv>
   d41fc:	4621      	mov	r1, r4
   d41fe:	4605      	mov	r5, r0
   d4200:	4630      	mov	r0, r6
   d4202:	f000 fa49 	bl	d4698 <_ZN13Adafruit_MQTT18connectErrorStringEa>
   d4206:	4641      	mov	r1, r8
   d4208:	4602      	mov	r2, r0
   d420a:	4628      	mov	r0, r5
   d420c:	f7ff ff7e 	bl	d410c <_ZN5Print6printfEPKcz>
       Serial.printf("Retrying MQTT connection in 5 seconds..\n");
   d4210:	f001 f964 	bl	d54dc <_Z16_fetch_usbserialv>
   d4214:	4639      	mov	r1, r7
   d4216:	f7ff ff79 	bl	d410c <_ZN5Print6printfEPKcz>
       mqtt.disconnect();
   d421a:	4630      	mov	r0, r6
   d421c:	f000 fa4a 	bl	d46b4 <_ZN13Adafruit_MQTT10disconnectEv>
       delay(5000);  // wait 5 seconds
   d4220:	f241 3088 	movw	r0, #5000	; 0x1388
   d4224:	f000 ffc2 	bl	d51ac <delay>
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
   d4228:	e7e1      	b.n	d41ee <_Z12MQTT_connectv+0x1e>
  }
  Serial.printf("MQTT Connected!\n");
   d422a:	f001 f957 	bl	d54dc <_Z16_fetch_usbserialv>
   d422e:	4905      	ldr	r1, [pc, #20]	; (d4244 <_Z12MQTT_connectv+0x74>)
   d4230:	f7ff ff6c 	bl	d410c <_ZN5Print6printfEPKcz>
   d4234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4238:	2003e548 	.word	0x2003e548
   d423c:	000d87f0 	.word	0x000d87f0
   d4240:	000d880b 	.word	0x000d880b
   d4244:	000d8834 	.word	0x000d8834
   d4248:	000d8807 	.word	0x000d8807

000d424c <loop>:
void loop() {
   d424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((millis()-last)>120000) {
   d424e:	4c38      	ldr	r4, [pc, #224]	; (d4330 <loop+0xe4>)
  MQTT_connect();
   d4250:	f7ff ffbe 	bl	d41d0 <_Z12MQTT_connectv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4254:	f000 fcb2 	bl	d4bbc <HAL_Timer_Get_Milli_Seconds>
  if ((millis()-last)>120000) {
   d4258:	6822      	ldr	r2, [r4, #0]
   d425a:	1a80      	subs	r0, r0, r2
   d425c:	4a35      	ldr	r2, [pc, #212]	; (d4334 <loop+0xe8>)
   d425e:	4290      	cmp	r0, r2
   d4260:	d914      	bls.n	d428c <loop+0x40>
      Serial.printf("Pinging MQTT \n");
   d4262:	f001 f93b 	bl	d54dc <_Z16_fetch_usbserialv>
   d4266:	4934      	ldr	r1, [pc, #208]	; (d4338 <loop+0xec>)
   d4268:	f7ff ff50 	bl	d410c <_ZN5Print6printfEPKcz>
      if(! mqtt.ping()) {
   d426c:	4833      	ldr	r0, [pc, #204]	; (d433c <loop+0xf0>)
   d426e:	2101      	movs	r1, #1
   d4270:	f000 fac6 	bl	d4800 <_ZN13Adafruit_MQTT4pingEh>
   d4274:	b938      	cbnz	r0, d4286 <loop+0x3a>
        Serial.printf("Disconnecting \n");
   d4276:	f001 f931 	bl	d54dc <_Z16_fetch_usbserialv>
   d427a:	4931      	ldr	r1, [pc, #196]	; (d4340 <loop+0xf4>)
   d427c:	f7ff ff46 	bl	d410c <_ZN5Print6printfEPKcz>
        mqtt.disconnect();
   d4280:	482e      	ldr	r0, [pc, #184]	; (d433c <loop+0xf0>)
   d4282:	f000 fa17 	bl	d46b4 <_ZN13Adafruit_MQTT10disconnectEv>
   d4286:	f000 fc99 	bl	d4bbc <HAL_Timer_Get_Milli_Seconds>
      last = millis();
   d428a:	6020      	str	r0, [r4, #0]
  value1 = random(0,100);
   d428c:	2164      	movs	r1, #100	; 0x64
   d428e:	2000      	movs	r0, #0
   d4290:	f001 f9d7 	bl	d5642 <_Z6randomii>
   d4294:	ee07 0a90 	vmov	s15, r0
   d4298:	4e2a      	ldr	r6, [pc, #168]	; (d4344 <loop+0xf8>)
  if((millis()-lastTime > 30000)) {
   d429a:	4d2b      	ldr	r5, [pc, #172]	; (d4348 <loop+0xfc>)
  value1 = random(0,100);
   d429c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d42a0:	edc6 7a00 	vstr	s15, [r6]
   d42a4:	f000 fc8a 	bl	d4bbc <HAL_Timer_Get_Milli_Seconds>
  if((millis()-lastTime > 30000)) {
   d42a8:	682a      	ldr	r2, [r5, #0]
   d42aa:	1a80      	subs	r0, r0, r2
   d42ac:	f247 5230 	movw	r2, #30000	; 0x7530
   d42b0:	4290      	cmp	r0, r2
   d42b2:	d91b      	bls.n	d42ec <loop+0xa0>
    if(mqtt.Update()) {
   d42b4:	4821      	ldr	r0, [pc, #132]	; (d433c <loop+0xf0>)
   d42b6:	f000 f935 	bl	d4524 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>
   d42ba:	b1a0      	cbz	r0, d42e6 <loop+0x9a>
      mqttObj1.publish(value1);
   d42bc:	6830      	ldr	r0, [r6, #0]
   d42be:	f001 fff3 	bl	d62a8 <__aeabi_f2d>
   d42c2:	ec41 0b10 	vmov	d0, r0, r1
   d42c6:	2102      	movs	r1, #2
   d42c8:	4820      	ldr	r0, [pc, #128]	; (d434c <loop+0x100>)
   d42ca:	f000 fc25 	bl	d4b18 <_ZN21Adafruit_MQTT_Publish7publishEdh>
      Serial.printf("Publishing %0.2f \n",value1); 
   d42ce:	f001 f905 	bl	d54dc <_Z16_fetch_usbserialv>
   d42d2:	4604      	mov	r4, r0
   d42d4:	6830      	ldr	r0, [r6, #0]
   d42d6:	f001 ffe7 	bl	d62a8 <__aeabi_f2d>
   d42da:	4602      	mov	r2, r0
   d42dc:	460b      	mov	r3, r1
   d42de:	4620      	mov	r0, r4
   d42e0:	491b      	ldr	r1, [pc, #108]	; (d4350 <loop+0x104>)
   d42e2:	f7ff ff13 	bl	d410c <_ZN5Print6printfEPKcz>
   d42e6:	f000 fc69 	bl	d4bbc <HAL_Timer_Get_Milli_Seconds>
    lastTime = millis();
   d42ea:	6028      	str	r0, [r5, #0]
  while ((subscription = mqtt.readSubscription(1000))) {
   d42ec:	4f13      	ldr	r7, [pc, #76]	; (d433c <loop+0xf0>)
    if (subscription == &mqttObj2) {
   d42ee:	4e19      	ldr	r6, [pc, #100]	; (d4354 <loop+0x108>)
  while ((subscription = mqtt.readSubscription(1000))) {
   d42f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d42f4:	4638      	mov	r0, r7
   d42f6:	f000 fa0c 	bl	d4712 <_ZN13Adafruit_MQTT16readSubscriptionEs>
   d42fa:	b1b8      	cbz	r0, d432c <loop+0xe0>
    if (subscription == &mqttObj2) {
   d42fc:	42b0      	cmp	r0, r6
   d42fe:	d1f7      	bne.n	d42f0 <loop+0xa4>
      value2 = atof((char *)mqttObj2.lastread);
   d4300:	1d70      	adds	r0, r6, #5
   d4302:	f002 fb51 	bl	d69a8 <atof>
   d4306:	ec51 0b10 	vmov	r0, r1, d0
   d430a:	f002 fadf 	bl	d68cc <__aeabi_d2f>
   d430e:	4d12      	ldr	r5, [pc, #72]	; (d4358 <loop+0x10c>)
   d4310:	6028      	str	r0, [r5, #0]
          Serial.printf("Received %0.2f from Adafruit.io feed FeedNameB \n",value2);
   d4312:	f001 f8e3 	bl	d54dc <_Z16_fetch_usbserialv>
   d4316:	4604      	mov	r4, r0
   d4318:	6828      	ldr	r0, [r5, #0]
   d431a:	f001 ffc5 	bl	d62a8 <__aeabi_f2d>
   d431e:	4602      	mov	r2, r0
   d4320:	460b      	mov	r3, r1
   d4322:	4620      	mov	r0, r4
   d4324:	490d      	ldr	r1, [pc, #52]	; (d435c <loop+0x110>)
   d4326:	f7ff fef1 	bl	d410c <_ZN5Print6printfEPKcz>
   d432a:	e7e1      	b.n	d42f0 <loop+0xa4>
}
   d432c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d432e:	bf00      	nop
   d4330:	2003e540 	.word	0x2003e540
   d4334:	0001d4c0 	.word	0x0001d4c0
   d4338:	000d8845 	.word	0x000d8845
   d433c:	2003e548 	.word	0x2003e548
   d4340:	000d8854 	.word	0x000d8854
   d4344:	2003e660 	.word	0x2003e660
   d4348:	2003e544 	.word	0x2003e544
   d434c:	2003e61c 	.word	0x2003e61c
   d4350:	000d8864 	.word	0x000d8864
   d4354:	2003e628 	.word	0x2003e628
   d4358:	2003e664 	.word	0x2003e664
   d435c:	000d8877 	.word	0x000d8877

000d4360 <_ZN19Adafruit_MQTT_SPARKD0Ev>:
   d4360:	b510      	push	{r4, lr}
   d4362:	21d4      	movs	r1, #212	; 0xd4
   d4364:	4604      	mov	r4, r0
   d4366:	f001 fd26 	bl	d5db6 <_ZdlPvj>
   d436a:	4620      	mov	r0, r4
   d436c:	bd10      	pop	{r4, pc}
	...

000d4370 <_GLOBAL__sub_I_TheClient>:
   d4370:	b573      	push	{r0, r1, r4, r5, r6, lr}
TCPClient TheClient; 
   d4372:	4e1e      	ldr	r6, [pc, #120]	; (d43ec <_GLOBAL__sub_I_TheClient+0x7c>)
   d4374:	4d1e      	ldr	r5, [pc, #120]	; (d43f0 <_GLOBAL__sub_I_TheClient+0x80>)
  {}

  Adafruit_MQTT_SPARK(TCPClient *client, const char *server, uint16_t port,
                       const char *user="", const char *pass=""):
    Adafruit_MQTT(server, port, user, pass),
    client(client)
   d4376:	4c1f      	ldr	r4, [pc, #124]	; (d43f4 <_GLOBAL__sub_I_TheClient+0x84>)
   d4378:	4630      	mov	r0, r6
   d437a:	f001 fb97 	bl	d5aac <_ZN9TCPClientC1Ev>
   d437e:	462a      	mov	r2, r5
   d4380:	491d      	ldr	r1, [pc, #116]	; (d43f8 <_GLOBAL__sub_I_TheClient+0x88>)
   d4382:	4630      	mov	r0, r6
   d4384:	f001 fd12 	bl	d5dac <__aeabi_atexit>
   d4388:	4b1c      	ldr	r3, [pc, #112]	; (d43fc <_GLOBAL__sub_I_TheClient+0x8c>)
   d438a:	9300      	str	r3, [sp, #0]
   d438c:	491c      	ldr	r1, [pc, #112]	; (d4400 <_GLOBAL__sub_I_TheClient+0x90>)
   d438e:	4b1d      	ldr	r3, [pc, #116]	; (d4404 <_GLOBAL__sub_I_TheClient+0x94>)
   d4390:	f240 725b 	movw	r2, #1883	; 0x75b
   d4394:	4620      	mov	r0, r4
   d4396:	f000 f8f9 	bl	d458c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>
   d439a:	4b1b      	ldr	r3, [pc, #108]	; (d4408 <_GLOBAL__sub_I_TheClient+0x98>)
   d439c:	6023      	str	r3, [r4, #0]
   d439e:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
Adafruit_MQTT_SPARK mqtt(&TheClient,AIO_SERVER,AIO_SERVERPORT,AIO_USERNAME,AIO_KEY); 
   d43a2:	462a      	mov	r2, r5
   d43a4:	4919      	ldr	r1, [pc, #100]	; (d440c <_GLOBAL__sub_I_TheClient+0x9c>)
   d43a6:	4620      	mov	r0, r4
   d43a8:	f001 fd00 	bl	d5dac <__aeabi_atexit>
Adafruit_MQTT_Publish mqttObj1 = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/<FeedNameA");
   d43ac:	4621      	mov	r1, r4
   d43ae:	4a18      	ldr	r2, [pc, #96]	; (d4410 <_GLOBAL__sub_I_TheClient+0xa0>)
   d43b0:	4818      	ldr	r0, [pc, #96]	; (d4414 <_GLOBAL__sub_I_TheClient+0xa4>)
   d43b2:	2300      	movs	r3, #0
   d43b4:	f000 fbaa 	bl	d4b0c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>
Adafruit_MQTT_Subscribe mqttObj2 = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/FeedNameB");
   d43b8:	4621      	mov	r1, r4
   d43ba:	4a17      	ldr	r2, [pc, #92]	; (d4418 <_GLOBAL__sub_I_TheClient+0xa8>)
              error_(SYSTEM_ERROR_NONE) {
   d43bc:	4c17      	ldr	r4, [pc, #92]	; (d441c <_GLOBAL__sub_I_TheClient+0xac>)
   d43be:	4818      	ldr	r0, [pc, #96]	; (d4420 <_GLOBAL__sub_I_TheClient+0xb0>)
   d43c0:	2300      	movs	r3, #0
   d43c2:	f000 fbc5 	bl	d4b50 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>
   d43c6:	2300      	movs	r3, #0
   d43c8:	6023      	str	r3, [r4, #0]
   d43ca:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d43cc:	71a3      	strb	r3, [r4, #6]
   d43ce:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   d43d2:	60a3      	str	r3, [r4, #8]
        set_system_mode(mode);
   d43d4:	2002      	movs	r0, #2
   d43d6:	f000 fce1 	bl	d4d9c <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d43da:	4912      	ldr	r1, [pc, #72]	; (d4424 <_GLOBAL__sub_I_TheClient+0xb4>)
   d43dc:	462a      	mov	r2, r5
   d43de:	4620      	mov	r0, r4
   d43e0:	b002      	add	sp, #8
   d43e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SYSTEM_MODE(SEMI_AUTOMATIC);
   d43e6:	f001 bce1 	b.w	d5dac <__aeabi_atexit>
   d43ea:	bf00      	nop
   d43ec:	2003e524 	.word	0x2003e524
   d43f0:	2003e514 	.word	0x2003e514
   d43f4:	2003e548 	.word	0x2003e548
   d43f8:	000d40c9 	.word	0x000d40c9
   d43fc:	000d88c3 	.word	0x000d88c3
   d4400:	000d88b3 	.word	0x000d88b3
   d4404:	000d88a8 	.word	0x000d88a8
   d4408:	000d8908 	.word	0x000d8908
   d440c:	000d40c5 	.word	0x000d40c5
   d4410:	000d88c9 	.word	0x000d88c9
   d4414:	2003e61c 	.word	0x2003e61c
   d4418:	000d88e5 	.word	0x000d88e5
   d441c:	2003e518 	.word	0x2003e518
   d4420:	2003e628 	.word	0x2003e628
   d4424:	000d40fd 	.word	0x000d40fd

000d4428 <_ZN19Adafruit_MQTT_SPARK9connectedEv>:
    client->stop();
  }
  return true;
}

bool Adafruit_MQTT_SPARK::connected() {
   d4428:	b508      	push	{r3, lr}
  // Return true if connected, false if not connected.
  return client->connected();
   d442a:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d442e:	6803      	ldr	r3, [r0, #0]
   d4430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4432:	4798      	blx	r3
}
   d4434:	3800      	subs	r0, #0
   d4436:	bf18      	it	ne
   d4438:	2001      	movne	r0, #1
   d443a:	bd08      	pop	{r3, pc}

000d443c <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht>:
    delay(MQTT_CLIENT_READINTERVAL_MS);
  }
  return len;
}

bool Adafruit_MQTT_SPARK::sendPacket(uint8_t *buffer, uint16_t len) {
   d443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d443e:	4606      	mov	r6, r0
   d4440:	460f      	mov	r7, r1
   d4442:	4614      	mov	r4, r2
  uint16_t ret = 0;

  while (len > 0) {
   d4444:	b1c4      	cbz	r4, d4478 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x3c>
    if (client->connected()) {
   d4446:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d444a:	6803      	ldr	r3, [r0, #0]
   d444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d444e:	4798      	blx	r3
   d4450:	b908      	cbnz	r0, d4456 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x1a>
	DEBUG_PRINTLN("Failed to send packet.");
	return false;
      }
    } else {
      DEBUG_PRINTLN(F("Connection failed!"));
      return false;
   d4452:	2000      	movs	r0, #0
    }
  }
  return true;
}
   d4454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ret = client->write(buffer, sendlen);
   d4456:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d445a:	2cfa      	cmp	r4, #250	; 0xfa
   d445c:	6803      	ldr	r3, [r0, #0]
   d445e:	4625      	mov	r5, r4
   d4460:	bfa8      	it	ge
   d4462:	25fa      	movge	r5, #250	; 0xfa
   d4464:	68db      	ldr	r3, [r3, #12]
   d4466:	462a      	mov	r2, r5
   d4468:	4639      	mov	r1, r7
   d446a:	4798      	blx	r3
   d446c:	b283      	uxth	r3, r0
      len -= ret;
   d446e:	1ae4      	subs	r4, r4, r3
      if (ret != sendlen) {
   d4470:	429d      	cmp	r5, r3
      len -= ret;
   d4472:	b2a4      	uxth	r4, r4
      if (ret != sendlen) {
   d4474:	d0e6      	beq.n	d4444 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x8>
   d4476:	e7ec      	b.n	d4452 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x16>
  return true;
   d4478:	2001      	movs	r0, #1
   d447a:	e7eb      	b.n	d4454 <_ZN19Adafruit_MQTT_SPARK10sendPacketEPht+0x18>

000d447c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts>:
                                          int16_t timeout) {
   d447c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4480:	4606      	mov	r6, r0
   d4482:	4688      	mov	r8, r1
   d4484:	4691      	mov	r9, r2
   d4486:	461f      	mov	r7, r3
   d4488:	461d      	mov	r5, r3
  uint16_t len = 0;
   d448a:	2400      	movs	r4, #0
  while (client->connected() && (timeout >= 0)) {
   d448c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d4490:	6803      	ldr	r3, [r0, #0]
   d4492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4494:	4798      	blx	r3
   d4496:	b1d0      	cbz	r0, d44ce <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
   d4498:	2d00      	cmp	r5, #0
   d449a:	db18      	blt.n	d44ce <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
    while (client->available()) {
   d449c:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d44a0:	6803      	ldr	r3, [r0, #0]
   d44a2:	691b      	ldr	r3, [r3, #16]
   d44a4:	4798      	blx	r3
   d44a6:	b160      	cbz	r0, d44c2 <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x46>
      char c = client->read();
   d44a8:	f8d6 00d0 	ldr.w	r0, [r6, #208]	; 0xd0
   d44ac:	6803      	ldr	r3, [r0, #0]
   d44ae:	695b      	ldr	r3, [r3, #20]
   d44b0:	4798      	blx	r3
   d44b2:	f808 0004 	strb.w	r0, [r8, r4]
      len++;
   d44b6:	3401      	adds	r4, #1
   d44b8:	b2a4      	uxth	r4, r4
      if (len == maxlen) {  // we read all we want, bail
   d44ba:	454c      	cmp	r4, r9
   d44bc:	d007      	beq.n	d44ce <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x52>
      timeout = t;  // reset the timeout
   d44be:	463d      	mov	r5, r7
   d44c0:	e7ec      	b.n	d449c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x20>
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d44c2:	3d0a      	subs	r5, #10
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d44c4:	200a      	movs	r0, #10
    timeout -= MQTT_CLIENT_READINTERVAL_MS;
   d44c6:	b22d      	sxth	r5, r5
    delay(MQTT_CLIENT_READINTERVAL_MS);
   d44c8:	f000 fe70 	bl	d51ac <delay>
  while (client->connected() && (timeout >= 0)) {
   d44cc:	e7de      	b.n	d448c <_ZN19Adafruit_MQTT_SPARK10readPacketEPhts+0x10>
}
   d44ce:	4620      	mov	r0, r4
   d44d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d44d4 <_ZN19Adafruit_MQTT_SPARK13connectServerEv>:
bool Adafruit_MQTT_SPARK::connectServer(){
   d44d4:	b570      	push	{r4, r5, r6, lr}
   d44d6:	4604      	mov	r4, r0
  memset(buffer, 0, sizeof(buffer));
   d44d8:	f100 0522 	add.w	r5, r0, #34	; 0x22
   d44dc:	2296      	movs	r2, #150	; 0x96
   d44de:	2100      	movs	r1, #0
   d44e0:	4628      	mov	r0, r5
   d44e2:	f002 fa9b 	bl	d6a1c <memset>
  strcpy((char *)buffer, servername);
   d44e6:	6861      	ldr	r1, [r4, #4]
   d44e8:	4628      	mov	r0, r5
   d44ea:	f002 fb01 	bl	d6af0 <strcpy>
  int r = client->connect((char *)buffer, portnum);
   d44ee:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d44f2:	8922      	ldrh	r2, [r4, #8]
   d44f4:	6803      	ldr	r3, [r0, #0]
   d44f6:	4629      	mov	r1, r5
   d44f8:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   d44fa:	2300      	movs	r3, #0
   d44fc:	47b0      	blx	r6
}
   d44fe:	3800      	subs	r0, #0
   d4500:	bf18      	it	ne
   d4502:	2001      	movne	r0, #1
   d4504:	bd70      	pop	{r4, r5, r6, pc}

000d4506 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv>:
bool Adafruit_MQTT_SPARK::disconnectServer() {
   d4506:	b510      	push	{r4, lr}
   d4508:	4604      	mov	r4, r0
  if (client->connected()) {
   d450a:	f8d0 00d0 	ldr.w	r0, [r0, #208]	; 0xd0
   d450e:	6803      	ldr	r3, [r0, #0]
   d4510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4512:	4798      	blx	r3
   d4514:	b120      	cbz	r0, d4520 <_ZN19Adafruit_MQTT_SPARK16disconnectServerEv+0x1a>
    client->stop();
   d4516:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   d451a:	6803      	ldr	r3, [r0, #0]
   d451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d451e:	4798      	blx	r3
}
   d4520:	2001      	movs	r0, #1
   d4522:	bd10      	pop	{r4, pc}

000d4524 <_ZN19Adafruit_MQTT_SPARK6UpdateEv>:
{
   d4524:	b570      	push	{r4, r5, r6, lr}
    if (!connected())
   d4526:	6803      	ldr	r3, [r0, #0]
   d4528:	689b      	ldr	r3, [r3, #8]
{
   d452a:	4604      	mov	r4, r0
    if (!connected())
   d452c:	4798      	blx	r3
   d452e:	b9c8      	cbnz	r0, d4564 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x40>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d4530:	4620      	mov	r0, r4
   d4532:	f000 fa94 	bl	d4a5e <_ZN13Adafruit_MQTT7connectEv>
   d4536:	2504      	movs	r5, #4
   d4538:	b170      	cbz	r0, d4558 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
   d453a:	3d01      	subs	r5, #1
   d453c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d4540:	d00a      	beq.n	d4558 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x34>
            disconnect();
   d4542:	4620      	mov	r0, r4
   d4544:	f000 f8b6 	bl	d46b4 <_ZN13Adafruit_MQTT10disconnectEv>
            delay(5000);  // wait 5 seconds
   d4548:	f241 3088 	movw	r0, #5000	; 0x1388
   d454c:	f000 fe2e 	bl	d51ac <delay>
        for(int8_t ret = connect() ; ret != 0 && retries < 3 ; ret = connect() , retries++)
   d4550:	4620      	mov	r0, r4
   d4552:	f000 fa84 	bl	d4a5e <_ZN13Adafruit_MQTT7connectEv>
   d4556:	e7ef      	b.n	d4538 <_ZN19Adafruit_MQTT_SPARK6UpdateEv+0x14>
        if( connected() )
   d4558:	6823      	ldr	r3, [r4, #0]
   d455a:	4620      	mov	r0, r4
   d455c:	689b      	ldr	r3, [r3, #8]
}
   d455e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if( connected() )
   d4562:	4718      	bx	r3
}
   d4564:	bd70      	pop	{r4, r5, r6, pc}

000d4566 <_ZL11stringprintPhPKct.constprop.0>:
  memmove(p, s, len);
  return p+len;
}
*/

static uint8_t *stringprint(uint8_t *p, const char *s, uint16_t maxlen=0) {
   d4566:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4568:	4604      	mov	r4, r0
  // If maxlen is specified (has a non-zero value) then use it as the maximum
  // length of the source string to write to the buffer.  Otherwise write
  // the entire source string.
  uint16_t len = strlen(s);
   d456a:	4608      	mov	r0, r1
   d456c:	9101      	str	r1, [sp, #4]
   d456e:	f002 fac7 	bl	d6b00 <strlen>
  /*
  for (uint8_t i=0; i<len; i++) {
    Serial.write(pgm_read_byte(s+i));
  }
  */
  p[0] = len >> 8; p++;
   d4572:	1203      	asrs	r3, r0, #8
   d4574:	7023      	strb	r3, [r4, #0]
  p[0] = len & 0xFF; p++;
   d4576:	7060      	strb	r0, [r4, #1]
   d4578:	b285      	uxth	r5, r0
   d457a:	3402      	adds	r4, #2
  strncpy((char *)p, s, len);
   d457c:	9901      	ldr	r1, [sp, #4]
   d457e:	462a      	mov	r2, r5
   d4580:	4620      	mov	r0, r4
   d4582:	f002 faf9 	bl	d6b78 <strncpy>
  return p+len;
}
   d4586:	1960      	adds	r0, r4, r5
   d4588:	b003      	add	sp, #12
   d458a:	bd30      	pop	{r4, r5, pc}

000d458c <_ZN13Adafruit_MQTTC1EPKctS1_S1_>:
  packet_id_counter = 0;

}


Adafruit_MQTT::Adafruit_MQTT(const char *server,
   d458c:	b530      	push	{r4, r5, lr}
                             uint16_t port,
                             const char *user,
                             const char *pass) {
  servername = server;
  portnum = port;
   d458e:	8102      	strh	r2, [r0, #8]
  clientid = "";
   d4590:	4a0a      	ldr	r2, [pc, #40]	; (d45bc <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x30>)
                             const char *pass) {
   d4592:	4d0b      	ldr	r5, [pc, #44]	; (d45c0 <_ZN13Adafruit_MQTTC1EPKctS1_S1_+0x34>)
  username = user;
   d4594:	e9c0 2303 	strd	r2, r3, [r0, #12]
  password = pass;
   d4598:	9b03      	ldr	r3, [sp, #12]
   d459a:	6143      	str	r3, [r0, #20]

  // reset subscriptions
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
    subscriptions[i] = 0;
   d459c:	2300      	movs	r3, #0
  servername = server;
   d459e:	e9c0 5100 	strd	r5, r1, [r0]
    subscriptions[i] = 0;
   d45a2:	e9c0 332f 	strd	r3, r3, [r0, #188]	; 0xbc
   d45a6:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
  }

  will_topic = 0;
  will_payload = 0;
   d45aa:	e9c0 3306 	strd	r3, r3, [r0, #24]
    subscriptions[i] = 0;
   d45ae:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
  will_qos = 0;
   d45b2:	8403      	strh	r3, [r0, #32]
  will_retain = 0;

  packet_id_counter = 0;
   d45b4:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8

}
   d45b8:	bd30      	pop	{r4, r5, pc}
   d45ba:	bf00      	nop
   d45bc:	000d88a7 	.word	0x000d88a7
   d45c0:	000d8b14 	.word	0x000d8b14

000d45c4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>:
    }
  }
  return 0;
}

uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d45c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d45c8:	4616      	mov	r6, r2
  uint8_t *pbuff = buffer;

  uint8_t rlen;

  // read the packet type:
  rlen = readPacket(pbuff, 1, timeout);
   d45ca:	6802      	ldr	r2, [r0, #0]
   d45cc:	b21b      	sxth	r3, r3
   d45ce:	6997      	ldr	r7, [r2, #24]
   d45d0:	9301      	str	r3, [sp, #4]
   d45d2:	2201      	movs	r2, #1
uint16_t Adafruit_MQTT::readFullPacket(uint8_t *buffer, uint16_t maxsize, uint16_t timeout) {
   d45d4:	4605      	mov	r5, r0
   d45d6:	460c      	mov	r4, r1
  rlen = readPacket(pbuff, 1, timeout);
   d45d8:	47b8      	blx	r7
  if (rlen != 1) return 0;
   d45da:	b2c7      	uxtb	r7, r0
   d45dc:	2f01      	cmp	r7, #1
   d45de:	9b01      	ldr	r3, [sp, #4]
   d45e0:	d003      	beq.n	d45ea <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x26>
   d45e2:	2000      	movs	r0, #0
    rlen = readPacket(pbuff, value, timeout);
  }
  //DEBUG_PRINT(F("Remaining packet:\t")); DEBUG_PRINTBUFFER(pbuff, rlen);

  return ((pbuff - buffer)+rlen);
}
   d45e4:	b003      	add	sp, #12
   d45e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pbuff++;
   d45ea:	f104 0801 	add.w	r8, r4, #1
  uint32_t multiplier = 1;
   d45ee:	f104 0a04 	add.w	sl, r4, #4
  uint32_t value = 0;
   d45f2:	f04f 0900 	mov.w	r9, #0
    rlen = readPacket(pbuff, 1, timeout);
   d45f6:	682a      	ldr	r2, [r5, #0]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	f8d2 b018 	ldr.w	fp, [r2, #24]
   d45fe:	4641      	mov	r1, r8
   d4600:	2201      	movs	r2, #1
   d4602:	4628      	mov	r0, r5
   d4604:	47d8      	blx	fp
    if (rlen != 1) return 0;
   d4606:	b2c0      	uxtb	r0, r0
   d4608:	2801      	cmp	r0, #1
   d460a:	d1ea      	bne.n	d45e2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    if (multiplier > (128UL*128UL*128UL)) {
   d460c:	45c2      	cmp	sl, r8
    multiplier *= 128;
   d460e:	ea4f 10c7 	mov.w	r0, r7, lsl #7
    if (multiplier > (128UL*128UL*128UL)) {
   d4612:	d0e6      	beq.n	d45e2 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x1e>
    encodedByte = pbuff[0]; // save the last read val
   d4614:	f818 2b01 	ldrb.w	r2, [r8], #1
  } while (encodedByte & 0x80);
   d4618:	9b01      	ldr	r3, [sp, #4]
    uint32_t intermediate = encodedByte & 0x7F;
   d461a:	f002 017f 	and.w	r1, r2, #127	; 0x7f
  } while (encodedByte & 0x80);
   d461e:	f012 0f80 	tst.w	r2, #128	; 0x80
    value += intermediate;
   d4622:	fb01 9907 	mla	r9, r1, r7, r9
  } while (encodedByte & 0x80);
   d4626:	d116      	bne.n	d4656 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x92>
  if (value > (unsigned)(maxsize - (pbuff-buffer) - 1)) {
   d4628:	eba8 0404 	sub.w	r4, r8, r4
   d462c:	b2a7      	uxth	r7, r4
   d462e:	1b34      	subs	r4, r6, r4
   d4630:	682a      	ldr	r2, [r5, #0]
   d4632:	3c01      	subs	r4, #1
   d4634:	454c      	cmp	r4, r9
      rlen = readPacket(pbuff, (maxsize - (pbuff-buffer) - 1), timeout);
   d4636:	f8d2 a018 	ldr.w	sl, [r2, #24]
   d463a:	bf3d      	ittte	cc
   d463c:	f106 32ff 	addcc.w	r2, r6, #4294967295
   d4640:	1bd2      	subcc	r2, r2, r7
   d4642:	b292      	uxthcc	r2, r2
    rlen = readPacket(pbuff, value, timeout);
   d4644:	fa1f f289 	uxthcs.w	r2, r9
   d4648:	4641      	mov	r1, r8
   d464a:	4628      	mov	r0, r5
   d464c:	47d0      	blx	sl
   d464e:	b2c0      	uxtb	r0, r0
  return ((pbuff - buffer)+rlen);
   d4650:	4438      	add	r0, r7
   d4652:	b280      	uxth	r0, r0
   d4654:	e7c6      	b.n	d45e4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x20>
   d4656:	4607      	mov	r7, r0
   d4658:	e7cd      	b.n	d45f6 <_ZN13Adafruit_MQTT14readFullPacketEPhtt+0x32>
	...

000d465c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>:
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d465c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      ERROR_PRINTLN(F("Dropped a packet"));
   d4660:	f8df 8030 	ldr.w	r8, [pc, #48]	; d4694 <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x38>
uint16_t Adafruit_MQTT::processPacketsUntil(uint8_t *buffer, uint8_t waitforpackettype, uint16_t timeout) {
   d4664:	4605      	mov	r5, r0
   d4666:	460c      	mov	r4, r1
   d4668:	4616      	mov	r6, r2
   d466a:	461f      	mov	r7, r3
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d466c:	463b      	mov	r3, r7
   d466e:	2296      	movs	r2, #150	; 0x96
   d4670:	4621      	mov	r1, r4
   d4672:	4628      	mov	r0, r5
   d4674:	f7ff ffa6 	bl	d45c4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
   d4678:	b148      	cbz	r0, d468e <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
    if ((buffer[0] >> 4) == waitforpackettype) {
   d467a:	7823      	ldrb	r3, [r4, #0]
   d467c:	ebb6 1f13 	cmp.w	r6, r3, lsr #4
   d4680:	d005      	beq.n	d468e <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x32>
      ERROR_PRINTLN(F("Dropped a packet"));
   d4682:	f000 ff2b 	bl	d54dc <_Z16_fetch_usbserialv>
   d4686:	4641      	mov	r1, r8
   d4688:	f000 fd1f 	bl	d50ca <_ZN5Print7printlnEPKc>
  while ( (len = readFullPacket(buffer, MAXBUFFERSIZE, timeout)) > 0) {
   d468c:	e7ee      	b.n	d466c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht+0x10>
}
   d468e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4692:	bf00      	nop
   d4694:	000d8924 	.word	0x000d8924

000d4698 <_ZN13Adafruit_MQTT18connectErrorStringEa>:

const FLASH_STRING* Adafruit_MQTT::connectErrorString(int8_t code)
{
   switch (code) {
   d4698:	3102      	adds	r1, #2
   d469a:	b2c9      	uxtb	r1, r1
   d469c:	2909      	cmp	r1, #9
   d469e:	bf9a      	itte	ls
   d46a0:	4b02      	ldrls	r3, [pc, #8]	; (d46ac <_ZN13Adafruit_MQTT18connectErrorStringEa+0x14>)
   d46a2:	f853 0021 	ldrls.w	r0, [r3, r1, lsl #2]
   d46a6:	4802      	ldrhi	r0, [pc, #8]	; (d46b0 <_ZN13Adafruit_MQTT18connectErrorStringEa+0x18>)
      case 7: return F("You have been banned from connecting. Please contact the MQTT server administrator for more details.");
      case -1: return F("Connection failed");
      case -2: return F("Failed to subscribe");
   }
    return F("Unknown error");
}
   d46a8:	4770      	bx	lr
   d46aa:	bf00      	nop
   d46ac:	000d8b30 	.word	0x000d8b30
   d46b0:	000d8935 	.word	0x000d8935

000d46b4 <_ZN13Adafruit_MQTT10disconnectEv>:

bool Adafruit_MQTT::disconnect() {
   d46b4:	b510      	push	{r4, lr}
  DEBUG_PRINTBUFFER(buffer, 4);
  return 4;
}

uint8_t Adafruit_MQTT::disconnectPacket(uint8_t *packet) {
  packet[0] = MQTT_CTRL_DISCONNECT << 4;
   d46b6:	23e0      	movs	r3, #224	; 0xe0
   d46b8:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  uint8_t len = disconnectPacket(buffer);
   d46bc:	4601      	mov	r1, r0
  packet[1] = 0;
   d46be:	2300      	movs	r3, #0
   d46c0:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
  if (! sendPacket(buffer, len))
   d46c4:	f851 3b22 	ldr.w	r3, [r1], #34
bool Adafruit_MQTT::disconnect() {
   d46c8:	4604      	mov	r4, r0
  if (! sendPacket(buffer, len))
   d46ca:	695b      	ldr	r3, [r3, #20]
   d46cc:	2202      	movs	r2, #2
   d46ce:	4798      	blx	r3
  return disconnectServer();
   d46d0:	6823      	ldr	r3, [r4, #0]
   d46d2:	4620      	mov	r0, r4
   d46d4:	691b      	ldr	r3, [r3, #16]
}
   d46d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return disconnectServer();
   d46da:	4718      	bx	r3

000d46dc <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe>:
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d46dc:	f100 02bc 	add.w	r2, r0, #188	; 0xbc
bool Adafruit_MQTT::subscribe(Adafruit_MQTT_Subscribe *sub) {
   d46e0:	b530      	push	{r4, r5, lr}
   d46e2:	4613      	mov	r3, r2
   d46e4:	f100 04d0 	add.w	r4, r0, #208	; 0xd0
    if (subscriptions[i] == sub) {
   d46e8:	f853 5b04 	ldr.w	r5, [r3], #4
   d46ec:	428d      	cmp	r5, r1
   d46ee:	d009      	beq.n	d4704 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x28>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d46f0:	42a3      	cmp	r3, r4
   d46f2:	d1f9      	bne.n	d46e8 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0xc>
   d46f4:	2300      	movs	r3, #0
      if (subscriptions[i] == 0) {
   d46f6:	f852 4b04 	ldr.w	r4, [r2], #4
   d46fa:	b92c      	cbnz	r4, d4708 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x2c>
        subscriptions[i] = sub;
   d46fc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   d4700:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
      return true;
   d4704:	2001      	movs	r0, #1
   d4706:	e003      	b.n	d4710 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x34>
    for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d4708:	3301      	adds	r3, #1
   d470a:	2b05      	cmp	r3, #5
   d470c:	d1f3      	bne.n	d46f6 <_ZN13Adafruit_MQTT9subscribeEP23Adafruit_MQTT_Subscribe+0x1a>
  return false;
   d470e:	2000      	movs	r0, #0
}
   d4710:	bd30      	pop	{r4, r5, pc}

000d4712 <_ZN13Adafruit_MQTT16readSubscriptionEs>:
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d4712:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d4716:	f100 0922 	add.w	r9, r0, #34	; 0x22
   d471a:	b28b      	uxth	r3, r1
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d471c:	b085      	sub	sp, #20
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d471e:	2296      	movs	r2, #150	; 0x96
   d4720:	4649      	mov	r1, r9
Adafruit_MQTT_Subscribe *Adafruit_MQTT::readSubscription(int16_t timeout) {
   d4722:	4605      	mov	r5, r0
  uint16_t len = readFullPacket(buffer, MAXBUFFERSIZE, timeout); // return one full packet
   d4724:	f7ff ff4e 	bl	d45c4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (!len)
   d4728:	4606      	mov	r6, r0
   d472a:	b1f0      	cbz	r0, d476a <_ZN13Adafruit_MQTT16readSubscriptionEs+0x58>
  topiclen = buffer[3];
   d472c:	f895 7025 	ldrb.w	r7, [r5, #37]	; 0x25
   d4730:	9700      	str	r7, [sp, #0]
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d4732:	f105 0abc 	add.w	sl, r5, #188	; 0xbc
  topiclen = buffer[3];
   d4736:	f04f 0800 	mov.w	r8, #0
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d473a:	f105 0b26 	add.w	fp, r5, #38	; 0x26
    if (subscriptions[i]) {
   d473e:	f85a 4b04 	ldr.w	r4, [sl], #4
   d4742:	b16c      	cbz	r4, d4760 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strlen(subscriptions[i]->topic) != topiclen)
   d4744:	6821      	ldr	r1, [r4, #0]
   d4746:	9101      	str	r1, [sp, #4]
   d4748:	4608      	mov	r0, r1
   d474a:	f002 f9d9 	bl	d6b00 <strlen>
   d474e:	42b8      	cmp	r0, r7
   d4750:	d106      	bne.n	d4760 <_ZN13Adafruit_MQTT16readSubscriptionEs+0x4e>
      if (strncasecmp((char*)buffer+4, subscriptions[i]->topic, topiclen) == 0) {
   d4752:	9901      	ldr	r1, [sp, #4]
   d4754:	463a      	mov	r2, r7
   d4756:	4658      	mov	r0, fp
   d4758:	f002 f9da 	bl	d6b10 <strncasecmp>
   d475c:	2800      	cmp	r0, #0
   d475e:	d045      	beq.n	d47ec <_ZN13Adafruit_MQTT16readSubscriptionEs+0xda>
  for (i=0; i<MAXSUBSCRIPTIONS; i++) {
   d4760:	f108 0801 	add.w	r8, r8, #1
   d4764:	f1b8 0f05 	cmp.w	r8, #5
   d4768:	d1e9      	bne.n	d473e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x2c>
    return NULL;  // No data available, just quit.
   d476a:	2000      	movs	r0, #0
   d476c:	e03b      	b.n	d47e6 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xd4>
    packetid = buffer[topiclen+4];
   d476e:	19ea      	adds	r2, r5, r7
   d4770:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
    packetid |= buffer[topiclen+5];
   d4774:	f892 a027 	ldrb.w	sl, [r2, #39]	; 0x27
   d4778:	ea4a 2a00 	orr.w	sl, sl, r0, lsl #8
  memset(subscriptions[i]->lastread, 0, SUBSCRIPTIONDATALEN);
   d477c:	2214      	movs	r2, #20
   d477e:	2100      	movs	r1, #0
   d4780:	1d60      	adds	r0, r4, #5
   d4782:	f002 f94b 	bl	d6a1c <memset>
  datalen = len - topiclen - packet_id_len - 4;
   d4786:	9b00      	ldr	r3, [sp, #0]
   d4788:	f5c3 447f 	rsb	r4, r3, #65280	; 0xff00
   d478c:	34fc      	adds	r4, #252	; 0xfc
   d478e:	4426      	add	r6, r4
   d4790:	eb05 0888 	add.w	r8, r5, r8, lsl #2
   d4794:	eba6 060b 	sub.w	r6, r6, fp
   d4798:	b2b6      	uxth	r6, r6
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d479a:	2e15      	cmp	r6, #21
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d479c:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
   d47a0:	f107 0104 	add.w	r1, r7, #4
    datalen = SUBSCRIPTIONDATALEN-1; // cut it off
   d47a4:	bf28      	it	cs
   d47a6:	2613      	movcs	r6, #19
  memmove(subscriptions[i]->lastread, buffer+4+topiclen+packet_id_len, datalen);
   d47a8:	4459      	add	r1, fp
   d47aa:	4632      	mov	r2, r6
   d47ac:	4449      	add	r1, r9
   d47ae:	3005      	adds	r0, #5
   d47b0:	f002 f91a 	bl	d69e8 <memmove>
  subscriptions[i]->datalen = datalen;
   d47b4:	f8d8 30bc 	ldr.w	r3, [r8, #188]	; 0xbc
   d47b8:	835e      	strh	r6, [r3, #26]
  if ((MQTT_PROTOCOL_LEVEL > 3) &&(buffer[0] & 0x6) == 0x2) {
   d47ba:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
   d47be:	f003 0306 	and.w	r3, r3, #6
   d47c2:	2b02      	cmp	r3, #2
   d47c4:	d10d      	bne.n	d47e2 <_ZN13Adafruit_MQTT16readSubscriptionEs+0xd0>
  packet[0] = MQTT_CTRL_PUBACK << 4;
   d47c6:	f44f 7310 	mov.w	r3, #576	; 0x240
   d47ca:	f8ad 300c 	strh.w	r3, [sp, #12]
    if (!sendPacket(ackpacket, len))
   d47ce:	682b      	ldr	r3, [r5, #0]
  packet[2] = packetid >> 8;
   d47d0:	fa9a fa9a 	rev16.w	sl, sl
    if (!sendPacket(ackpacket, len))
   d47d4:	695b      	ldr	r3, [r3, #20]
  packet[2] = packetid >> 8;
   d47d6:	f8ad a00e 	strh.w	sl, [sp, #14]
    if (!sendPacket(ackpacket, len))
   d47da:	2204      	movs	r2, #4
   d47dc:	a903      	add	r1, sp, #12
   d47de:	4628      	mov	r0, r5
   d47e0:	4798      	blx	r3
  return subscriptions[i];
   d47e2:	f8d8 00bc 	ldr.w	r0, [r8, #188]	; 0xbc
}
   d47e6:	b005      	add	sp, #20
   d47e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((buffer[0] & 0x6) == 0x2) {
   d47ec:	f895 b022 	ldrb.w	fp, [r5, #34]	; 0x22
   d47f0:	f00b 0b06 	and.w	fp, fp, #6
   d47f4:	f1bb 0f02 	cmp.w	fp, #2
   d47f8:	d0b9      	beq.n	d476e <_ZN13Adafruit_MQTT16readSubscriptionEs+0x5c>
  uint16_t packetid=0;
   d47fa:	4682      	mov	sl, r0
  uint8_t packet_id_len = 0;
   d47fc:	4683      	mov	fp, r0
   d47fe:	e7bd      	b.n	d477c <_ZN13Adafruit_MQTT16readSubscriptionEs+0x6a>

000d4800 <_ZN13Adafruit_MQTT4pingEh>:
bool Adafruit_MQTT::ping(uint8_t num) {
   d4800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4804:	4604      	mov	r4, r0
   d4806:	460d      	mov	r5, r1
   d4808:	f04f 0800 	mov.w	r8, #0
    uint8_t len = pingPacket(buffer);
   d480c:	f100 0722 	add.w	r7, r0, #34	; 0x22
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d4810:	f04f 09c0 	mov.w	r9, #192	; 0xc0
  while (num--) {
   d4814:	b1e5      	cbz	r5, d4850 <_ZN13Adafruit_MQTT4pingEh+0x50>
    if (!sendPacket(buffer, len))
   d4816:	6823      	ldr	r3, [r4, #0]
  packet[0] = MQTT_CTRL_PINGREQ << 4;
   d4818:	f884 9022 	strb.w	r9, [r4, #34]	; 0x22
  packet[1] = 0;
   d481c:	f884 8023 	strb.w	r8, [r4, #35]	; 0x23
    if (!sendPacket(buffer, len))
   d4820:	695b      	ldr	r3, [r3, #20]
   d4822:	2202      	movs	r2, #2
   d4824:	4639      	mov	r1, r7
   d4826:	4620      	mov	r0, r4
   d4828:	4798      	blx	r3
   d482a:	4606      	mov	r6, r0
   d482c:	b168      	cbz	r0, d484a <_ZN13Adafruit_MQTT4pingEh+0x4a>
    len = processPacketsUntil(buffer, MQTT_CTRL_PINGRESP, PING_TIMEOUT_MS);
   d482e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4832:	220d      	movs	r2, #13
   d4834:	4639      	mov	r1, r7
   d4836:	4620      	mov	r0, r4
   d4838:	f7ff ff10 	bl	d465c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
    if (buffer[0] == (MQTT_CTRL_PINGRESP << 4))
   d483c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d4840:	2bd0      	cmp	r3, #208	; 0xd0
   d4842:	d102      	bne.n	d484a <_ZN13Adafruit_MQTT4pingEh+0x4a>
}
   d4844:	4630      	mov	r0, r6
   d4846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d484a:	3d01      	subs	r5, #1
   d484c:	b2ed      	uxtb	r5, r5
   d484e:	e7e1      	b.n	d4814 <_ZN13Adafruit_MQTT4pingEh+0x14>
  return false;
   d4850:	462e      	mov	r6, r5
   d4852:	e7f7      	b.n	d4844 <_ZN13Adafruit_MQTT4pingEh+0x44>

000d4854 <_ZN13Adafruit_MQTT13connectPacketEPh>:
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d4854:	b538      	push	{r3, r4, r5, lr}
   d4856:	4605      	mov	r5, r0
  p[0] = (MQTT_CTRL_CONNECT << 4) | 0x0;
   d4858:	4608      	mov	r0, r1
   d485a:	2310      	movs	r3, #16
   d485c:	f800 3b02 	strb.w	r3, [r0], #2
uint8_t Adafruit_MQTT::connectPacket(uint8_t *packet) {
   d4860:	460c      	mov	r4, r1
    p = stringprint(p, "MQTT");
   d4862:	4929      	ldr	r1, [pc, #164]	; (d4908 <_ZN13Adafruit_MQTT13connectPacketEPh+0xb4>)
   d4864:	f7ff fe7f 	bl	d4566 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = MQTT_PROTOCOL_LEVEL;
   d4868:	2304      	movs	r3, #4
   d486a:	7003      	strb	r3, [r0, #0]
  p[0] = MQTT_CONN_CLEANSESSION;
   d486c:	2302      	movs	r3, #2
   d486e:	7043      	strb	r3, [r0, #1]
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d4870:	69ab      	ldr	r3, [r5, #24]
   d4872:	b18b      	cbz	r3, d4898 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
   d4874:	781b      	ldrb	r3, [r3, #0]
   d4876:	b17b      	cbz	r3, d4898 <_ZN13Adafruit_MQTT13connectPacketEPh+0x44>
    p[0] |= MQTT_CONN_WILLFLAG;
   d4878:	2306      	movs	r3, #6
   d487a:	7043      	strb	r3, [r0, #1]
    if(will_qos == 1)
   d487c:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4880:	2b01      	cmp	r3, #1
   d4882:	d139      	bne.n	d48f8 <_ZN13Adafruit_MQTT13connectPacketEPh+0xa4>
      p[0] |= MQTT_CONN_WILLQOS_1;
   d4884:	230e      	movs	r3, #14
      p[0] |= MQTT_CONN_WILLQOS_2;
   d4886:	7043      	strb	r3, [r0, #1]
    if(will_retain == 1)
   d4888:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d488c:	2b01      	cmp	r3, #1
      p[0] |= MQTT_CONN_WILLRETAIN;
   d488e:	bf02      	ittt	eq
   d4890:	7843      	ldrbeq	r3, [r0, #1]
   d4892:	f043 0320 	orreq.w	r3, r3, #32
   d4896:	7043      	strbeq	r3, [r0, #1]
  if (pgm_read_byte(username) != 0)
   d4898:	692b      	ldr	r3, [r5, #16]
   d489a:	781b      	ldrb	r3, [r3, #0]
   d489c:	b11b      	cbz	r3, d48a6 <_ZN13Adafruit_MQTT13connectPacketEPh+0x52>
    p[0] |= MQTT_CONN_USERNAMEFLAG;
   d489e:	7843      	ldrb	r3, [r0, #1]
   d48a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d48a4:	7043      	strb	r3, [r0, #1]
  if (pgm_read_byte(password) != 0)
   d48a6:	696b      	ldr	r3, [r5, #20]
   d48a8:	781b      	ldrb	r3, [r3, #0]
   d48aa:	b11b      	cbz	r3, d48b4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x60>
    p[0] |= MQTT_CONN_PASSWORDFLAG;
   d48ac:	7843      	ldrb	r3, [r0, #1]
   d48ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   d48b2:	7043      	strb	r3, [r0, #1]
  p[0] = MQTT_CONN_KEEPALIVE >> 8;
   d48b4:	2301      	movs	r3, #1
   d48b6:	7083      	strb	r3, [r0, #2]
  p[0] = MQTT_CONN_KEEPALIVE & 0xFF;
   d48b8:	232c      	movs	r3, #44	; 0x2c
   d48ba:	70c3      	strb	r3, [r0, #3]
    if (pgm_read_byte(clientid) != 0) {
   d48bc:	68e9      	ldr	r1, [r5, #12]
   d48be:	780b      	ldrb	r3, [r1, #0]
   d48c0:	b1f3      	cbz	r3, d4900 <_ZN13Adafruit_MQTT13connectPacketEPh+0xac>
      p = stringprint(p, clientid);
   d48c2:	3004      	adds	r0, #4
   d48c4:	f7ff fe4f 	bl	d4566 <_ZL11stringprintPhPKct.constprop.0>
  if (will_topic && pgm_read_byte(will_topic) != 0) {
   d48c8:	69a9      	ldr	r1, [r5, #24]
   d48ca:	b131      	cbz	r1, d48da <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
   d48cc:	780b      	ldrb	r3, [r1, #0]
   d48ce:	b123      	cbz	r3, d48da <_ZN13Adafruit_MQTT13connectPacketEPh+0x86>
    p = stringprint(p, will_topic);
   d48d0:	f7ff fe49 	bl	d4566 <_ZL11stringprintPhPKct.constprop.0>
    p = stringprint(p, will_payload);
   d48d4:	69e9      	ldr	r1, [r5, #28]
   d48d6:	f7ff fe46 	bl	d4566 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(username) != 0) {
   d48da:	6929      	ldr	r1, [r5, #16]
   d48dc:	780b      	ldrb	r3, [r1, #0]
   d48de:	b10b      	cbz	r3, d48e4 <_ZN13Adafruit_MQTT13connectPacketEPh+0x90>
    p = stringprint(p, username);
   d48e0:	f7ff fe41 	bl	d4566 <_ZL11stringprintPhPKct.constprop.0>
  if (pgm_read_byte(password) != 0) {
   d48e4:	6969      	ldr	r1, [r5, #20]
   d48e6:	780b      	ldrb	r3, [r1, #0]
   d48e8:	b10b      	cbz	r3, d48ee <_ZN13Adafruit_MQTT13connectPacketEPh+0x9a>
    p = stringprint(p, password);
   d48ea:	f7ff fe3c 	bl	d4566 <_ZL11stringprintPhPKct.constprop.0>
  len = p - packet;
   d48ee:	1b00      	subs	r0, r0, r4
  packet[1] = len-2;  // don't include the 2 bytes of fixed header data
   d48f0:	b2c0      	uxtb	r0, r0
   d48f2:	1e83      	subs	r3, r0, #2
   d48f4:	7063      	strb	r3, [r4, #1]
}
   d48f6:	bd38      	pop	{r3, r4, r5, pc}
    else if(will_qos == 2)
   d48f8:	2b02      	cmp	r3, #2
   d48fa:	d1c5      	bne.n	d4888 <_ZN13Adafruit_MQTT13connectPacketEPh+0x34>
      p[0] |= MQTT_CONN_WILLQOS_2;
   d48fc:	231e      	movs	r3, #30
   d48fe:	e7c2      	b.n	d4886 <_ZN13Adafruit_MQTT13connectPacketEPh+0x32>
      p[0] = 0x0;
   d4900:	7103      	strb	r3, [r0, #4]
      p[0] = 0x0;
   d4902:	7143      	strb	r3, [r0, #5]
      p++;
   d4904:	3006      	adds	r0, #6
   d4906:	e7df      	b.n	d48c8 <_ZN13Adafruit_MQTT13connectPacketEPh+0x74>
   d4908:	000d8943 	.word	0x000d8943

000d490c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>:
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d490c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4910:	4605      	mov	r5, r0
  len += strlen(topic); // topic length
   d4912:	4610      	mov	r0, r2
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d4914:	460e      	mov	r6, r1
   d4916:	4698      	mov	r8, r3
  len += strlen(topic); // topic length
   d4918:	9201      	str	r2, [sp, #4]
   d491a:	f002 f8f1 	bl	d6b00 <strlen>
                                     uint8_t *data, uint16_t bLen, uint8_t qos) {
   d491e:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   d4922:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
  if(qos > 0) { 
   d4926:	9901      	ldr	r1, [sp, #4]
  len += strlen(topic); // topic length
   d4928:	b284      	uxth	r4, r0
  if(qos > 0) { 
   d492a:	f1b9 0f00 	cmp.w	r9, #0
   d492e:	d135      	bne.n	d499c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x90>
  len += strlen(topic); // topic length
   d4930:	3402      	adds	r4, #2
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d4932:	ea4f 0349 	mov.w	r3, r9, lsl #1
   d4936:	4630      	mov	r0, r6
    len += 2; // qos packet id
   d4938:	b2a4      	uxth	r4, r4
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d493a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
  len += bLen; // payload length
   d493e:	443c      	add	r4, r7
  p[0] = MQTT_CTRL_PUBLISH << 4 | qos << 1;
   d4940:	f800 3b01 	strb.w	r3, [r0], #1
  len += bLen; // payload length
   d4944:	b2a4      	uxth	r4, r4
    uint8_t encodedByte = len % 128;
   d4946:	4622      	mov	r2, r4
   d4948:	f004 037f 	and.w	r3, r4, #127	; 0x7f
    if ( len > 0 ) {
   d494c:	2a7f      	cmp	r2, #127	; 0x7f
      encodedByte |= 0x80;
   d494e:	bf88      	it	hi
   d4950:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
  } while ( len > 0 );
   d4954:	2a7f      	cmp	r2, #127	; 0x7f
    p[0] = encodedByte;
   d4956:	f800 3b01 	strb.w	r3, [r0], #1
    len /= 128;
   d495a:	ea4f 14d4 	mov.w	r4, r4, lsr #7
  } while ( len > 0 );
   d495e:	d8f2      	bhi.n	d4946 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x3a>
  p = stringprint(p, topic);
   d4960:	f7ff fe01 	bl	d4566 <_ZL11stringprintPhPKct.constprop.0>
   d4964:	4603      	mov	r3, r0
  if(qos > 0) {
   d4966:	f1b9 0f00 	cmp.w	r9, #0
   d496a:	d00c      	beq.n	d4986 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x7a>
    p[0] = (packet_id_counter >> 8) & 0xFF;
   d496c:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d4970:	0a12      	lsrs	r2, r2, #8
   d4972:	7002      	strb	r2, [r0, #0]
    p[1] = packet_id_counter & 0xFF;
   d4974:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d4978:	7042      	strb	r2, [r0, #1]
    packet_id_counter++;
   d497a:	f8b5 20b8 	ldrh.w	r2, [r5, #184]	; 0xb8
   d497e:	3201      	adds	r2, #1
    p+=2;
   d4980:	3302      	adds	r3, #2
    packet_id_counter++;
   d4982:	f8a5 20b8 	strh.w	r2, [r5, #184]	; 0xb8
  memmove(p, data, bLen);
   d4986:	463a      	mov	r2, r7
   d4988:	4641      	mov	r1, r8
   d498a:	4618      	mov	r0, r3
   d498c:	f002 f82c 	bl	d69e8 <memmove>
  p+= bLen;
   d4990:	4438      	add	r0, r7
  len = p - packet;
   d4992:	1b80      	subs	r0, r0, r6
}
   d4994:	b280      	uxth	r0, r0
   d4996:	b003      	add	sp, #12
   d4998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    len += 2; // qos packet id
   d499c:	3404      	adds	r4, #4
   d499e:	e7c8      	b.n	d4932 <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th+0x26>

000d49a0 <_ZN13Adafruit_MQTT7publishEPKcPhth>:
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d49a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d49a2:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d49a6:	f100 0522 	add.w	r5, r0, #34	; 0x22
bool Adafruit_MQTT::publish(const char *topic, uint8_t *data, uint16_t bLen, uint8_t qos) {
   d49aa:	4604      	mov	r4, r0
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d49ac:	e9cd 3600 	strd	r3, r6, [sp]
   d49b0:	4613      	mov	r3, r2
   d49b2:	460a      	mov	r2, r1
   d49b4:	4629      	mov	r1, r5
   d49b6:	f7ff ffa9 	bl	d490c <_ZN13Adafruit_MQTT13publishPacketEPhPKcS0_th>
  if (!sendPacket(buffer, len))
   d49ba:	6823      	ldr	r3, [r4, #0]
  uint16_t len = publishPacket(buffer, topic, data, bLen, qos);
   d49bc:	4602      	mov	r2, r0
  if (!sendPacket(buffer, len))
   d49be:	695b      	ldr	r3, [r3, #20]
   d49c0:	4629      	mov	r1, r5
   d49c2:	4620      	mov	r0, r4
   d49c4:	4798      	blx	r3
   d49c6:	b910      	cbnz	r0, d49ce <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2e>
    return false;
   d49c8:	2000      	movs	r0, #0
}
   d49ca:	b002      	add	sp, #8
   d49cc:	bd70      	pop	{r4, r5, r6, pc}
  if (qos > 0) {
   d49ce:	2e00      	cmp	r6, #0
   d49d0:	d0fb      	beq.n	d49ca <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>
    len = readFullPacket(buffer, MAXBUFFERSIZE, PUBLISH_TIMEOUT_MS);
   d49d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d49d6:	2296      	movs	r2, #150	; 0x96
   d49d8:	4629      	mov	r1, r5
   d49da:	4620      	mov	r0, r4
   d49dc:	f7ff fdf2 	bl	d45c4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
    if (len != 4)
   d49e0:	2804      	cmp	r0, #4
   d49e2:	d1f1      	bne.n	d49c8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    if ((buffer[0] >> 4) != MQTT_CTRL_PUBACK)
   d49e4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   d49e8:	111b      	asrs	r3, r3, #4
   d49ea:	2b04      	cmp	r3, #4
   d49ec:	d1ec      	bne.n	d49c8 <_ZN13Adafruit_MQTT7publishEPKcPhth+0x28>
    uint16_t packnum = buffer[2];
   d49ee:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    if (packnum != packet_id_counter)
   d49f0:	f8b4 00b8 	ldrh.w	r0, [r4, #184]	; 0xb8
   d49f4:	ba5b      	rev16	r3, r3
    packnum++;
   d49f6:	3301      	adds	r3, #1
    if (packnum != packet_id_counter)
   d49f8:	b29b      	uxth	r3, r3
   d49fa:	1ac3      	subs	r3, r0, r3
   d49fc:	4258      	negs	r0, r3
   d49fe:	4158      	adcs	r0, r3
   d4a00:	e7e3      	b.n	d49ca <_ZN13Adafruit_MQTT7publishEPKcPhth+0x2a>

000d4a02 <_ZN13Adafruit_MQTT7publishEPKcS1_h>:
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d4a02:	b530      	push	{r4, r5, lr}
   d4a04:	b085      	sub	sp, #20
   d4a06:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d4a08:	4610      	mov	r0, r2
bool Adafruit_MQTT::publish(const char *topic, const char *data, uint8_t qos) {
   d4a0a:	461d      	mov	r5, r3
   d4a0c:	9103      	str	r1, [sp, #12]
    return publish(topic, (uint8_t*)(data), strlen(data), qos);
   d4a0e:	9202      	str	r2, [sp, #8]
   d4a10:	f002 f876 	bl	d6b00 <strlen>
   d4a14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   d4a18:	b283      	uxth	r3, r0
   d4a1a:	9500      	str	r5, [sp, #0]
   d4a1c:	4620      	mov	r0, r4
   d4a1e:	f7ff ffbf 	bl	d49a0 <_ZN13Adafruit_MQTT7publishEPKcPhth>
}
   d4a22:	b005      	add	sp, #20
   d4a24:	bd30      	pop	{r4, r5, pc}

000d4a26 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>:
                                       uint8_t qos) {
   d4a26:	b538      	push	{r3, r4, r5, lr}
   d4a28:	461d      	mov	r5, r3
  p[0] = MQTT_CTRL_SUBSCRIBE << 4 | MQTT_QOS_1 << 1;
   d4a2a:	2382      	movs	r3, #130	; 0x82
   d4a2c:	700b      	strb	r3, [r1, #0]
  p[0] = (packet_id_counter >> 8) & 0xFF;
   d4a2e:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d4a32:	0a1b      	lsrs	r3, r3, #8
   d4a34:	708b      	strb	r3, [r1, #2]
  p[1] = packet_id_counter & 0xFF;
   d4a36:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
   d4a3a:	70cb      	strb	r3, [r1, #3]
  packet_id_counter++;
   d4a3c:	f8b0 30b8 	ldrh.w	r3, [r0, #184]	; 0xb8
                                       uint8_t qos) {
   d4a40:	460c      	mov	r4, r1
  packet_id_counter++;
   d4a42:	3301      	adds	r3, #1
   d4a44:	f8a0 30b8 	strh.w	r3, [r0, #184]	; 0xb8
  p = stringprint(p, topic);
   d4a48:	4611      	mov	r1, r2
   d4a4a:	1d20      	adds	r0, r4, #4
   d4a4c:	f7ff fd8b 	bl	d4566 <_ZL11stringprintPhPKct.constprop.0>
  p[0] = qos;
   d4a50:	f800 5b01 	strb.w	r5, [r0], #1
  len = p - packet;
   d4a54:	1b00      	subs	r0, r0, r4
  packet[1] = len-2; // don't include the 2 bytes of fixed header data
   d4a56:	b2c0      	uxtb	r0, r0
   d4a58:	1e83      	subs	r3, r0, #2
   d4a5a:	7063      	strb	r3, [r4, #1]
}
   d4a5c:	bd38      	pop	{r3, r4, r5, pc}

000d4a5e <_ZN13Adafruit_MQTT7connectEv>:
int8_t Adafruit_MQTT::connect() {
   d4a5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!connectServer())
   d4a62:	6803      	ldr	r3, [r0, #0]
   d4a64:	68db      	ldr	r3, [r3, #12]
int8_t Adafruit_MQTT::connect() {
   d4a66:	4604      	mov	r4, r0
  if (!connectServer())
   d4a68:	4798      	blx	r3
   d4a6a:	2800      	cmp	r0, #0
   d4a6c:	d04b      	beq.n	d4b06 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  uint8_t len = connectPacket(buffer);
   d4a6e:	f104 0522 	add.w	r5, r4, #34	; 0x22
   d4a72:	4629      	mov	r1, r5
   d4a74:	4620      	mov	r0, r4
   d4a76:	f7ff feed 	bl	d4854 <_ZN13Adafruit_MQTT13connectPacketEPh>
  if (!sendPacket(buffer, len))
   d4a7a:	6823      	ldr	r3, [r4, #0]
   d4a7c:	b282      	uxth	r2, r0
   d4a7e:	695b      	ldr	r3, [r3, #20]
   d4a80:	4629      	mov	r1, r5
   d4a82:	4620      	mov	r0, r4
   d4a84:	4798      	blx	r3
   d4a86:	2800      	cmp	r0, #0
   d4a88:	d03d      	beq.n	d4b06 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  len = readFullPacket(buffer, MAXBUFFERSIZE, CONNECT_TIMEOUT_MS);
   d4a8a:	f241 7370 	movw	r3, #6000	; 0x1770
   d4a8e:	2296      	movs	r2, #150	; 0x96
   d4a90:	4629      	mov	r1, r5
   d4a92:	4620      	mov	r0, r4
   d4a94:	f7ff fd96 	bl	d45c4 <_ZN13Adafruit_MQTT14readFullPacketEPhtt>
  if (len != 4)
   d4a98:	b2c0      	uxtb	r0, r0
   d4a9a:	2804      	cmp	r0, #4
   d4a9c:	d133      	bne.n	d4b06 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if ((buffer[0] != (MQTT_CTRL_CONNECTACK << 4)) || (buffer[1] != 2))
   d4a9e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4aa0:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
   d4aa4:	d12f      	bne.n	d4b06 <_ZN13Adafruit_MQTT7connectEv+0xa8>
  if (buffer[3] != 0)
   d4aa6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   d4aaa:	b110      	cbz	r0, d4ab2 <_ZN13Adafruit_MQTT7connectEv+0x54>
    return buffer[3];
   d4aac:	b240      	sxtb	r0, r0
}
   d4aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4ab2:	f104 07bc 	add.w	r7, r4, #188	; 0xbc
   d4ab6:	f104 08d0 	add.w	r8, r4, #208	; 0xd0
    if (subscriptions[i] == 0) continue;
   d4aba:	f857 3b04 	ldr.w	r3, [r7], #4
   d4abe:	b1f3      	cbz	r3, d4afe <_ZN13Adafruit_MQTT7connectEv+0xa0>
   d4ac0:	2603      	movs	r6, #3
      uint8_t len = subscribePacket(buffer, subscriptions[i]->topic, subscriptions[i]->qos);
   d4ac2:	f857 2c04 	ldr.w	r2, [r7, #-4]
   d4ac6:	4629      	mov	r1, r5
   d4ac8:	7913      	ldrb	r3, [r2, #4]
   d4aca:	6812      	ldr	r2, [r2, #0]
   d4acc:	4620      	mov	r0, r4
   d4ace:	f7ff ffaa 	bl	d4a26 <_ZN13Adafruit_MQTT15subscribePacketEPhPKch>
      if (!sendPacket(buffer, len))
   d4ad2:	6823      	ldr	r3, [r4, #0]
   d4ad4:	b282      	uxth	r2, r0
   d4ad6:	695b      	ldr	r3, [r3, #20]
   d4ad8:	4629      	mov	r1, r5
   d4ada:	4620      	mov	r0, r4
   d4adc:	4798      	blx	r3
   d4ade:	b190      	cbz	r0, d4b06 <_ZN13Adafruit_MQTT7connectEv+0xa8>
      if (processPacketsUntil(buffer, MQTT_CTRL_SUBACK, SUBACK_TIMEOUT_MS)) {
   d4ae0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4ae4:	2209      	movs	r2, #9
   d4ae6:	4629      	mov	r1, r5
   d4ae8:	4620      	mov	r0, r4
   d4aea:	f7ff fdb7 	bl	d465c <_ZN13Adafruit_MQTT19processPacketsUntilEPhht>
   d4aee:	b930      	cbnz	r0, d4afe <_ZN13Adafruit_MQTT7connectEv+0xa0>
    for (uint8_t retry=0; (retry<3) && !success; retry++) { // retry until we get a suback    
   d4af0:	3e01      	subs	r6, #1
   d4af2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d4af6:	d1e4      	bne.n	d4ac2 <_ZN13Adafruit_MQTT7connectEv+0x64>
    if (! success) return -2; // failed to sub for some reason
   d4af8:	f06f 0001 	mvn.w	r0, #1
   d4afc:	e7d7      	b.n	d4aae <_ZN13Adafruit_MQTT7connectEv+0x50>
  for (uint8_t i=0; i<MAXSUBSCRIPTIONS; i++) {
   d4afe:	45b8      	cmp	r8, r7
   d4b00:	d1db      	bne.n	d4aba <_ZN13Adafruit_MQTT7connectEv+0x5c>
  return 0;
   d4b02:	2000      	movs	r0, #0
   d4b04:	e7d3      	b.n	d4aae <_ZN13Adafruit_MQTT7connectEv+0x50>
    return -1;
   d4b06:	f04f 30ff 	mov.w	r0, #4294967295
   d4b0a:	e7d0      	b.n	d4aae <_ZN13Adafruit_MQTT7connectEv+0x50>

000d4b0c <_ZN21Adafruit_MQTT_PublishC1EP13Adafruit_MQTTPKch>:
  return 2;
}

// Adafruit_MQTT_Publish Definition ////////////////////////////////////////////

Adafruit_MQTT_Publish::Adafruit_MQTT_Publish(Adafruit_MQTT *mqttserver,
   d4b0c:	b510      	push	{r4, lr}
                                             const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
   d4b0e:	e9c0 1200 	strd	r1, r2, [r0]
  qos = q;
   d4b12:	7203      	strb	r3, [r0, #8]
}
   d4b14:	bd10      	pop	{r4, pc}
	...

000d4b18 <_ZN21Adafruit_MQTT_Publish7publishEdh>:
  char payload[11];
  ultoa(i, payload, 10);
  return mqtt->publish(topic, payload, qos);
}

bool Adafruit_MQTT_Publish::publish(double f, uint8_t precision) {
   d4b18:	b5d0      	push	{r4, r6, r7, lr}
   d4b1a:	ec57 6b10 	vmov	r6, r7, d0
   d4b1e:	b090      	sub	sp, #64	; 0x40
   d4b20:	4604      	mov	r4, r0
   d4b22:	460b      	mov	r3, r1
  sprintf(fmt, "%%%d.%df", width, prec);
   d4b24:	2200      	movs	r2, #0
   d4b26:	4909      	ldr	r1, [pc, #36]	; (d4b4c <_ZN21Adafruit_MQTT_Publish7publishEdh+0x34>)
   d4b28:	4668      	mov	r0, sp
   d4b2a:	f000 f9db 	bl	d4ee4 <sprintf>
  sprintf(sout, fmt, val);
   d4b2e:	4632      	mov	r2, r6
   d4b30:	463b      	mov	r3, r7
   d4b32:	4669      	mov	r1, sp
   d4b34:	a805      	add	r0, sp, #20
   d4b36:	f000 f9d5 	bl	d4ee4 <sprintf>
  char payload[41];  // Need to technically hold float max, 39 digits and minus sign.
  dtostrf(f, 0, precision, payload);
  return mqtt->publish(topic, payload, qos);
   d4b3a:	e9d4 0100 	ldrd	r0, r1, [r4]
   d4b3e:	7a23      	ldrb	r3, [r4, #8]
   d4b40:	aa05      	add	r2, sp, #20
   d4b42:	f7ff ff5e 	bl	d4a02 <_ZN13Adafruit_MQTT7publishEPKcS1_h>
}
   d4b46:	b010      	add	sp, #64	; 0x40
   d4b48:	bdd0      	pop	{r4, r6, r7, pc}
   d4b4a:	bf00      	nop
   d4b4c:	000d8948 	.word	0x000d8948

000d4b50 <_ZN23Adafruit_MQTT_SubscribeC1EP13Adafruit_MQTTPKch>:
}


// Adafruit_MQTT_Subscribe Definition //////////////////////////////////////////

Adafruit_MQTT_Subscribe::Adafruit_MQTT_Subscribe(Adafruit_MQTT *mqttserver,
   d4b50:	b510      	push	{r4, lr}
                                                 const char *feed, uint8_t q) {
  mqtt = mqttserver;
  topic = feed;
  qos = q;
   d4b52:	7103      	strb	r3, [r0, #4]
  datalen = 0;
   d4b54:	2300      	movs	r3, #0
  callback_uint32t = 0;
  callback_buffer = 0;
  callback_double = 0;
   d4b56:	e9c0 3308 	strd	r3, r3, [r0, #32]
  callback_io = 0;
   d4b5a:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  mqtt = mqttserver;
   d4b5e:	6341      	str	r1, [r0, #52]	; 0x34
  topic = feed;
   d4b60:	6002      	str	r2, [r0, #0]
  datalen = 0;
   d4b62:	8343      	strh	r3, [r0, #26]
  callback_uint32t = 0;
   d4b64:	61c3      	str	r3, [r0, #28]
  io_feed = 0;
   d4b66:	6303      	str	r3, [r0, #48]	; 0x30
}
   d4b68:	bd10      	pop	{r4, pc}
	...

000d4b6c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <netdb_freeaddrinfo+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	689b      	ldr	r3, [r3, #8]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	00030268 	.word	0x00030268

000d4b7c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <netdb_getaddrinfo+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	68db      	ldr	r3, [r3, #12]
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	00030268 	.word	0x00030268

000d4b8c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <if_index_to_name+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	695b      	ldr	r3, [r3, #20]
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	0003026c 	.word	0x0003026c

000d4b9c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <HAL_RNG_GetRandomNumber+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	685b      	ldr	r3, [r3, #4]
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	00030218 	.word	0x00030218

000d4bac <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <HAL_Delay_Microseconds+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	68db      	ldr	r3, [r3, #12]
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	00030218 	.word	0x00030218

000d4bbc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	695b      	ldr	r3, [r3, #20]
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	00030218 	.word	0x00030218

000d4bcc <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <hal_timer_millis+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	00030218 	.word	0x00030218

000d4bdc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <os_mutex_recursive_create+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030248 	.word	0x00030248

000d4bec <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <os_mutex_recursive_destroy+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030248 	.word	0x00030248

000d4bfc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <inet_inet_ntop+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	695b      	ldr	r3, [r3, #20]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030264 	.word	0x00030264

000d4c0c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <inet_htonl+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	6a1b      	ldr	r3, [r3, #32]
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030264 	.word	0x00030264

000d4c1c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <inet_htons+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030264 	.word	0x00030264

000d4c2c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <hal_usart_init+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	681b      	ldr	r3, [r3, #0]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	0003023c 	.word	0x0003023c

000d4c3c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <hal_usart_write+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	68db      	ldr	r3, [r3, #12]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	0003023c 	.word	0x0003023c

000d4c4c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <hal_usart_available+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	691b      	ldr	r3, [r3, #16]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	0003023c 	.word	0x0003023c

000d4c5c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <hal_usart_read+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	695b      	ldr	r3, [r3, #20]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	0003023c 	.word	0x0003023c

000d4c6c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <hal_usart_peek+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	699b      	ldr	r3, [r3, #24]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	0003023c 	.word	0x0003023c

000d4c7c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <hal_usart_flush+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	69db      	ldr	r3, [r3, #28]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	0003023c 	.word	0x0003023c

000d4c8c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <hal_usart_available_data_for_write+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	0003023c 	.word	0x0003023c

000d4c9c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <sock_setsockopt+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	699b      	ldr	r3, [r3, #24]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030238 	.word	0x00030238

000d4cac <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <sock_close+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	69db      	ldr	r3, [r3, #28]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030238 	.word	0x00030238

000d4cbc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <sock_connect+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	6a1b      	ldr	r3, [r3, #32]
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030238 	.word	0x00030238

000d4ccc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <sock_recv+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030238 	.word	0x00030238

000d4cdc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <sock_send+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030238 	.word	0x00030238

000d4cec <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <sock_socket+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030238 	.word	0x00030238

000d4cfc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <HAL_USB_USART_Init+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	681b      	ldr	r3, [r3, #0]
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	0003024c 	.word	0x0003024c

000d4d0c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <HAL_USB_USART_Begin+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	685b      	ldr	r3, [r3, #4]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	0003024c 	.word	0x0003024c

000d4d1c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <HAL_USB_USART_Available_Data+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	691b      	ldr	r3, [r3, #16]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	0003024c 	.word	0x0003024c

000d4d2c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	695b      	ldr	r3, [r3, #20]
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	0003024c 	.word	0x0003024c

000d4d3c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <HAL_USB_USART_Receive_Data+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	699b      	ldr	r3, [r3, #24]
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	0003024c 	.word	0x0003024c

000d4d4c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <HAL_USB_USART_Send_Data+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	69db      	ldr	r3, [r3, #28]
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	0003024c 	.word	0x0003024c

000d4d5c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <HAL_USB_USART_Flush_Data+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	6a1b      	ldr	r3, [r3, #32]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	0003024c 	.word	0x0003024c

000d4d6c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <HAL_USB_USART_Is_Connected+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	0003024c 	.word	0x0003024c

000d4d7c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <panic_+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	00030260 	.word	0x00030260

000d4d8c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <log_message+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	00030260 	.word	0x00030260

000d4d9c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <set_system_mode+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	685b      	ldr	r3, [r3, #4]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	00030220 	.word	0x00030220

000d4dac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <system_delay_ms+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	695b      	ldr	r3, [r3, #20]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	00030220 	.word	0x00030220

000d4dbc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b03      	ldr	r3, [pc, #12]	; (d4dcc <system_ctrl_set_app_request_handler+0x10>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4dc6:	9301      	str	r3, [sp, #4]
   d4dc8:	bd08      	pop	{r3, pc}
   d4dca:	0000      	.short	0x0000
   d4dcc:	00030220 	.word	0x00030220

000d4dd0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4dd0:	b508      	push	{r3, lr}
   d4dd2:	4b03      	ldr	r3, [pc, #12]	; (d4de0 <system_ctrl_set_result+0x10>)
   d4dd4:	681b      	ldr	r3, [r3, #0]
   d4dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4dda:	9301      	str	r3, [sp, #4]
   d4ddc:	bd08      	pop	{r3, pc}
   d4dde:	0000      	.short	0x0000
   d4de0:	00030220 	.word	0x00030220

000d4de4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <network_connect+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	685b      	ldr	r3, [r3, #4]
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	00030240 	.word	0x00030240

000d4df4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <network_connecting+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	689b      	ldr	r3, [r3, #8]
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030240 	.word	0x00030240

000d4e04 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <network_disconnect+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	68db      	ldr	r3, [r3, #12]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030240 	.word	0x00030240

000d4e14 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <network_ready+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	691b      	ldr	r3, [r3, #16]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030240 	.word	0x00030240

000d4e24 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <network_on+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	695b      	ldr	r3, [r3, #20]
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030240 	.word	0x00030240

000d4e34 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <network_off+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	699b      	ldr	r3, [r3, #24]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	00030240 	.word	0x00030240

000d4e44 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <network_listen+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	69db      	ldr	r3, [r3, #28]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030240 	.word	0x00030240

000d4e54 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <network_listening+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	6a1b      	ldr	r3, [r3, #32]
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030240 	.word	0x00030240

000d4e64 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <network_set_listen_timeout+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030240 	.word	0x00030240

000d4e74 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <network_get_listen_timeout+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030240 	.word	0x00030240

000d4e84 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <network_is_on+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030240 	.word	0x00030240

000d4e94 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <network_is_off+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030240 	.word	0x00030240

000d4ea4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <spark_process+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	689b      	ldr	r3, [r3, #8]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030244 	.word	0x00030244

000d4eb4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030244 	.word	0x00030244

000d4ec4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <malloc+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	681b      	ldr	r3, [r3, #0]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	0003021c 	.word	0x0003021c

000d4ed4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <free+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	685b      	ldr	r3, [r3, #4]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	0003021c 	.word	0x0003021c

000d4ee4 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <sprintf+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	68db      	ldr	r3, [r3, #12]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	0003021c 	.word	0x0003021c

000d4ef4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <vsnprintf+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	0003021c 	.word	0x0003021c

000d4f04 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <_malloc_r+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	0003021c 	.word	0x0003021c

000d4f14 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <__errno+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	0003021c 	.word	0x0003021c

000d4f24 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <newlib_impure_ptr_callback+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	0003021c 	.word	0x0003021c

000d4f34 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f34:	2200      	movs	r2, #0
   d4f36:	6840      	ldr	r0, [r0, #4]
   d4f38:	4611      	mov	r1, r2
   d4f3a:	f7ff bf8b 	b.w	d4e54 <network_listening>

000d4f3e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4f3e:	2200      	movs	r2, #0
   d4f40:	6840      	ldr	r0, [r0, #4]
   d4f42:	4611      	mov	r1, r2
   d4f44:	f7ff bf96 	b.w	d4e74 <network_get_listen_timeout>

000d4f48 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4f48:	6840      	ldr	r0, [r0, #4]
   d4f4a:	2200      	movs	r2, #0
   d4f4c:	f7ff bf8a 	b.w	d4e64 <network_set_listen_timeout>

000d4f50 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f50:	6840      	ldr	r0, [r0, #4]
   d4f52:	2200      	movs	r2, #0
   d4f54:	f081 0101 	eor.w	r1, r1, #1
   d4f58:	f7ff bf74 	b.w	d4e44 <network_listen>

000d4f5c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4f5c:	2300      	movs	r3, #0
   d4f5e:	6840      	ldr	r0, [r0, #4]
   d4f60:	461a      	mov	r2, r3
   d4f62:	4619      	mov	r1, r3
   d4f64:	f7ff bf66 	b.w	d4e34 <network_off>

000d4f68 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4f68:	2300      	movs	r3, #0
   d4f6a:	6840      	ldr	r0, [r0, #4]
   d4f6c:	461a      	mov	r2, r3
   d4f6e:	4619      	mov	r1, r3
   d4f70:	f7ff bf58 	b.w	d4e24 <network_on>

000d4f74 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f74:	2200      	movs	r2, #0
   d4f76:	6840      	ldr	r0, [r0, #4]
   d4f78:	4611      	mov	r1, r2
   d4f7a:	f7ff bf4b 	b.w	d4e14 <network_ready>

000d4f7e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4f7e:	2200      	movs	r2, #0
   d4f80:	6840      	ldr	r0, [r0, #4]
   d4f82:	4611      	mov	r1, r2
   d4f84:	f7ff bf36 	b.w	d4df4 <network_connecting>

000d4f88 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f88:	6840      	ldr	r0, [r0, #4]
   d4f8a:	2200      	movs	r2, #0
   d4f8c:	2102      	movs	r1, #2
   d4f8e:	f7ff bf39 	b.w	d4e04 <network_disconnect>

000d4f92 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4f92:	2300      	movs	r3, #0
   d4f94:	6840      	ldr	r0, [r0, #4]
   d4f96:	461a      	mov	r2, r3
   d4f98:	f7ff bf24 	b.w	d4de4 <network_connect>

000d4f9c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4f9c:	4b02      	ldr	r3, [pc, #8]	; (d4fa8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4f9e:	2203      	movs	r2, #3
   d4fa0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4fa2:	4a02      	ldr	r2, [pc, #8]	; (d4fac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4fa4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4fa6:	4770      	bx	lr
   d4fa8:	2003e668 	.word	0x2003e668
   d4fac:	000d8b60 	.word	0x000d8b60

000d4fb0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4fb0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4fb2:	4b09      	ldr	r3, [pc, #36]	; (d4fd8 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4fb4:	4c09      	ldr	r4, [pc, #36]	; (d4fdc <_GLOBAL__sub_I_System+0x2c>)
   d4fb6:	2202      	movs	r2, #2
   d4fb8:	2000      	movs	r0, #0
   d4fba:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4fbc:	4b08      	ldr	r3, [pc, #32]	; (d4fe0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4fbe:	6020      	str	r0, [r4, #0]
   d4fc0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4fc2:	71a0      	strb	r0, [r4, #6]
   d4fc4:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4fc6:	f7ff fee9 	bl	d4d9c <set_system_mode>
SystemClass System;
   d4fca:	4620      	mov	r0, r4
   d4fcc:	4a05      	ldr	r2, [pc, #20]	; (d4fe4 <_GLOBAL__sub_I_System+0x34>)
   d4fce:	4906      	ldr	r1, [pc, #24]	; (d4fe8 <_GLOBAL__sub_I_System+0x38>)
   d4fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4fd4:	f000 beea 	b.w	d5dac <__aeabi_atexit>
   d4fd8:	2003e67c 	.word	0x2003e67c
   d4fdc:	2003e670 	.word	0x2003e670
   d4fe0:	ffff0000 	.word	0xffff0000
   d4fe4:	2003e514 	.word	0x2003e514
   d4fe8:	000d40fd 	.word	0x000d40fd

000d4fec <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d4fec:	b570      	push	{r4, r5, r6, lr}
   d4fee:	b086      	sub	sp, #24
   d4ff0:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d4ff2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d4ff4:	4668      	mov	r0, sp
   d4ff6:	f000 fa01 	bl	d53fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d4ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4ffc:	1d34      	adds	r4, r6, #4
   d4ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5000:	682b      	ldr	r3, [r5, #0]
   d5002:	7023      	strb	r3, [r4, #0]
    }
   d5004:	4630      	mov	r0, r6
   d5006:	b006      	add	sp, #24
   d5008:	bd70      	pop	{r4, r5, r6, pc}

000d500a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d500a:	b510      	push	{r4, lr}
   d500c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d500e:	6800      	ldr	r0, [r0, #0]
   d5010:	b108      	cbz	r0, d5016 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5012:	f7ff fdeb 	bl	d4bec <os_mutex_recursive_destroy>
    }
   d5016:	4620      	mov	r0, r4
   d5018:	bd10      	pop	{r4, pc}

000d501a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d501a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d501c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d501e:	4604      	mov	r4, r0
      if (_M_manager)
   d5020:	b113      	cbz	r3, d5028 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5022:	2203      	movs	r2, #3
   d5024:	4601      	mov	r1, r0
   d5026:	4798      	blx	r3
    }
   d5028:	4620      	mov	r0, r4
   d502a:	bd10      	pop	{r4, pc}

000d502c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d502c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d502e:	4c06      	ldr	r4, [pc, #24]	; (d5048 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5030:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5032:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5034:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5036:	f7ff fdd1 	bl	d4bdc <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d503a:	4620      	mov	r0, r4
   d503c:	4a03      	ldr	r2, [pc, #12]	; (d504c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d503e:	4904      	ldr	r1, [pc, #16]	; (d5050 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5044:	f000 beb2 	b.w	d5dac <__aeabi_atexit>
   d5048:	2003e680 	.word	0x2003e680
   d504c:	2003e514 	.word	0x2003e514
   d5050:	000d500b 	.word	0x000d500b

000d5054 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5056:	4606      	mov	r6, r0
   d5058:	460d      	mov	r5, r1
  size_t n = 0;
   d505a:	188f      	adds	r7, r1, r2
   d505c:	2400      	movs	r4, #0
  while (size--) {
   d505e:	42bd      	cmp	r5, r7
   d5060:	d00c      	beq.n	d507c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5062:	6833      	ldr	r3, [r6, #0]
   d5064:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5068:	689b      	ldr	r3, [r3, #8]
   d506a:	4630      	mov	r0, r6
   d506c:	4798      	blx	r3
     if (chunk>=0)
   d506e:	1e03      	subs	r3, r0, #0
   d5070:	db01      	blt.n	d5076 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5072:	441c      	add	r4, r3
  while (size--) {
   d5074:	e7f3      	b.n	d505e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5076:	2c00      	cmp	r4, #0
   d5078:	bf08      	it	eq
   d507a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d507c:	4620      	mov	r0, r4
   d507e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5080 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5080:	b513      	push	{r0, r1, r4, lr}
   d5082:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5084:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5086:	b159      	cbz	r1, d50a0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5088:	9101      	str	r1, [sp, #4]
   d508a:	f001 fd39 	bl	d6b00 <strlen>
   d508e:	6823      	ldr	r3, [r4, #0]
   d5090:	9901      	ldr	r1, [sp, #4]
   d5092:	68db      	ldr	r3, [r3, #12]
   d5094:	4602      	mov	r2, r0
   d5096:	4620      	mov	r0, r4
    }
   d5098:	b002      	add	sp, #8
   d509a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d509e:	4718      	bx	r3
    }
   d50a0:	b002      	add	sp, #8
   d50a2:	bd10      	pop	{r4, pc}

000d50a4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d50a4:	b508      	push	{r3, lr}
  return write(str);
   d50a6:	f7ff ffeb 	bl	d5080 <_ZN5Print5writeEPKc>
}
   d50aa:	bd08      	pop	{r3, pc}

000d50ac <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d50ac:	6803      	ldr	r3, [r0, #0]
   d50ae:	689b      	ldr	r3, [r3, #8]
   d50b0:	4718      	bx	r3

000d50b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d50b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d50b4:	210d      	movs	r1, #13
{
   d50b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d50b8:	f7ff fff8 	bl	d50ac <_ZN5Print5printEc>
  n += print('\n');
   d50bc:	210a      	movs	r1, #10
  size_t n = print('\r');
   d50be:	4604      	mov	r4, r0
  n += print('\n');
   d50c0:	4628      	mov	r0, r5
   d50c2:	f7ff fff3 	bl	d50ac <_ZN5Print5printEc>
  return n;
}
   d50c6:	4420      	add	r0, r4
   d50c8:	bd38      	pop	{r3, r4, r5, pc}

000d50ca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d50ca:	b538      	push	{r3, r4, r5, lr}
   d50cc:	4605      	mov	r5, r0
  return write(str);
   d50ce:	f7ff ffd7 	bl	d5080 <_ZN5Print5writeEPKc>
   d50d2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d50d4:	4628      	mov	r0, r5
   d50d6:	f7ff ffec 	bl	d50b2 <_ZN5Print7printlnEv>
  return n;
}
   d50da:	4420      	add	r0, r4
   d50dc:	bd38      	pop	{r3, r4, r5, pc}

000d50de <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d50de:	b530      	push	{r4, r5, lr}
   d50e0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d50e2:	2300      	movs	r3, #0
   d50e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d50e8:	2a01      	cmp	r2, #1
   d50ea:	bf98      	it	ls
   d50ec:	220a      	movls	r2, #10
   d50ee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d50f0:	460d      	mov	r5, r1
   d50f2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d50f6:	fb01 5312 	mls	r3, r1, r2, r5
   d50fa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d50fe:	2b09      	cmp	r3, #9
   d5100:	bf94      	ite	ls
   d5102:	3330      	addls	r3, #48	; 0x30
   d5104:	3337      	addhi	r3, #55	; 0x37
   d5106:	b2db      	uxtb	r3, r3
  } while(n);
   d5108:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d510a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d510e:	d9ef      	bls.n	d50f0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5110:	4621      	mov	r1, r4
   d5112:	f7ff ffb5 	bl	d5080 <_ZN5Print5writeEPKc>
}
   d5116:	b00b      	add	sp, #44	; 0x2c
   d5118:	bd30      	pop	{r4, r5, pc}

000d511a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d511a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d511e:	b086      	sub	sp, #24
   d5120:	af00      	add	r7, sp, #0
   d5122:	4605      	mov	r5, r0
   d5124:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5126:	1d38      	adds	r0, r7, #4
   d5128:	2114      	movs	r1, #20
{
   d512a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d512c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d512e:	f7ff fee1 	bl	d4ef4 <vsnprintf>

    if (n<bufsize)
   d5132:	2813      	cmp	r0, #19
   d5134:	d80e      	bhi.n	d5154 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5136:	1d39      	adds	r1, r7, #4
   d5138:	4628      	mov	r0, r5
   d513a:	f7ff ffa1 	bl	d5080 <_ZN5Print5writeEPKc>
   d513e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5140:	b11e      	cbz	r6, d514a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5142:	4628      	mov	r0, r5
   d5144:	f7ff ffb5 	bl	d50b2 <_ZN5Print7printlnEv>
   d5148:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d514a:	4620      	mov	r0, r4
   d514c:	3718      	adds	r7, #24
   d514e:	46bd      	mov	sp, r7
   d5150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5154:	f100 0308 	add.w	r3, r0, #8
   d5158:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d515c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d515e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5162:	4622      	mov	r2, r4
   d5164:	1c41      	adds	r1, r0, #1
   d5166:	683b      	ldr	r3, [r7, #0]
   d5168:	4668      	mov	r0, sp
   d516a:	f7ff fec3 	bl	d4ef4 <vsnprintf>
  return write(str);
   d516e:	4669      	mov	r1, sp
   d5170:	4628      	mov	r0, r5
   d5172:	f7ff ff85 	bl	d5080 <_ZN5Print5writeEPKc>
   d5176:	4604      	mov	r4, r0
   d5178:	46c5      	mov	sp, r8
   d517a:	e7e1      	b.n	d5140 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d517c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d517c:	2300      	movs	r3, #0
   d517e:	6840      	ldr	r0, [r0, #4]
   d5180:	461a      	mov	r2, r3
   d5182:	4619      	mov	r1, r3
   d5184:	f7ff be4e 	b.w	d4e24 <network_on>

000d5188 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5188:	4b01      	ldr	r3, [pc, #4]	; (d5190 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d518a:	4a02      	ldr	r2, [pc, #8]	; (d5194 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d518c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d518e:	4770      	bx	lr
   d5190:	2003e684 	.word	0x2003e684
   d5194:	000d8b9c 	.word	0x000d8b9c

000d5198 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5198:	4b02      	ldr	r3, [pc, #8]	; (d51a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d519a:	681a      	ldr	r2, [r3, #0]
   d519c:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d519e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d51a0:	4770      	bx	lr
   d51a2:	bf00      	nop
   d51a4:	2003e33c 	.word	0x2003e33c
   d51a8:	2003e688 	.word	0x2003e688

000d51ac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d51ac:	2100      	movs	r1, #0
   d51ae:	f7ff bdfd 	b.w	d4dac <system_delay_ms>

000d51b2 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d51b2:	b510      	push	{r4, lr}
   d51b4:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d51b6:	f7ff ff30 	bl	d501a <_ZNSt14_Function_baseD1Ev>
   d51ba:	4620      	mov	r0, r4
   d51bc:	bd10      	pop	{r4, pc}
	...

000d51c0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d51c0:	4803      	ldr	r0, [pc, #12]	; (d51d0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d51c2:	4a04      	ldr	r2, [pc, #16]	; (d51d4 <_GLOBAL__sub_I_RGB+0x14>)
   d51c4:	4904      	ldr	r1, [pc, #16]	; (d51d8 <_GLOBAL__sub_I_RGB+0x18>)
   d51c6:	2300      	movs	r3, #0
   d51c8:	6083      	str	r3, [r0, #8]
   d51ca:	f000 bdef 	b.w	d5dac <__aeabi_atexit>
   d51ce:	bf00      	nop
   d51d0:	2003e68c 	.word	0x2003e68c
   d51d4:	2003e514 	.word	0x2003e514
   d51d8:	000d51b3 	.word	0x000d51b3

000d51dc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d51dc:	4b01      	ldr	r3, [pc, #4]	; (d51e4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d51de:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d51e0:	4770      	bx	lr
   d51e2:	bf00      	nop
   d51e4:	2003e340 	.word	0x2003e340

000d51e8 <serialEventRun>:
{
   d51e8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d51ea:	4b0b      	ldr	r3, [pc, #44]	; (d5218 <serialEventRun+0x30>)
   d51ec:	b143      	cbz	r3, d5200 <serialEventRun+0x18>
   d51ee:	f000 f975 	bl	d54dc <_Z16_fetch_usbserialv>
   d51f2:	6803      	ldr	r3, [r0, #0]
   d51f4:	691b      	ldr	r3, [r3, #16]
   d51f6:	4798      	blx	r3
   d51f8:	2800      	cmp	r0, #0
   d51fa:	dd01      	ble.n	d5200 <serialEventRun+0x18>
        serialEvent();
   d51fc:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5200:	4b06      	ldr	r3, [pc, #24]	; (d521c <serialEventRun+0x34>)
   d5202:	b143      	cbz	r3, d5216 <serialEventRun+0x2e>
   d5204:	f000 f9e8 	bl	d55d8 <_Z22__fetch_global_Serial1v>
   d5208:	6803      	ldr	r3, [r0, #0]
   d520a:	691b      	ldr	r3, [r3, #16]
   d520c:	4798      	blx	r3
   d520e:	2800      	cmp	r0, #0
   d5210:	dd01      	ble.n	d5216 <serialEventRun+0x2e>
        serialEvent1();
   d5212:	f3af 8000 	nop.w
}
   d5216:	bd08      	pop	{r3, pc}
	...

000d5220 <_post_loop>:
{
   d5220:	b508      	push	{r3, lr}
	serialEventRun();
   d5222:	f7ff ffe1 	bl	d51e8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5226:	f7ff fcc9 	bl	d4bbc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d522a:	4b01      	ldr	r3, [pc, #4]	; (d5230 <_post_loop+0x10>)
   d522c:	6018      	str	r0, [r3, #0]
}
   d522e:	bd08      	pop	{r3, pc}
   d5230:	2003e7ec 	.word	0x2003e7ec

000d5234 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5234:	4802      	ldr	r0, [pc, #8]	; (d5240 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5236:	4a03      	ldr	r2, [pc, #12]	; (d5244 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5238:	4903      	ldr	r1, [pc, #12]	; (d5248 <_Z33system_initialize_user_backup_ramv+0x14>)
   d523a:	1a12      	subs	r2, r2, r0
   d523c:	f001 bbc6 	b.w	d69cc <memcpy>
   d5240:	2003f400 	.word	0x2003f400
   d5244:	2003f404 	.word	0x2003f404
   d5248:	000d90b0 	.word	0x000d90b0

000d524c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d524c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d524e:	2300      	movs	r3, #0
   d5250:	9300      	str	r3, [sp, #0]
   d5252:	461a      	mov	r2, r3
   d5254:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5258:	f7ff fdba 	bl	d4dd0 <system_ctrl_set_result>
}
   d525c:	b003      	add	sp, #12
   d525e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5264 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5264:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5266:	8843      	ldrh	r3, [r0, #2]
   d5268:	2b0a      	cmp	r3, #10
   d526a:	d008      	beq.n	d527e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d526c:	2b50      	cmp	r3, #80	; 0x50
   d526e:	d10b      	bne.n	d5288 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5270:	4b09      	ldr	r3, [pc, #36]	; (d5298 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5272:	681b      	ldr	r3, [r3, #0]
   d5274:	b14b      	cbz	r3, d528a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5276:	b003      	add	sp, #12
   d5278:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d527c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d527e:	f7ff ffe5 	bl	d524c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5282:	b003      	add	sp, #12
   d5284:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5288:	2300      	movs	r3, #0
   d528a:	9300      	str	r3, [sp, #0]
   d528c:	461a      	mov	r2, r3
   d528e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5292:	f7ff fd9d 	bl	d4dd0 <system_ctrl_set_result>
}
   d5296:	e7f4      	b.n	d5282 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5298:	2003e6a0 	.word	0x2003e6a0

000d529c <module_user_init_hook>:
{
   d529c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d529e:	4c12      	ldr	r4, [pc, #72]	; (d52e8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d52a0:	4812      	ldr	r0, [pc, #72]	; (d52ec <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d52a2:	4d13      	ldr	r5, [pc, #76]	; (d52f0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d52a4:	2100      	movs	r1, #0
   d52a6:	f7ff fe3d 	bl	d4f24 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d52aa:	6823      	ldr	r3, [r4, #0]
   d52ac:	42ab      	cmp	r3, r5
   d52ae:	4b11      	ldr	r3, [pc, #68]	; (d52f4 <module_user_init_hook+0x58>)
   d52b0:	bf0c      	ite	eq
   d52b2:	2201      	moveq	r2, #1
   d52b4:	2200      	movne	r2, #0
   d52b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d52b8:	d002      	beq.n	d52c0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d52ba:	f7ff ffbb 	bl	d5234 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d52be:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d52c0:	f7ff fc6c 	bl	d4b9c <HAL_RNG_GetRandomNumber>
   d52c4:	4604      	mov	r4, r0
    srand(seed);
   d52c6:	f001 fbb1 	bl	d6a2c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d52ca:	4b0b      	ldr	r3, [pc, #44]	; (d52f8 <module_user_init_hook+0x5c>)
   d52cc:	b113      	cbz	r3, d52d4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d52ce:	4620      	mov	r0, r4
   d52d0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d52d4:	2100      	movs	r1, #0
   d52d6:	4808      	ldr	r0, [pc, #32]	; (d52f8 <module_user_init_hook+0x5c>)
   d52d8:	f7ff fdec 	bl	d4eb4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d52dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d52e0:	4806      	ldr	r0, [pc, #24]	; (d52fc <module_user_init_hook+0x60>)
   d52e2:	2100      	movs	r1, #0
   d52e4:	f7ff bd6a 	b.w	d4dbc <system_ctrl_set_app_request_handler>
   d52e8:	2003f400 	.word	0x2003f400
   d52ec:	000d51dd 	.word	0x000d51dd
   d52f0:	9a271c1e 	.word	0x9a271c1e
   d52f4:	2003e69c 	.word	0x2003e69c
   d52f8:	00000000 	.word	0x00000000
   d52fc:	000d5265 	.word	0x000d5265

000d5300 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d5300:	4770      	bx	lr

000d5302 <_ZN9IPAddressD0Ev>:
   d5302:	b510      	push	{r4, lr}
   d5304:	2118      	movs	r1, #24
   d5306:	4604      	mov	r4, r0
   d5308:	f000 fd55 	bl	d5db6 <_ZdlPvj>
   d530c:	4620      	mov	r0, r4
   d530e:	bd10      	pop	{r4, pc}

000d5310 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5310:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5312:	7d03      	ldrb	r3, [r0, #20]
   d5314:	2b06      	cmp	r3, #6
{
   d5316:	b08d      	sub	sp, #52	; 0x34
   d5318:	460e      	mov	r6, r1
   d531a:	f100 0704 	add.w	r7, r0, #4
   d531e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5322:	d012      	beq.n	d534a <_ZNK9IPAddress7printToER5Print+0x3a>
   d5324:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5328:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d532c:	220a      	movs	r2, #10
   d532e:	4630      	mov	r0, r6
   d5330:	f7ff fed5 	bl	d50de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5334:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5336:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5338:	d019      	beq.n	d536e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d533a:	2c00      	cmp	r4, #0
   d533c:	d0f4      	beq.n	d5328 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d533e:	212e      	movs	r1, #46	; 0x2e
   d5340:	4630      	mov	r0, r6
   d5342:	f7ff feb3 	bl	d50ac <_ZN5Print5printEc>
   d5346:	4404      	add	r4, r0
   d5348:	e7ee      	b.n	d5328 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d534a:	232f      	movs	r3, #47	; 0x2f
   d534c:	466a      	mov	r2, sp
   d534e:	4639      	mov	r1, r7
   d5350:	200a      	movs	r0, #10
		buf[0] = 0;
   d5352:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5356:	f7ff fc51 	bl	d4bfc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d535a:	4668      	mov	r0, sp
   d535c:	f001 fbd0 	bl	d6b00 <strlen>
   d5360:	6833      	ldr	r3, [r6, #0]
   d5362:	4602      	mov	r2, r0
   d5364:	68db      	ldr	r3, [r3, #12]
   d5366:	4669      	mov	r1, sp
   d5368:	4630      	mov	r0, r6
   d536a:	4798      	blx	r3
   d536c:	4604      	mov	r4, r0
    }
    return n;
}
   d536e:	4620      	mov	r0, r4
   d5370:	b00d      	add	sp, #52	; 0x34
   d5372:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5374 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5374:	b510      	push	{r4, lr}
   d5376:	4b05      	ldr	r3, [pc, #20]	; (d538c <_ZN9IPAddressC1Ev+0x18>)
   d5378:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d537a:	2211      	movs	r2, #17
   d537c:	f840 3b04 	str.w	r3, [r0], #4
   d5380:	2100      	movs	r1, #0
   d5382:	f001 fb4b 	bl	d6a1c <memset>
}
   d5386:	4620      	mov	r0, r4
   d5388:	bd10      	pop	{r4, pc}
   d538a:	bf00      	nop
   d538c:	000d8bc4 	.word	0x000d8bc4

000d5390 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5390:	4603      	mov	r3, r0
   d5392:	4a07      	ldr	r2, [pc, #28]	; (d53b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5394:	b510      	push	{r4, lr}
   d5396:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d539a:	f101 0210 	add.w	r2, r1, #16
   d539e:	f851 4b04 	ldr.w	r4, [r1], #4
   d53a2:	f843 4b04 	str.w	r4, [r3], #4
   d53a6:	4291      	cmp	r1, r2
   d53a8:	d1f9      	bne.n	d539e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d53aa:	780a      	ldrb	r2, [r1, #0]
   d53ac:	701a      	strb	r2, [r3, #0]
}
   d53ae:	bd10      	pop	{r4, pc}
   d53b0:	000d8bc4 	.word	0x000d8bc4

000d53b4 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d53b4:	7d03      	ldrb	r3, [r0, #20]
   d53b6:	2b04      	cmp	r3, #4
   d53b8:	d104      	bne.n	d53c4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d53ba:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d53bc:	3800      	subs	r0, #0
   d53be:	bf18      	it	ne
   d53c0:	2001      	movne	r0, #1
   d53c2:	4770      	bx	lr
    } else if (version() == 6) {
   d53c4:	2b06      	cmp	r3, #6
   d53c6:	d107      	bne.n	d53d8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d53c8:	6843      	ldr	r3, [r0, #4]
   d53ca:	b93b      	cbnz	r3, d53dc <_ZNK9IPAddresscvbEv+0x28>
   d53cc:	6883      	ldr	r3, [r0, #8]
   d53ce:	b92b      	cbnz	r3, d53dc <_ZNK9IPAddresscvbEv+0x28>
   d53d0:	68c3      	ldr	r3, [r0, #12]
   d53d2:	b91b      	cbnz	r3, d53dc <_ZNK9IPAddresscvbEv+0x28>
   d53d4:	6900      	ldr	r0, [r0, #16]
   d53d6:	e7f1      	b.n	d53bc <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d53d8:	2000      	movs	r0, #0
   d53da:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d53dc:	2001      	movs	r0, #1
}
   d53de:	4770      	bx	lr

000d53e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d53e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d53e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d53e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d53ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d53ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d53f2:	2304      	movs	r3, #4
   d53f4:	6041      	str	r1, [r0, #4]
   d53f6:	7503      	strb	r3, [r0, #20]
}
   d53f8:	bd10      	pop	{r4, pc}
	...

000d53fc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d53fc:	b513      	push	{r0, r1, r4, lr}
   d53fe:	4b05      	ldr	r3, [pc, #20]	; (d5414 <_ZN9IPAddressC1EPKh+0x18>)
   d5400:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d5402:	78cb      	ldrb	r3, [r1, #3]
   d5404:	9300      	str	r3, [sp, #0]
   d5406:	788b      	ldrb	r3, [r1, #2]
   d5408:	784a      	ldrb	r2, [r1, #1]
   d540a:	7809      	ldrb	r1, [r1, #0]
   d540c:	f7ff ffe8 	bl	d53e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5410:	b002      	add	sp, #8
   d5412:	bd10      	pop	{r4, pc}
   d5414:	000d8bc4 	.word	0x000d8bc4

000d5418 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5418:	7441      	strb	r1, [r0, #17]
}
   d541a:	4770      	bx	lr

000d541c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d541c:	4770      	bx	lr

000d541e <_ZN9USBSerial4readEv>:
{
   d541e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5420:	2100      	movs	r1, #0
   d5422:	7c00      	ldrb	r0, [r0, #16]
   d5424:	f7ff fc8a 	bl	d4d3c <HAL_USB_USART_Receive_Data>
}
   d5428:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d542c:	bd08      	pop	{r3, pc}

000d542e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d542e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5430:	2101      	movs	r1, #1
   d5432:	7c00      	ldrb	r0, [r0, #16]
   d5434:	f7ff fc82 	bl	d4d3c <HAL_USB_USART_Receive_Data>
}
   d5438:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d543c:	bd08      	pop	{r3, pc}

000d543e <_ZN9USBSerial17availableForWriteEv>:
{
   d543e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5440:	7c00      	ldrb	r0, [r0, #16]
   d5442:	f7ff fc73 	bl	d4d2c <HAL_USB_USART_Available_Data_For_Write>
}
   d5446:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d544a:	bd08      	pop	{r3, pc}

000d544c <_ZN9USBSerial9availableEv>:
{
   d544c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d544e:	7c00      	ldrb	r0, [r0, #16]
   d5450:	f7ff fc64 	bl	d4d1c <HAL_USB_USART_Available_Data>
}
   d5454:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5458:	bd08      	pop	{r3, pc}

000d545a <_ZN9USBSerial5writeEh>:
{
   d545a:	b513      	push	{r0, r1, r4, lr}
   d545c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d545e:	7c00      	ldrb	r0, [r0, #16]
{
   d5460:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5462:	f7ff fc63 	bl	d4d2c <HAL_USB_USART_Available_Data_For_Write>
   d5466:	2800      	cmp	r0, #0
   d5468:	9901      	ldr	r1, [sp, #4]
   d546a:	dc01      	bgt.n	d5470 <_ZN9USBSerial5writeEh+0x16>
   d546c:	7c60      	ldrb	r0, [r4, #17]
   d546e:	b120      	cbz	r0, d547a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5470:	7c20      	ldrb	r0, [r4, #16]
   d5472:	f7ff fc6b 	bl	d4d4c <HAL_USB_USART_Send_Data>
   d5476:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d547a:	b002      	add	sp, #8
   d547c:	bd10      	pop	{r4, pc}

000d547e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d547e:	7c00      	ldrb	r0, [r0, #16]
   d5480:	f7ff bc6c 	b.w	d4d5c <HAL_USB_USART_Flush_Data>

000d5484 <_ZN9USBSerialD0Ev>:
   d5484:	b510      	push	{r4, lr}
   d5486:	2114      	movs	r1, #20
   d5488:	4604      	mov	r4, r0
   d548a:	f000 fc94 	bl	d5db6 <_ZdlPvj>
   d548e:	4620      	mov	r0, r4
   d5490:	bd10      	pop	{r4, pc}
	...

000d5494 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5494:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d549a:	4604      	mov	r4, r0
   d549c:	4608      	mov	r0, r1
   d549e:	2100      	movs	r1, #0
   d54a0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d54a4:	4b04      	ldr	r3, [pc, #16]	; (d54b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d54a6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d54a8:	2301      	movs	r3, #1
  _serial = serial;
   d54aa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d54ac:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d54ae:	4611      	mov	r1, r2
   d54b0:	f7ff fc24 	bl	d4cfc <HAL_USB_USART_Init>
}
   d54b4:	4620      	mov	r0, r4
   d54b6:	bd10      	pop	{r4, pc}
   d54b8:	000d8bd8 	.word	0x000d8bd8

000d54bc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d54bc:	7c00      	ldrb	r0, [r0, #16]
   d54be:	2200      	movs	r2, #0
   d54c0:	f7ff bc24 	b.w	d4d0c <HAL_USB_USART_Begin>

000d54c4 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
   d54c4:	7c00      	ldrb	r0, [r0, #16]
   d54c6:	f7ff bc51 	b.w	d4d6c <HAL_USB_USART_Is_Connected>

000d54ca <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d54ca:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d54cc:	2214      	movs	r2, #20
{
   d54ce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d54d0:	2100      	movs	r1, #0
   d54d2:	f001 faa3 	bl	d6a1c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d54d6:	4620      	mov	r0, r4
   d54d8:	bd10      	pop	{r4, pc}
	...

000d54dc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d54dc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54de:	4c10      	ldr	r4, [pc, #64]	; (d5520 <_Z16_fetch_usbserialv+0x44>)
{
   d54e0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d54e2:	a803      	add	r0, sp, #12
   d54e4:	f7ff fff1 	bl	d54ca <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d54e8:	7821      	ldrb	r1, [r4, #0]
   d54ea:	f3bf 8f5b 	dmb	ish
   d54ee:	f011 0101 	ands.w	r1, r1, #1
   d54f2:	d111      	bne.n	d5518 <_Z16_fetch_usbserialv+0x3c>
   d54f4:	4620      	mov	r0, r4
   d54f6:	9101      	str	r1, [sp, #4]
   d54f8:	f7fe fddc 	bl	d40b4 <__cxa_guard_acquire>
   d54fc:	9901      	ldr	r1, [sp, #4]
   d54fe:	b158      	cbz	r0, d5518 <_Z16_fetch_usbserialv+0x3c>
   d5500:	aa03      	add	r2, sp, #12
   d5502:	4808      	ldr	r0, [pc, #32]	; (d5524 <_Z16_fetch_usbserialv+0x48>)
   d5504:	f7ff ffc6 	bl	d5494 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5508:	4620      	mov	r0, r4
   d550a:	f7fe fdd8 	bl	d40be <__cxa_guard_release>
   d550e:	4a06      	ldr	r2, [pc, #24]	; (d5528 <_Z16_fetch_usbserialv+0x4c>)
   d5510:	4906      	ldr	r1, [pc, #24]	; (d552c <_Z16_fetch_usbserialv+0x50>)
   d5512:	4804      	ldr	r0, [pc, #16]	; (d5524 <_Z16_fetch_usbserialv+0x48>)
   d5514:	f000 fc4a 	bl	d5dac <__aeabi_atexit>
	return _usbserial;
}
   d5518:	4802      	ldr	r0, [pc, #8]	; (d5524 <_Z16_fetch_usbserialv+0x48>)
   d551a:	b008      	add	sp, #32
   d551c:	bd10      	pop	{r4, pc}
   d551e:	bf00      	nop
   d5520:	2003e6a4 	.word	0x2003e6a4
   d5524:	2003e6a8 	.word	0x2003e6a8
   d5528:	2003e514 	.word	0x2003e514
   d552c:	000d541d 	.word	0x000d541d

000d5530 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5530:	4770      	bx	lr

000d5532 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5532:	7441      	strb	r1, [r0, #17]
}
   d5534:	4770      	bx	lr

000d5536 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5536:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5538:	7c00      	ldrb	r0, [r0, #16]
   d553a:	f7ff fba7 	bl	d4c8c <hal_usart_available_data_for_write>
}
   d553e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5542:	bd08      	pop	{r3, pc}

000d5544 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5544:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5546:	7c00      	ldrb	r0, [r0, #16]
   d5548:	f7ff fb80 	bl	d4c4c <hal_usart_available>
}
   d554c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5550:	bd08      	pop	{r3, pc}

000d5552 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5552:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5554:	7c00      	ldrb	r0, [r0, #16]
   d5556:	f7ff fb89 	bl	d4c6c <hal_usart_peek>
}
   d555a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d555e:	bd08      	pop	{r3, pc}

000d5560 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5560:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5562:	7c00      	ldrb	r0, [r0, #16]
   d5564:	f7ff fb7a 	bl	d4c5c <hal_usart_read>
}
   d5568:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d556c:	bd08      	pop	{r3, pc}

000d556e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d556e:	7c00      	ldrb	r0, [r0, #16]
   d5570:	f7ff bb84 	b.w	d4c7c <hal_usart_flush>

000d5574 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5574:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5576:	7c45      	ldrb	r5, [r0, #17]
{
   d5578:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d557a:	b12d      	cbz	r5, d5588 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d557c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d557e:	b003      	add	sp, #12
   d5580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5584:	f7ff bb5a 	b.w	d4c3c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5588:	7c00      	ldrb	r0, [r0, #16]
   d558a:	9101      	str	r1, [sp, #4]
   d558c:	f7ff fb7e 	bl	d4c8c <hal_usart_available_data_for_write>
   d5590:	2800      	cmp	r0, #0
   d5592:	9901      	ldr	r1, [sp, #4]
   d5594:	dcf2      	bgt.n	d557c <_ZN11USARTSerial5writeEh+0x8>
}
   d5596:	4628      	mov	r0, r5
   d5598:	b003      	add	sp, #12
   d559a:	bd30      	pop	{r4, r5, pc}

000d559c <_ZN11USARTSerialD0Ev>:
   d559c:	b510      	push	{r4, lr}
   d559e:	2114      	movs	r1, #20
   d55a0:	4604      	mov	r4, r0
   d55a2:	f000 fc08 	bl	d5db6 <_ZdlPvj>
   d55a6:	4620      	mov	r0, r4
   d55a8:	bd10      	pop	{r4, pc}
	...

000d55ac <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d55ac:	b510      	push	{r4, lr}
   d55ae:	f04f 0c00 	mov.w	ip, #0
   d55b2:	4604      	mov	r4, r0
   d55b4:	4608      	mov	r0, r1
   d55b6:	4611      	mov	r1, r2
   d55b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d55bc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d55c0:	4a04      	ldr	r2, [pc, #16]	; (d55d4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d55c2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d55c4:	2201      	movs	r2, #1
  _serial = serial;
   d55c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d55c8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d55ca:	461a      	mov	r2, r3
   d55cc:	f7ff fb2e 	bl	d4c2c <hal_usart_init>
}
   d55d0:	4620      	mov	r0, r4
   d55d2:	bd10      	pop	{r4, pc}
   d55d4:	000d8c08 	.word	0x000d8c08

000d55d8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d55d8:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d55da:	4c0e      	ldr	r4, [pc, #56]	; (d5614 <_Z22__fetch_global_Serial1v+0x3c>)
   d55dc:	7821      	ldrb	r1, [r4, #0]
   d55de:	f3bf 8f5b 	dmb	ish
   d55e2:	f011 0101 	ands.w	r1, r1, #1
   d55e6:	d112      	bne.n	d560e <_Z22__fetch_global_Serial1v+0x36>
   d55e8:	4620      	mov	r0, r4
   d55ea:	9101      	str	r1, [sp, #4]
   d55ec:	f7fe fd62 	bl	d40b4 <__cxa_guard_acquire>
   d55f0:	9901      	ldr	r1, [sp, #4]
   d55f2:	b160      	cbz	r0, d560e <_Z22__fetch_global_Serial1v+0x36>
   d55f4:	4a08      	ldr	r2, [pc, #32]	; (d5618 <_Z22__fetch_global_Serial1v+0x40>)
   d55f6:	4b09      	ldr	r3, [pc, #36]	; (d561c <_Z22__fetch_global_Serial1v+0x44>)
   d55f8:	4809      	ldr	r0, [pc, #36]	; (d5620 <_Z22__fetch_global_Serial1v+0x48>)
   d55fa:	f7ff ffd7 	bl	d55ac <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d55fe:	4620      	mov	r0, r4
   d5600:	f7fe fd5d 	bl	d40be <__cxa_guard_release>
   d5604:	4a07      	ldr	r2, [pc, #28]	; (d5624 <_Z22__fetch_global_Serial1v+0x4c>)
   d5606:	4908      	ldr	r1, [pc, #32]	; (d5628 <_Z22__fetch_global_Serial1v+0x50>)
   d5608:	4805      	ldr	r0, [pc, #20]	; (d5620 <_Z22__fetch_global_Serial1v+0x48>)
   d560a:	f000 fbcf 	bl	d5dac <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d560e:	4804      	ldr	r0, [pc, #16]	; (d5620 <_Z22__fetch_global_Serial1v+0x48>)
   d5610:	b002      	add	sp, #8
   d5612:	bd10      	pop	{r4, pc}
   d5614:	2003e6bc 	.word	0x2003e6bc
   d5618:	2003e6c0 	.word	0x2003e6c0
   d561c:	2003e744 	.word	0x2003e744
   d5620:	2003e7c8 	.word	0x2003e7c8
   d5624:	2003e514 	.word	0x2003e514
   d5628:	000d5531 	.word	0x000d5531

000d562c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d562c:	b510      	push	{r4, lr}
  if (0 == max) {
   d562e:	4604      	mov	r4, r0
   d5630:	b128      	cbz	r0, d563e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d5632:	f001 fa1f 	bl	d6a74 <rand>
   d5636:	fb90 f3f4 	sdiv	r3, r0, r4
   d563a:	fb03 0414 	mls	r4, r3, r4, r0
}
   d563e:	4620      	mov	r0, r4
   d5640:	bd10      	pop	{r4, pc}

000d5642 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d5642:	4288      	cmp	r0, r1
{
   d5644:	b510      	push	{r4, lr}
   d5646:	4604      	mov	r4, r0
  if (min >= max) {
   d5648:	da03      	bge.n	d5652 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d564a:	1a08      	subs	r0, r1, r0
   d564c:	f7ff ffee 	bl	d562c <_Z6randomi>
   d5650:	4404      	add	r4, r0
}
   d5652:	4620      	mov	r0, r4
   d5654:	bd10      	pop	{r4, pc}

000d5656 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5656:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5658:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d565a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d565e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5660:	2201      	movs	r2, #1
   d5662:	f04f 33ff 	mov.w	r3, #4294967295
   d5666:	f10d 0107 	add.w	r1, sp, #7
   d566a:	47a0      	blx	r4
}
   d566c:	b002      	add	sp, #8
   d566e:	bd10      	pop	{r4, pc}

000d5670 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5670:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5672:	6803      	ldr	r3, [r0, #0]
   d5674:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5676:	f04f 33ff 	mov.w	r3, #4294967295
   d567a:	46a4      	mov	ip, r4
}
   d567c:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5680:	4760      	bx	ip

000d5682 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5682:	b513      	push	{r0, r1, r4, lr}
   d5684:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d5686:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5688:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d568c:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d568e:	f10d 0107 	add.w	r1, sp, #7
   d5692:	2201      	movs	r2, #1
   d5694:	47a0      	blx	r4
}
   d5696:	b002      	add	sp, #8
   d5698:	bd10      	pop	{r4, pc}

000d569a <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d569a:	4770      	bx	lr

000d569c <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d569c:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d569e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d56a0:	681a      	ldr	r2, [r3, #0]
   d56a2:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d56a4:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d56a6:	da10      	bge.n	d56ca <_ZN9TCPClient9connectedEv+0x2e>
   d56a8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d56ac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d56b0:	429a      	cmp	r2, r3
   d56b2:	d10a      	bne.n	d56ca <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d56b4:	6803      	ldr	r3, [r0, #0]
   d56b6:	691b      	ldr	r3, [r3, #16]
   d56b8:	4798      	blx	r3
        if (!rv) {
   d56ba:	4604      	mov	r4, r0
   d56bc:	b928      	cbnz	r0, d56ca <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d56be:	682b      	ldr	r3, [r5, #0]
   d56c0:	4628      	mov	r0, r5
   d56c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d56c4:	4798      	blx	r3
        rv = available();
   d56c6:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d56c8:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d56ca:	2001      	movs	r0, #1
   d56cc:	e7fc      	b.n	d56c8 <_ZN9TCPClient9connectedEv+0x2c>

000d56ce <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d56ce:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d56d0:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d56d2:	43c0      	mvns	r0, r0
   d56d4:	0fc0      	lsrs	r0, r0, #31
   d56d6:	4770      	bx	lr

000d56d8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d56d8:	4770      	bx	lr
	...

000d56dc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d56dc:	4b06      	ldr	r3, [pc, #24]	; (d56f8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d56de:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d56e0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d56e2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d56e6:	d005      	beq.n	d56f4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d56e8:	4608      	mov	r0, r1
   d56ea:	f000 fb67 	bl	d5dbc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d56ee:	2800      	cmp	r0, #0
	return nullptr;
   d56f0:	bf08      	it	eq
   d56f2:	2400      	moveq	r4, #0
      }
   d56f4:	4620      	mov	r0, r4
   d56f6:	bd10      	pop	{r4, pc}
   d56f8:	000d8b94 	.word	0x000d8b94

000d56fc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d56fc:	b510      	push	{r4, lr}
   d56fe:	21ac      	movs	r1, #172	; 0xac
   d5700:	4604      	mov	r4, r0
   d5702:	f000 fb58 	bl	d5db6 <_ZdlPvj>
   d5706:	4620      	mov	r0, r4
   d5708:	bd10      	pop	{r4, pc}

000d570a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d570a:	f7fe bcc6 	b.w	d409a <_ZdlPv>

000d570e <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d570e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d5712:	f04f 0800 	mov.w	r8, #0
   d5716:	b086      	sub	sp, #24
   d5718:	461d      	mov	r5, r3
   d571a:	f8c0 8004 	str.w	r8, [r0, #4]
   d571e:	4604      	mov	r4, r0
   d5720:	460e      	mov	r6, r1
   d5722:	4617      	mov	r7, r2
    struct timeval tv = {};
   d5724:	4641      	mov	r1, r8
   d5726:	2210      	movs	r2, #16
   d5728:	a802      	add	r0, sp, #8
   d572a:	f001 f977 	bl	d6a1c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d572e:	1c6b      	adds	r3, r5, #1
   d5730:	d009      	beq.n	d5746 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d5732:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d5736:	fbb5 f3f0 	udiv	r3, r5, r0
   d573a:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d573e:	fb00 5313 	mls	r3, r0, r3, r5
   d5742:	4358      	muls	r0, r3
   d5744:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d5746:	6960      	ldr	r0, [r4, #20]
   d5748:	2310      	movs	r3, #16
   d574a:	9300      	str	r3, [sp, #0]
   d574c:	6800      	ldr	r0, [r0, #0]
   d574e:	ab02      	add	r3, sp, #8
   d5750:	f241 0205 	movw	r2, #4101	; 0x1005
   d5754:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5758:	f7ff faa0 	bl	d4c9c <sock_setsockopt>
    if (ret < 0) {
   d575c:	2800      	cmp	r0, #0
   d575e:	da07      	bge.n	d5770 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d5760:	f7ff fbd8 	bl	d4f14 <__errno>
   d5764:	6803      	ldr	r3, [r0, #0]
   d5766:	6063      	str	r3, [r4, #4]
        return 0;
   d5768:	2000      	movs	r0, #0
}
   d576a:	b006      	add	sp, #24
   d576c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d5770:	6960      	ldr	r0, [r4, #20]
   d5772:	2300      	movs	r3, #0
   d5774:	6800      	ldr	r0, [r0, #0]
   d5776:	463a      	mov	r2, r7
   d5778:	4631      	mov	r1, r6
   d577a:	f7ff faaf 	bl	d4cdc <sock_send>
    if (ret < 0) {
   d577e:	1e03      	subs	r3, r0, #0
   d5780:	dbee      	blt.n	d5760 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d5782:	4618      	mov	r0, r3
   d5784:	e7f1      	b.n	d576a <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d5788 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d5788:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d578a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d578c:	4b05      	ldr	r3, [pc, #20]	; (d57a4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d578e:	4604      	mov	r4, r0
   d5790:	358c      	adds	r5, #140	; 0x8c
   d5792:	f844 3b04 	str.w	r3, [r4], #4
   d5796:	4606      	mov	r6, r0
   d5798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d579a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d579c:	682b      	ldr	r3, [r5, #0]
   d579e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d57a0:	4630      	mov	r0, r6
   d57a2:	bd70      	pop	{r4, r5, r6, pc}
   d57a4:	000d8bc4 	.word	0x000d8bc4

000d57a8 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d57a8:	b510      	push	{r4, lr}
   d57aa:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d57ac:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d57b0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d57b4:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d57b6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d57b8:	d005      	beq.n	d57c6 <_ZN9TCPClient4peekEv+0x1e>
   d57ba:	6963      	ldr	r3, [r4, #20]
   d57bc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d57c0:	4413      	add	r3, r2
   d57c2:	7918      	ldrb	r0, [r3, #4]
}
   d57c4:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d57c6:	6803      	ldr	r3, [r0, #0]
   d57c8:	691b      	ldr	r3, [r3, #16]
   d57ca:	4798      	blx	r3
   d57cc:	2800      	cmp	r0, #0
   d57ce:	d1f4      	bne.n	d57ba <_ZN9TCPClient4peekEv+0x12>
   d57d0:	f04f 30ff 	mov.w	r0, #4294967295
   d57d4:	e7f6      	b.n	d57c4 <_ZN9TCPClient4peekEv+0x1c>

000d57d6 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d57d6:	b510      	push	{r4, lr}
   d57d8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d57da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d57de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d57e2:	429a      	cmp	r2, r3
int TCPClient::read() {
   d57e4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d57e6:	d008      	beq.n	d57fa <_ZN9TCPClient4readEv+0x24>
   d57e8:	6963      	ldr	r3, [r4, #20]
   d57ea:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d57ee:	1c51      	adds	r1, r2, #1
   d57f0:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d57f4:	4413      	add	r3, r2
   d57f6:	7918      	ldrb	r0, [r3, #4]
}
   d57f8:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d57fa:	6803      	ldr	r3, [r0, #0]
   d57fc:	691b      	ldr	r3, [r3, #16]
   d57fe:	4798      	blx	r3
   d5800:	2800      	cmp	r0, #0
   d5802:	d1f1      	bne.n	d57e8 <_ZN9TCPClient4readEv+0x12>
   d5804:	f04f 30ff 	mov.w	r0, #4294967295
   d5808:	e7f6      	b.n	d57f8 <_ZN9TCPClient4readEv+0x22>

000d580a <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d580a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d580c:	6943      	ldr	r3, [r0, #20]
   d580e:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d5810:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5814:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5818:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d581a:	4605      	mov	r5, r0
   d581c:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d581e:	d016      	beq.n	d584e <_ZN9TCPClient4readEPhj+0x44>
   d5820:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d5822:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5826:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d582a:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d582c:	42bc      	cmp	r4, r7
   d582e:	bf28      	it	cs
   d5830:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5832:	3304      	adds	r3, #4
   d5834:	4622      	mov	r2, r4
   d5836:	4419      	add	r1, r3
   d5838:	4630      	mov	r0, r6
   d583a:	f001 f8c7 	bl	d69cc <memcpy>
   d583e:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d5840:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5844:	4423      	add	r3, r4
   d5846:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d584a:	4620      	mov	r0, r4
   d584c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d584e:	6803      	ldr	r3, [r0, #0]
   d5850:	691b      	ldr	r3, [r3, #16]
   d5852:	4798      	blx	r3
   d5854:	2800      	cmp	r0, #0
   d5856:	d1e3      	bne.n	d5820 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d5858:	f04f 34ff 	mov.w	r4, #4294967295
   d585c:	e7f5      	b.n	d584a <_ZN9TCPClient4readEPhj+0x40>

000d585e <_ZN9TCPClient12flush_bufferEv>:
   d585e:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5860:	2300      	movs	r3, #0
   d5862:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5866:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d5868:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d586c:	4770      	bx	lr

000d586e <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d586e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5872:	461f      	mov	r7, r3
    stop();
   d5874:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5876:	460c      	mov	r4, r1
    stop();
   d5878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d587a:	b08a      	sub	sp, #40	; 0x28
   d587c:	4605      	mov	r5, r0
   d587e:	4616      	mov	r6, r2
    stop();
   d5880:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d5882:	7d23      	ldrb	r3, [r4, #20]
   d5884:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d5888:	2b04      	cmp	r3, #4
   d588a:	bf0c      	ite	eq
   d588c:	2002      	moveq	r0, #2
   d588e:	200a      	movne	r0, #10
   d5890:	2206      	movs	r2, #6
   d5892:	2101      	movs	r1, #1
   d5894:	f7ff fa2a 	bl	d4cec <sock_socket>
   d5898:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d589c:	696b      	ldr	r3, [r5, #20]
   d589e:	681b      	ldr	r3, [r3, #0]
   d58a0:	2b00      	cmp	r3, #0
   d58a2:	da08      	bge.n	d58b6 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d58a4:	682b      	ldr	r3, [r5, #0]
   d58a6:	4628      	mov	r0, r5
   d58a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d58aa:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d58ac:	4798      	blx	r3
}
   d58ae:	4620      	mov	r0, r4
   d58b0:	b00a      	add	sp, #40	; 0x28
   d58b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d58b6:	4628      	mov	r0, r5
   d58b8:	f7ff ffd1 	bl	d585e <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d58bc:	b1b7      	cbz	r7, d58ec <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d58be:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d58c0:	a903      	add	r1, sp, #12
   d58c2:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d58c4:	9303      	str	r3, [sp, #12]
   d58c6:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d58ca:	f7ff f95f 	bl	d4b8c <if_index_to_name>
   d58ce:	2800      	cmp	r0, #0
   d58d0:	d1e8      	bne.n	d58a4 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d58d2:	6968      	ldr	r0, [r5, #20]
   d58d4:	2306      	movs	r3, #6
   d58d6:	9300      	str	r3, [sp, #0]
   d58d8:	6800      	ldr	r0, [r0, #0]
   d58da:	ab03      	add	r3, sp, #12
   d58dc:	f241 020b 	movw	r2, #4107	; 0x100b
   d58e0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d58e4:	f7ff f9da 	bl	d4c9c <sock_setsockopt>
   d58e8:	2800      	cmp	r0, #0
   d58ea:	d1db      	bne.n	d58a4 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d58ec:	221c      	movs	r2, #28
   d58ee:	2100      	movs	r1, #0
   d58f0:	a803      	add	r0, sp, #12
   d58f2:	f001 f893 	bl	d6a1c <memset>
    if (ip.version() == 4) {
   d58f6:	7d23      	ldrb	r3, [r4, #20]
   d58f8:	2b04      	cmp	r3, #4
   d58fa:	d11d      	bne.n	d5938 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d58fc:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d5900:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d5902:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d5906:	f7ff f989 	bl	d4c1c <inet_htons>
   d590a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d590e:	6860      	ldr	r0, [r4, #4]
   d5910:	f7ff f97c 	bl	d4c0c <inet_htonl>
   d5914:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d5916:	696b      	ldr	r3, [r5, #20]
   d5918:	221c      	movs	r2, #28
   d591a:	6818      	ldr	r0, [r3, #0]
   d591c:	a903      	add	r1, sp, #12
   d591e:	f7ff f9cd 	bl	d4cbc <sock_connect>
   d5922:	2800      	cmp	r0, #0
   d5924:	d1be      	bne.n	d58a4 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d5926:	3404      	adds	r4, #4
   d5928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d592a:	696d      	ldr	r5, [r5, #20]
   d592c:	358c      	adds	r5, #140	; 0x8c
   d592e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5930:	6823      	ldr	r3, [r4, #0]
   d5932:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d5934:	2401      	movs	r4, #1
   d5936:	e7ba      	b.n	d58ae <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d5938:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d593c:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d593e:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d5942:	f7ff f96b 	bl	d4c1c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5946:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d5948:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d594c:	1d23      	adds	r3, r4, #4
   d594e:	f104 0714 	add.w	r7, r4, #20
   d5952:	6818      	ldr	r0, [r3, #0]
   d5954:	6859      	ldr	r1, [r3, #4]
   d5956:	4632      	mov	r2, r6
   d5958:	c203      	stmia	r2!, {r0, r1}
   d595a:	3308      	adds	r3, #8
   d595c:	42bb      	cmp	r3, r7
   d595e:	4616      	mov	r6, r2
   d5960:	d1f7      	bne.n	d5952 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d5962:	e7d8      	b.n	d5916 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d5964 <_ZN9TCPClient9availableEv>:
{
   d5964:	b530      	push	{r4, r5, lr}
   d5966:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d5968:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d596c:	b08b      	sub	sp, #44	; 0x2c
   d596e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d5970:	b12b      	cbz	r3, d597e <_ZN9TCPClient9availableEv+0x1a>
   d5972:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d5976:	429a      	cmp	r2, r3
   d5978:	d101      	bne.n	d597e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d597a:	f7ff ff70 	bl	d585e <_ZN9TCPClient12flush_bufferEv>
   d597e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d5980:	6808      	ldr	r0, [r1, #0]
   d5982:	2800      	cmp	r0, #0
   d5984:	db18      	blt.n	d59b8 <_ZN9TCPClient9availableEv+0x54>
   d5986:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d598a:	2d7f      	cmp	r5, #127	; 0x7f
   d598c:	d814      	bhi.n	d59b8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d598e:	3104      	adds	r1, #4
   d5990:	2308      	movs	r3, #8
   d5992:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d5996:	4429      	add	r1, r5
   d5998:	f7ff f998 	bl	d4ccc <sock_recv>
            if (ret > 0) {
   d599c:	2800      	cmp	r0, #0
   d599e:	dd13      	ble.n	d59c8 <_ZN9TCPClient9availableEv+0x64>
   d59a0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d59a2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d59a6:	b90a      	cbnz	r2, d59ac <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d59a8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d59ac:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d59ae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d59b2:	4410      	add	r0, r2
   d59b4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d59b8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d59ba:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d59be:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d59c2:	1ac0      	subs	r0, r0, r3
   d59c4:	b00b      	add	sp, #44	; 0x2c
   d59c6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d59c8:	f7ff faa4 	bl	d4f14 <__errno>
   d59cc:	6803      	ldr	r3, [r0, #0]
   d59ce:	2b0b      	cmp	r3, #11
   d59d0:	d0f2      	beq.n	d59b8 <_ZN9TCPClient9availableEv+0x54>
   d59d2:	f7ff fa9f 	bl	d4f14 <__errno>
   d59d6:	6803      	ldr	r3, [r0, #0]
   d59d8:	2b0b      	cmp	r3, #11
   d59da:	d0ed      	beq.n	d59b8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d59dc:	2320      	movs	r3, #32
   d59de:	2500      	movs	r5, #0
   d59e0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d59e4:	f7ff fa96 	bl	d4f14 <__errno>
   d59e8:	6803      	ldr	r3, [r0, #0]
   d59ea:	9301      	str	r3, [sp, #4]
   d59ec:	4b08      	ldr	r3, [pc, #32]	; (d5a10 <_ZN9TCPClient9availableEv+0xac>)
   d59ee:	4909      	ldr	r1, [pc, #36]	; (d5a14 <_ZN9TCPClient9availableEv+0xb0>)
   d59f0:	9300      	str	r3, [sp, #0]
   d59f2:	aa02      	add	r2, sp, #8
   d59f4:	462b      	mov	r3, r5
   d59f6:	2032      	movs	r0, #50	; 0x32
   d59f8:	f7ff f9c8 	bl	d4d8c <log_message>
                    sock_close(d_->sock);
   d59fc:	6963      	ldr	r3, [r4, #20]
   d59fe:	6818      	ldr	r0, [r3, #0]
   d5a00:	f7ff f954 	bl	d4cac <sock_close>
   d5a04:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d5a06:	f04f 32ff 	mov.w	r2, #4294967295
   d5a0a:	601a      	str	r2, [r3, #0]
   d5a0c:	e7d4      	b.n	d59b8 <_ZN9TCPClient9availableEv+0x54>
   d5a0e:	bf00      	nop
   d5a10:	000d8c37 	.word	0x000d8c37
   d5a14:	000d8c30 	.word	0x000d8c30

000d5a18 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d5a18:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d5a1a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d5a1c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d5a1e:	6818      	ldr	r0, [r3, #0]
   d5a20:	2800      	cmp	r0, #0
   d5a22:	db01      	blt.n	d5a28 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5a24:	f7ff f942 	bl	d4cac <sock_close>
   d5a28:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d5a2a:	f04f 32ff 	mov.w	r2, #4294967295
   d5a2e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d5a30:	6960      	ldr	r0, [r4, #20]
   d5a32:	2211      	movs	r2, #17
   d5a34:	2100      	movs	r1, #0
   d5a36:	308c      	adds	r0, #140	; 0x8c
   d5a38:	f000 fff0 	bl	d6a1c <memset>
    flush_buffer();
   d5a3c:	4620      	mov	r0, r4
}
   d5a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d5a42:	f7ff bf0c 	b.w	d585e <_ZN9TCPClient12flush_bufferEv>

000d5a46 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d5a46:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d5a48:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d5a4a:	4604      	mov	r4, r0
          total(0) {
   d5a4c:	6001      	str	r1, [r0, #0]
   d5a4e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d5a52:	3088      	adds	r0, #136	; 0x88
   d5a54:	f7ff fc8e 	bl	d5374 <_ZN9IPAddressC1Ev>
}
   d5a58:	4620      	mov	r0, r4
   d5a5a:	bd10      	pop	{r4, pc}

000d5a5c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d5a5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5a5e:	2300      	movs	r3, #0
   d5a60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5a64:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d5a68:	4a0e      	ldr	r2, [pc, #56]	; (d5aa4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d5a6a:	6103      	str	r3, [r0, #16]
   d5a6c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5a6e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d5a70:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5a72:	20ac      	movs	r0, #172	; 0xac
   d5a74:	9101      	str	r1, [sp, #4]
   d5a76:	f7fe fb0e 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d5a7a:	1e05      	subs	r5, r0, #0
   d5a7c:	f105 060c 	add.w	r6, r5, #12
   d5a80:	d008      	beq.n	d5a94 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d5a82:	2301      	movs	r3, #1
   d5a84:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d5a88:	4b07      	ldr	r3, [pc, #28]	; (d5aa8 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5a8a:	9901      	ldr	r1, [sp, #4]
   d5a8c:	602b      	str	r3, [r5, #0]
   d5a8e:	4630      	mov	r0, r6
   d5a90:	f7ff ffd9 	bl	d5a46 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d5a94:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d5a96:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d5a9a:	f7ff fee0 	bl	d585e <_ZN9TCPClient12flush_bufferEv>
}
   d5a9e:	b002      	add	sp, #8
   d5aa0:	bd70      	pop	{r4, r5, r6, pc}
   d5aa2:	bf00      	nop
   d5aa4:	000d8c6c 	.word	0x000d8c6c
   d5aa8:	000d8c50 	.word	0x000d8c50

000d5aac <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d5aac:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d5aae:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d5ab2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d5ab4:	f7ff ffd2 	bl	d5a5c <_ZN9TCPClientC1Ei>
}
   d5ab8:	4620      	mov	r0, r4
   d5aba:	bd10      	pop	{r4, pc}

000d5abc <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d5abc:	b510      	push	{r4, lr}
   d5abe:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d5ac0:	6800      	ldr	r0, [r0, #0]
   d5ac2:	2800      	cmp	r0, #0
   d5ac4:	db01      	blt.n	d5aca <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d5ac6:	f7ff f8f1 	bl	d4cac <sock_close>
    }
}
   d5aca:	4620      	mov	r0, r4
   d5acc:	bd10      	pop	{r4, pc}

000d5ace <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d5ace:	300c      	adds	r0, #12
   d5ad0:	f7ff bff4 	b.w	d5abc <_ZN9TCPClient4DataD1Ev>

000d5ad4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ad8:	4698      	mov	r8, r3
    stop();
   d5ada:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5adc:	b093      	sub	sp, #76	; 0x4c
   d5ade:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d5ae0:	2400      	movs	r4, #0
    stop();
   d5ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5ae4:	4606      	mov	r6, r0
   d5ae6:	4617      	mov	r7, r2
    stop();
   d5ae8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5aea:	4628      	mov	r0, r5
   d5aec:	466b      	mov	r3, sp
   d5aee:	4622      	mov	r2, r4
   d5af0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d5af2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5af4:	f7ff f842 	bl	d4b7c <netdb_getaddrinfo>
   d5af8:	4605      	mov	r5, r0
   d5afa:	2800      	cmp	r0, #0
   d5afc:	d163      	bne.n	d5bc6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d5afe:	9b00      	ldr	r3, [sp, #0]
   d5b00:	2b00      	cmp	r3, #0
   d5b02:	d04b      	beq.n	d5b9c <_ZN9TCPClient7connectEPKctm+0xc8>
   d5b04:	695b      	ldr	r3, [r3, #20]
   d5b06:	2b00      	cmp	r3, #0
   d5b08:	d048      	beq.n	d5b9c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d5b0a:	a806      	add	r0, sp, #24
   d5b0c:	f7ff fc32 	bl	d5374 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5b10:	9b00      	ldr	r3, [sp, #0]
   d5b12:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d5b14:	7863      	ldrb	r3, [r4, #1]
   d5b16:	2b02      	cmp	r3, #2
   d5b18:	d104      	bne.n	d5b24 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5b1a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5b1c:	a806      	add	r0, sp, #24
   d5b1e:	f7ff fa65 	bl	d4fec <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d5b22:	e026      	b.n	d5b72 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d5b24:	2b0a      	cmp	r3, #10
   d5b26:	d124      	bne.n	d5b72 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d5b28:	2211      	movs	r2, #17
   d5b2a:	4629      	mov	r1, r5
   d5b2c:	a801      	add	r0, sp, #4
   d5b2e:	f000 ff75 	bl	d6a1c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5b32:	68a3      	ldr	r3, [r4, #8]
   d5b34:	2b00      	cmp	r3, #0
   d5b36:	d038      	beq.n	d5baa <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5b38:	f104 0308 	add.w	r3, r4, #8
   d5b3c:	f10d 0c04 	add.w	ip, sp, #4
   d5b40:	3418      	adds	r4, #24
   d5b42:	6818      	ldr	r0, [r3, #0]
   d5b44:	6859      	ldr	r1, [r3, #4]
   d5b46:	4662      	mov	r2, ip
   d5b48:	c203      	stmia	r2!, {r0, r1}
   d5b4a:	3308      	adds	r3, #8
   d5b4c:	42a3      	cmp	r3, r4
   d5b4e:	4694      	mov	ip, r2
   d5b50:	d1f7      	bne.n	d5b42 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d5b52:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5b54:	a901      	add	r1, sp, #4
   d5b56:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d5b58:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5b5c:	f7ff fc18 	bl	d5390 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d5b60:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d5b64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5b68:	ac07      	add	r4, sp, #28
   d5b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b6c:	f8dc 3000 	ldr.w	r3, [ip]
   d5b70:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d5b72:	a806      	add	r0, sp, #24
   d5b74:	f7ff fc1e 	bl	d53b4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5b78:	b180      	cbz	r0, d5b9c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d5b7a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d5b7c:	ad07      	add	r5, sp, #28
   d5b7e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5b82:	4b12      	ldr	r3, [pc, #72]	; (d5bcc <_ZN9TCPClient7connectEPKctm+0xf8>)
   d5b84:	930c      	str	r3, [sp, #48]	; 0x30
   d5b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b88:	ac0d      	add	r4, sp, #52	; 0x34
   d5b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b8c:	682b      	ldr	r3, [r5, #0]
   d5b8e:	7023      	strb	r3, [r4, #0]
   d5b90:	463a      	mov	r2, r7
   d5b92:	4643      	mov	r3, r8
   d5b94:	a90c      	add	r1, sp, #48	; 0x30
   d5b96:	4630      	mov	r0, r6
   d5b98:	47c8      	blx	r9
   d5b9a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d5b9c:	9800      	ldr	r0, [sp, #0]
   d5b9e:	f7fe ffe5 	bl	d4b6c <netdb_freeaddrinfo>
}
   d5ba2:	4628      	mov	r0, r5
   d5ba4:	b013      	add	sp, #76	; 0x4c
   d5ba6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5baa:	68e3      	ldr	r3, [r4, #12]
   d5bac:	2b00      	cmp	r3, #0
   d5bae:	d1c3      	bne.n	d5b38 <_ZN9TCPClient7connectEPKctm+0x64>
   d5bb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5bb4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d5bb8:	f7ff f828 	bl	d4c0c <inet_htonl>
   d5bbc:	4581      	cmp	r9, r0
   d5bbe:	d1bb      	bne.n	d5b38 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d5bc0:	f104 0114 	add.w	r1, r4, #20
   d5bc4:	e7aa      	b.n	d5b1c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5bc6:	4625      	mov	r5, r4
   d5bc8:	e7e8      	b.n	d5b9c <_ZN9TCPClient7connectEPKctm+0xc8>
   d5bca:	bf00      	nop
   d5bcc:	000d8bc4 	.word	0x000d8bc4

000d5bd0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5bd0:	2200      	movs	r2, #0
   d5bd2:	6840      	ldr	r0, [r0, #4]
   d5bd4:	4611      	mov	r1, r2
   d5bd6:	f7ff b91d 	b.w	d4e14 <network_ready>

000d5bda <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5bda:	2200      	movs	r2, #0
   d5bdc:	6840      	ldr	r0, [r0, #4]
   d5bde:	4611      	mov	r1, r2
   d5be0:	f7ff b938 	b.w	d4e54 <network_listening>

000d5be4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5be4:	2200      	movs	r2, #0
   d5be6:	6840      	ldr	r0, [r0, #4]
   d5be8:	4611      	mov	r1, r2
   d5bea:	f7ff b943 	b.w	d4e74 <network_get_listen_timeout>

000d5bee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5bee:	6840      	ldr	r0, [r0, #4]
   d5bf0:	2200      	movs	r2, #0
   d5bf2:	f7ff b937 	b.w	d4e64 <network_set_listen_timeout>

000d5bf6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5bf6:	6840      	ldr	r0, [r0, #4]
   d5bf8:	2200      	movs	r2, #0
   d5bfa:	f081 0101 	eor.w	r1, r1, #1
   d5bfe:	f7ff b921 	b.w	d4e44 <network_listen>

000d5c02 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5c02:	2300      	movs	r3, #0
   d5c04:	6840      	ldr	r0, [r0, #4]
   d5c06:	461a      	mov	r2, r3
   d5c08:	4619      	mov	r1, r3
   d5c0a:	f7ff b913 	b.w	d4e34 <network_off>

000d5c0e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5c0e:	2200      	movs	r2, #0
   d5c10:	6840      	ldr	r0, [r0, #4]
   d5c12:	4611      	mov	r1, r2
   d5c14:	f7ff b8ee 	b.w	d4df4 <network_connecting>

000d5c18 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c18:	6840      	ldr	r0, [r0, #4]
   d5c1a:	2200      	movs	r2, #0
   d5c1c:	2102      	movs	r1, #2
   d5c1e:	f7ff b8f1 	b.w	d4e04 <network_disconnect>

000d5c22 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5c22:	2300      	movs	r3, #0
   d5c24:	6840      	ldr	r0, [r0, #4]
   d5c26:	461a      	mov	r2, r3
   d5c28:	f7ff b8dc 	b.w	d4de4 <network_connect>

000d5c2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5c2c:	4b02      	ldr	r3, [pc, #8]	; (d5c38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5c2e:	2204      	movs	r2, #4
   d5c30:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5c32:	4a02      	ldr	r2, [pc, #8]	; (d5c3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5c34:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5c36:	4770      	bx	lr
   d5c38:	2003e7dc 	.word	0x2003e7dc
   d5c3c:	000d8cb8 	.word	0x000d8cb8

000d5c40 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5c40:	2300      	movs	r3, #0
   d5c42:	6840      	ldr	r0, [r0, #4]
   d5c44:	461a      	mov	r2, r3
   d5c46:	f7ff b8cd 	b.w	d4de4 <network_connect>

000d5c4a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5c4a:	6840      	ldr	r0, [r0, #4]
   d5c4c:	2200      	movs	r2, #0
   d5c4e:	2102      	movs	r1, #2
   d5c50:	f7ff b8d8 	b.w	d4e04 <network_disconnect>

000d5c54 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5c54:	2200      	movs	r2, #0
   d5c56:	6840      	ldr	r0, [r0, #4]
   d5c58:	4611      	mov	r1, r2
   d5c5a:	f7ff b8cb 	b.w	d4df4 <network_connecting>

000d5c5e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5c5e:	2200      	movs	r2, #0
   d5c60:	6840      	ldr	r0, [r0, #4]
   d5c62:	4611      	mov	r1, r2
   d5c64:	f7ff b8d6 	b.w	d4e14 <network_ready>

000d5c68 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5c68:	2300      	movs	r3, #0
   d5c6a:	6840      	ldr	r0, [r0, #4]
   d5c6c:	461a      	mov	r2, r3
   d5c6e:	4619      	mov	r1, r3
   d5c70:	f7ff b8d8 	b.w	d4e24 <network_on>

000d5c74 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5c74:	2300      	movs	r3, #0
   d5c76:	6840      	ldr	r0, [r0, #4]
   d5c78:	461a      	mov	r2, r3
   d5c7a:	4619      	mov	r1, r3
   d5c7c:	f7ff b8da 	b.w	d4e34 <network_off>

000d5c80 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5c80:	6840      	ldr	r0, [r0, #4]
   d5c82:	2100      	movs	r1, #0
   d5c84:	f7ff b8fe 	b.w	d4e84 <network_is_on>

000d5c88 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5c88:	6840      	ldr	r0, [r0, #4]
   d5c8a:	2100      	movs	r1, #0
   d5c8c:	f7ff b902 	b.w	d4e94 <network_is_off>

000d5c90 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5c90:	6840      	ldr	r0, [r0, #4]
   d5c92:	2200      	movs	r2, #0
   d5c94:	f081 0101 	eor.w	r1, r1, #1
   d5c98:	f7ff b8d4 	b.w	d4e44 <network_listen>

000d5c9c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5c9c:	6840      	ldr	r0, [r0, #4]
   d5c9e:	2200      	movs	r2, #0
   d5ca0:	f7ff b8e0 	b.w	d4e64 <network_set_listen_timeout>

000d5ca4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5ca4:	2200      	movs	r2, #0
   d5ca6:	6840      	ldr	r0, [r0, #4]
   d5ca8:	4611      	mov	r1, r2
   d5caa:	f7ff b8e3 	b.w	d4e74 <network_get_listen_timeout>

000d5cae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5cae:	2200      	movs	r2, #0
   d5cb0:	6840      	ldr	r0, [r0, #4]
   d5cb2:	4611      	mov	r1, r2
   d5cb4:	f7ff b8ce 	b.w	d4e54 <network_listening>

000d5cb8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5cbc:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5cbe:	b095      	sub	sp, #84	; 0x54
   d5cc0:	4616      	mov	r6, r2
   d5cc2:	460d      	mov	r5, r1
   d5cc4:	4607      	mov	r7, r0
    IPAddress addr;
   d5cc6:	f7ff fb55 	bl	d5374 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5cca:	4621      	mov	r1, r4
   d5ccc:	2218      	movs	r2, #24
   d5cce:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5cd0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5cd2:	f000 fea3 	bl	d6a1c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5cd6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5cd8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5cdc:	4621      	mov	r1, r4
   d5cde:	466b      	mov	r3, sp
   d5ce0:	aa0c      	add	r2, sp, #48	; 0x30
   d5ce2:	4630      	mov	r0, r6
   d5ce4:	f7fe ff4a 	bl	d4b7c <netdb_getaddrinfo>
    if (!r) {
   d5ce8:	4604      	mov	r4, r0
   d5cea:	2800      	cmp	r0, #0
   d5cec:	d14c      	bne.n	d5d88 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5cee:	4602      	mov	r2, r0
   d5cf0:	2101      	movs	r1, #1
   d5cf2:	6868      	ldr	r0, [r5, #4]
   d5cf4:	f7ff f88e 	bl	d4e14 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cf8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5cfa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5cfc:	4622      	mov	r2, r4
   d5cfe:	6868      	ldr	r0, [r5, #4]
   d5d00:	f7ff f888 	bl	d4e14 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d04:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5d06:	4681      	mov	r9, r0
        bool ok = false;
   d5d08:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d0a:	2e00      	cmp	r6, #0
   d5d0c:	d03c      	beq.n	d5d88 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d5d0e:	2900      	cmp	r1, #0
   d5d10:	d13a      	bne.n	d5d88 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5d12:	6873      	ldr	r3, [r6, #4]
   d5d14:	2b02      	cmp	r3, #2
   d5d16:	d003      	beq.n	d5d20 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5d18:	2b0a      	cmp	r3, #10
   d5d1a:	d011      	beq.n	d5d40 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5d1c:	69f6      	ldr	r6, [r6, #28]
   d5d1e:	e7f4      	b.n	d5d0a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5d20:	f1b8 0f00 	cmp.w	r8, #0
   d5d24:	d00a      	beq.n	d5d3c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5d26:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d5d28:	a806      	add	r0, sp, #24
   d5d2a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d5d2c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d5d2e:	f7ff fb65 	bl	d53fc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d34:	1d3c      	adds	r4, r7, #4
   d5d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d38:	682b      	ldr	r3, [r5, #0]
   d5d3a:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d5d3c:	4641      	mov	r1, r8
   d5d3e:	e7ed      	b.n	d5d1c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5d40:	f1b9 0f00 	cmp.w	r9, #0
   d5d44:	d101      	bne.n	d5d4a <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5d46:	4649      	mov	r1, r9
   d5d48:	e7e8      	b.n	d5d1c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5d4a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5d4c:	2210      	movs	r2, #16
   d5d4e:	a801      	add	r0, sp, #4
   d5d50:	f000 fe64 	bl	d6a1c <memset>
                    a.v = 6;
   d5d54:	2306      	movs	r3, #6
   d5d56:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5d5a:	ad01      	add	r5, sp, #4
   d5d5c:	f104 0308 	add.w	r3, r4, #8
   d5d60:	3418      	adds	r4, #24
   d5d62:	6818      	ldr	r0, [r3, #0]
   d5d64:	6859      	ldr	r1, [r3, #4]
   d5d66:	462a      	mov	r2, r5
   d5d68:	c203      	stmia	r2!, {r0, r1}
   d5d6a:	3308      	adds	r3, #8
   d5d6c:	42a3      	cmp	r3, r4
   d5d6e:	4615      	mov	r5, r2
   d5d70:	d1f7      	bne.n	d5d62 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d5d72:	a901      	add	r1, sp, #4
   d5d74:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5d76:	ad07      	add	r5, sp, #28
   d5d78:	f7ff fb0a 	bl	d5390 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d7e:	1d3c      	adds	r4, r7, #4
   d5d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d82:	682b      	ldr	r3, [r5, #0]
   d5d84:	7023      	strb	r3, [r4, #0]
   d5d86:	e7de      	b.n	d5d46 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5d88:	9800      	ldr	r0, [sp, #0]
   d5d8a:	f7fe feef 	bl	d4b6c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5d8e:	4638      	mov	r0, r7
   d5d90:	b015      	add	sp, #84	; 0x54
   d5d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5d98 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5d98:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5d9a:	4a03      	ldr	r2, [pc, #12]	; (d5da8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5d9c:	601a      	str	r2, [r3, #0]
   d5d9e:	2200      	movs	r2, #0
   d5da0:	605a      	str	r2, [r3, #4]

} // spark
   d5da2:	4770      	bx	lr
   d5da4:	2003e7e4 	.word	0x2003e7e4
   d5da8:	000d8cf4 	.word	0x000d8cf4

000d5dac <__aeabi_atexit>:
   d5dac:	460b      	mov	r3, r1
   d5dae:	4601      	mov	r1, r0
   d5db0:	4618      	mov	r0, r3
   d5db2:	f000 bdfd 	b.w	d69b0 <__cxa_atexit>

000d5db6 <_ZdlPvj>:
   d5db6:	f7fe b970 	b.w	d409a <_ZdlPv>
	...

000d5dbc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d5dbc:	4901      	ldr	r1, [pc, #4]	; (d5dc4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d5dbe:	f000 b8f9 	b.w	d5fb4 <_ZNKSt9type_infoeqERKS_>
   d5dc2:	bf00      	nop
   d5dc4:	000d8d40 	.word	0x000d8d40

000d5dc8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d5dc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5dca:	2400      	movs	r4, #0
   d5dcc:	2310      	movs	r3, #16
   d5dce:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d5dd2:	6803      	ldr	r3, [r0, #0]
   d5dd4:	9400      	str	r4, [sp, #0]
   d5dd6:	699e      	ldr	r6, [r3, #24]
   d5dd8:	f88d 4004 	strb.w	r4, [sp, #4]
   d5ddc:	4615      	mov	r5, r2
   d5dde:	466b      	mov	r3, sp
   d5de0:	6812      	ldr	r2, [r2, #0]
   d5de2:	47b0      	blx	r6
   d5de4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5de8:	f003 0306 	and.w	r3, r3, #6
   d5dec:	2b06      	cmp	r3, #6
   d5dee:	bf03      	ittte	eq
   d5df0:	9b00      	ldreq	r3, [sp, #0]
   d5df2:	602b      	streq	r3, [r5, #0]
   d5df4:	2001      	moveq	r0, #1
   d5df6:	4620      	movne	r0, r4
   d5df8:	b004      	add	sp, #16
   d5dfa:	bd70      	pop	{r4, r5, r6, pc}

000d5dfc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d5dfc:	9800      	ldr	r0, [sp, #0]
   d5dfe:	4290      	cmp	r0, r2
   d5e00:	bf14      	ite	ne
   d5e02:	2001      	movne	r0, #1
   d5e04:	2006      	moveq	r0, #6
   d5e06:	4770      	bx	lr

000d5e08 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d5e08:	b510      	push	{r4, lr}
   d5e0a:	4b03      	ldr	r3, [pc, #12]	; (d5e18 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d5e0c:	6003      	str	r3, [r0, #0]
   d5e0e:	4604      	mov	r4, r0
   d5e10:	f000 f8cd 	bl	d5fae <_ZNSt9type_infoD1Ev>
   d5e14:	4620      	mov	r0, r4
   d5e16:	bd10      	pop	{r4, pc}
   d5e18:	000d8d80 	.word	0x000d8d80

000d5e1c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d5e1c:	b510      	push	{r4, lr}
   d5e1e:	4604      	mov	r4, r0
   d5e20:	f7ff fff2 	bl	d5e08 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d5e24:	4620      	mov	r0, r4
   d5e26:	2108      	movs	r1, #8
   d5e28:	f7ff ffc5 	bl	d5db6 <_ZdlPvj>
   d5e2c:	4620      	mov	r0, r4
   d5e2e:	bd10      	pop	{r4, pc}

000d5e30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d5e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e34:	461f      	mov	r7, r3
   d5e36:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d5e3a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d5e3e:	4598      	cmp	r8, r3
   d5e40:	4606      	mov	r6, r0
   d5e42:	4615      	mov	r5, r2
   d5e44:	d107      	bne.n	d5e56 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d5e46:	9907      	ldr	r1, [sp, #28]
   d5e48:	f000 f8b4 	bl	d5fb4 <_ZNKSt9type_infoeqERKS_>
   d5e4c:	b118      	cbz	r0, d5e56 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d5e4e:	7165      	strb	r5, [r4, #5]
   d5e50:	2000      	movs	r0, #0
   d5e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5e56:	4639      	mov	r1, r7
   d5e58:	4630      	mov	r0, r6
   d5e5a:	f000 f8ab 	bl	d5fb4 <_ZNKSt9type_infoeqERKS_>
   d5e5e:	2800      	cmp	r0, #0
   d5e60:	d0f6      	beq.n	d5e50 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d5e62:	2301      	movs	r3, #1
   d5e64:	f8c4 8000 	str.w	r8, [r4]
   d5e68:	7125      	strb	r5, [r4, #4]
   d5e6a:	71a3      	strb	r3, [r4, #6]
   d5e6c:	e7f0      	b.n	d5e50 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d5e6e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d5e6e:	b538      	push	{r3, r4, r5, lr}
   d5e70:	4615      	mov	r5, r2
   d5e72:	461c      	mov	r4, r3
   d5e74:	f000 f89e 	bl	d5fb4 <_ZNKSt9type_infoeqERKS_>
   d5e78:	b120      	cbz	r0, d5e84 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d5e7a:	2308      	movs	r3, #8
   d5e7c:	60e3      	str	r3, [r4, #12]
   d5e7e:	2306      	movs	r3, #6
   d5e80:	6025      	str	r5, [r4, #0]
   d5e82:	7123      	strb	r3, [r4, #4]
   d5e84:	bd38      	pop	{r3, r4, r5, pc}

000d5e86 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d5e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5e88:	4605      	mov	r5, r0
   d5e8a:	460c      	mov	r4, r1
   d5e8c:	9201      	str	r2, [sp, #4]
   d5e8e:	461e      	mov	r6, r3
   d5e90:	f000 f890 	bl	d5fb4 <_ZNKSt9type_infoeqERKS_>
   d5e94:	b950      	cbnz	r0, d5eac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d5e96:	2e03      	cmp	r6, #3
   d5e98:	d808      	bhi.n	d5eac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d5e9a:	6823      	ldr	r3, [r4, #0]
   d5e9c:	9a01      	ldr	r2, [sp, #4]
   d5e9e:	695b      	ldr	r3, [r3, #20]
   d5ea0:	4629      	mov	r1, r5
   d5ea2:	4620      	mov	r0, r4
   d5ea4:	b002      	add	sp, #8
   d5ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d5eaa:	4718      	bx	r3
   d5eac:	b002      	add	sp, #8
   d5eae:	bd70      	pop	{r4, r5, r6, pc}

000d5eb0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d5eb0:	b510      	push	{r4, lr}
   d5eb2:	4b03      	ldr	r3, [pc, #12]	; (d5ec0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d5eb4:	6003      	str	r3, [r0, #0]
   d5eb6:	4604      	mov	r4, r0
   d5eb8:	f7ff ffa6 	bl	d5e08 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d5ebc:	4620      	mov	r0, r4
   d5ebe:	bd10      	pop	{r4, pc}
   d5ec0:	000d8de0 	.word	0x000d8de0

000d5ec4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d5ec4:	b510      	push	{r4, lr}
   d5ec6:	4604      	mov	r4, r0
   d5ec8:	f7ff fff2 	bl	d5eb0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d5ecc:	4620      	mov	r0, r4
   d5ece:	210c      	movs	r1, #12
   d5ed0:	f7ff ff71 	bl	d5db6 <_ZdlPvj>
   d5ed4:	4620      	mov	r0, r4
   d5ed6:	bd10      	pop	{r4, pc}

000d5ed8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d5ed8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5eda:	9f08      	ldr	r7, [sp, #32]
   d5edc:	4297      	cmp	r7, r2
   d5ede:	4605      	mov	r5, r0
   d5ee0:	460e      	mov	r6, r1
   d5ee2:	4614      	mov	r4, r2
   d5ee4:	d00a      	beq.n	d5efc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d5ee6:	68a8      	ldr	r0, [r5, #8]
   d5ee8:	6802      	ldr	r2, [r0, #0]
   d5eea:	9708      	str	r7, [sp, #32]
   d5eec:	6a15      	ldr	r5, [r2, #32]
   d5eee:	4631      	mov	r1, r6
   d5ef0:	4622      	mov	r2, r4
   d5ef2:	46ac      	mov	ip, r5
   d5ef4:	b003      	add	sp, #12
   d5ef6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d5efa:	4760      	bx	ip
   d5efc:	4619      	mov	r1, r3
   d5efe:	9301      	str	r3, [sp, #4]
   d5f00:	f000 f858 	bl	d5fb4 <_ZNKSt9type_infoeqERKS_>
   d5f04:	9b01      	ldr	r3, [sp, #4]
   d5f06:	2800      	cmp	r0, #0
   d5f08:	d0ed      	beq.n	d5ee6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d5f0a:	2006      	movs	r0, #6
   d5f0c:	b003      	add	sp, #12
   d5f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5f10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d5f10:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f14:	460d      	mov	r5, r1
   d5f16:	4619      	mov	r1, r3
   d5f18:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d5f1c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d5f20:	4681      	mov	r9, r0
   d5f22:	4617      	mov	r7, r2
   d5f24:	4698      	mov	r8, r3
   d5f26:	f000 f845 	bl	d5fb4 <_ZNKSt9type_infoeqERKS_>
   d5f2a:	b190      	cbz	r0, d5f52 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d5f2c:	2d00      	cmp	r5, #0
   d5f2e:	6034      	str	r4, [r6, #0]
   d5f30:	7137      	strb	r7, [r6, #4]
   d5f32:	db09      	blt.n	d5f48 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d5f34:	1961      	adds	r1, r4, r5
   d5f36:	458a      	cmp	sl, r1
   d5f38:	bf0c      	ite	eq
   d5f3a:	2106      	moveq	r1, #6
   d5f3c:	2101      	movne	r1, #1
   d5f3e:	71b1      	strb	r1, [r6, #6]
   d5f40:	2000      	movs	r0, #0
   d5f42:	b001      	add	sp, #4
   d5f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5f48:	3502      	adds	r5, #2
   d5f4a:	d1f9      	bne.n	d5f40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d5f4c:	2301      	movs	r3, #1
   d5f4e:	71b3      	strb	r3, [r6, #6]
   d5f50:	e7f6      	b.n	d5f40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d5f52:	4554      	cmp	r4, sl
   d5f54:	d106      	bne.n	d5f64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d5f56:	4659      	mov	r1, fp
   d5f58:	4648      	mov	r0, r9
   d5f5a:	f000 f82b 	bl	d5fb4 <_ZNKSt9type_infoeqERKS_>
   d5f5e:	b108      	cbz	r0, d5f64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d5f60:	7177      	strb	r7, [r6, #5]
   d5f62:	e7ed      	b.n	d5f40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d5f64:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d5f68:	6803      	ldr	r3, [r0, #0]
   d5f6a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d5f6e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d5f72:	69dc      	ldr	r4, [r3, #28]
   d5f74:	463a      	mov	r2, r7
   d5f76:	4643      	mov	r3, r8
   d5f78:	4629      	mov	r1, r5
   d5f7a:	46a4      	mov	ip, r4
   d5f7c:	b001      	add	sp, #4
   d5f7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f82:	4760      	bx	ip

000d5f84 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d5f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f88:	4607      	mov	r7, r0
   d5f8a:	460c      	mov	r4, r1
   d5f8c:	4615      	mov	r5, r2
   d5f8e:	461e      	mov	r6, r3
   d5f90:	f7ff ff6d 	bl	d5e6e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d5f94:	b948      	cbnz	r0, d5faa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d5f96:	68b8      	ldr	r0, [r7, #8]
   d5f98:	6803      	ldr	r3, [r0, #0]
   d5f9a:	699f      	ldr	r7, [r3, #24]
   d5f9c:	462a      	mov	r2, r5
   d5f9e:	4633      	mov	r3, r6
   d5fa0:	4621      	mov	r1, r4
   d5fa2:	46bc      	mov	ip, r7
   d5fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5fa8:	4760      	bx	ip
   d5faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5fae <_ZNSt9type_infoD1Ev>:
   d5fae:	4770      	bx	lr

000d5fb0 <_ZNKSt9type_info14__is_pointer_pEv>:
   d5fb0:	2000      	movs	r0, #0
   d5fb2:	4770      	bx	lr

000d5fb4 <_ZNKSt9type_infoeqERKS_>:
   d5fb4:	4281      	cmp	r1, r0
   d5fb6:	b508      	push	{r3, lr}
   d5fb8:	d00e      	beq.n	d5fd8 <_ZNKSt9type_infoeqERKS_+0x24>
   d5fba:	6840      	ldr	r0, [r0, #4]
   d5fbc:	7803      	ldrb	r3, [r0, #0]
   d5fbe:	2b2a      	cmp	r3, #42	; 0x2a
   d5fc0:	d00c      	beq.n	d5fdc <_ZNKSt9type_infoeqERKS_+0x28>
   d5fc2:	6849      	ldr	r1, [r1, #4]
   d5fc4:	780b      	ldrb	r3, [r1, #0]
   d5fc6:	2b2a      	cmp	r3, #42	; 0x2a
   d5fc8:	bf08      	it	eq
   d5fca:	3101      	addeq	r1, #1
   d5fcc:	f000 fd86 	bl	d6adc <strcmp>
   d5fd0:	fab0 f080 	clz	r0, r0
   d5fd4:	0940      	lsrs	r0, r0, #5
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	2001      	movs	r0, #1
   d5fda:	e7fc      	b.n	d5fd6 <_ZNKSt9type_infoeqERKS_+0x22>
   d5fdc:	2000      	movs	r0, #0
   d5fde:	e7fa      	b.n	d5fd6 <_ZNKSt9type_infoeqERKS_+0x22>

000d5fe0 <__aeabi_drsub>:
   d5fe0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5fe4:	e002      	b.n	d5fec <__adddf3>
   d5fe6:	bf00      	nop

000d5fe8 <__aeabi_dsub>:
   d5fe8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5fec <__adddf3>:
   d5fec:	b530      	push	{r4, r5, lr}
   d5fee:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5ff2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5ff6:	ea94 0f05 	teq	r4, r5
   d5ffa:	bf08      	it	eq
   d5ffc:	ea90 0f02 	teqeq	r0, r2
   d6000:	bf1f      	itttt	ne
   d6002:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6006:	ea55 0c02 	orrsne.w	ip, r5, r2
   d600a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d600e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6012:	f000 80e2 	beq.w	d61da <__adddf3+0x1ee>
   d6016:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d601a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d601e:	bfb8      	it	lt
   d6020:	426d      	neglt	r5, r5
   d6022:	dd0c      	ble.n	d603e <__adddf3+0x52>
   d6024:	442c      	add	r4, r5
   d6026:	ea80 0202 	eor.w	r2, r0, r2
   d602a:	ea81 0303 	eor.w	r3, r1, r3
   d602e:	ea82 0000 	eor.w	r0, r2, r0
   d6032:	ea83 0101 	eor.w	r1, r3, r1
   d6036:	ea80 0202 	eor.w	r2, r0, r2
   d603a:	ea81 0303 	eor.w	r3, r1, r3
   d603e:	2d36      	cmp	r5, #54	; 0x36
   d6040:	bf88      	it	hi
   d6042:	bd30      	pophi	{r4, r5, pc}
   d6044:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6048:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d604c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6050:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6054:	d002      	beq.n	d605c <__adddf3+0x70>
   d6056:	4240      	negs	r0, r0
   d6058:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d605c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6060:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6064:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6068:	d002      	beq.n	d6070 <__adddf3+0x84>
   d606a:	4252      	negs	r2, r2
   d606c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6070:	ea94 0f05 	teq	r4, r5
   d6074:	f000 80a7 	beq.w	d61c6 <__adddf3+0x1da>
   d6078:	f1a4 0401 	sub.w	r4, r4, #1
   d607c:	f1d5 0e20 	rsbs	lr, r5, #32
   d6080:	db0d      	blt.n	d609e <__adddf3+0xb2>
   d6082:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6086:	fa22 f205 	lsr.w	r2, r2, r5
   d608a:	1880      	adds	r0, r0, r2
   d608c:	f141 0100 	adc.w	r1, r1, #0
   d6090:	fa03 f20e 	lsl.w	r2, r3, lr
   d6094:	1880      	adds	r0, r0, r2
   d6096:	fa43 f305 	asr.w	r3, r3, r5
   d609a:	4159      	adcs	r1, r3
   d609c:	e00e      	b.n	d60bc <__adddf3+0xd0>
   d609e:	f1a5 0520 	sub.w	r5, r5, #32
   d60a2:	f10e 0e20 	add.w	lr, lr, #32
   d60a6:	2a01      	cmp	r2, #1
   d60a8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d60ac:	bf28      	it	cs
   d60ae:	f04c 0c02 	orrcs.w	ip, ip, #2
   d60b2:	fa43 f305 	asr.w	r3, r3, r5
   d60b6:	18c0      	adds	r0, r0, r3
   d60b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d60bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d60c0:	d507      	bpl.n	d60d2 <__adddf3+0xe6>
   d60c2:	f04f 0e00 	mov.w	lr, #0
   d60c6:	f1dc 0c00 	rsbs	ip, ip, #0
   d60ca:	eb7e 0000 	sbcs.w	r0, lr, r0
   d60ce:	eb6e 0101 	sbc.w	r1, lr, r1
   d60d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d60d6:	d31b      	bcc.n	d6110 <__adddf3+0x124>
   d60d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d60dc:	d30c      	bcc.n	d60f8 <__adddf3+0x10c>
   d60de:	0849      	lsrs	r1, r1, #1
   d60e0:	ea5f 0030 	movs.w	r0, r0, rrx
   d60e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d60e8:	f104 0401 	add.w	r4, r4, #1
   d60ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d60f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d60f4:	f080 809a 	bcs.w	d622c <__adddf3+0x240>
   d60f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d60fc:	bf08      	it	eq
   d60fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6102:	f150 0000 	adcs.w	r0, r0, #0
   d6106:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d610a:	ea41 0105 	orr.w	r1, r1, r5
   d610e:	bd30      	pop	{r4, r5, pc}
   d6110:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6114:	4140      	adcs	r0, r0
   d6116:	eb41 0101 	adc.w	r1, r1, r1
   d611a:	3c01      	subs	r4, #1
   d611c:	bf28      	it	cs
   d611e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d6122:	d2e9      	bcs.n	d60f8 <__adddf3+0x10c>
   d6124:	f091 0f00 	teq	r1, #0
   d6128:	bf04      	itt	eq
   d612a:	4601      	moveq	r1, r0
   d612c:	2000      	moveq	r0, #0
   d612e:	fab1 f381 	clz	r3, r1
   d6132:	bf08      	it	eq
   d6134:	3320      	addeq	r3, #32
   d6136:	f1a3 030b 	sub.w	r3, r3, #11
   d613a:	f1b3 0220 	subs.w	r2, r3, #32
   d613e:	da0c      	bge.n	d615a <__adddf3+0x16e>
   d6140:	320c      	adds	r2, #12
   d6142:	dd08      	ble.n	d6156 <__adddf3+0x16a>
   d6144:	f102 0c14 	add.w	ip, r2, #20
   d6148:	f1c2 020c 	rsb	r2, r2, #12
   d614c:	fa01 f00c 	lsl.w	r0, r1, ip
   d6150:	fa21 f102 	lsr.w	r1, r1, r2
   d6154:	e00c      	b.n	d6170 <__adddf3+0x184>
   d6156:	f102 0214 	add.w	r2, r2, #20
   d615a:	bfd8      	it	le
   d615c:	f1c2 0c20 	rsble	ip, r2, #32
   d6160:	fa01 f102 	lsl.w	r1, r1, r2
   d6164:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6168:	bfdc      	itt	le
   d616a:	ea41 010c 	orrle.w	r1, r1, ip
   d616e:	4090      	lslle	r0, r2
   d6170:	1ae4      	subs	r4, r4, r3
   d6172:	bfa2      	ittt	ge
   d6174:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6178:	4329      	orrge	r1, r5
   d617a:	bd30      	popge	{r4, r5, pc}
   d617c:	ea6f 0404 	mvn.w	r4, r4
   d6180:	3c1f      	subs	r4, #31
   d6182:	da1c      	bge.n	d61be <__adddf3+0x1d2>
   d6184:	340c      	adds	r4, #12
   d6186:	dc0e      	bgt.n	d61a6 <__adddf3+0x1ba>
   d6188:	f104 0414 	add.w	r4, r4, #20
   d618c:	f1c4 0220 	rsb	r2, r4, #32
   d6190:	fa20 f004 	lsr.w	r0, r0, r4
   d6194:	fa01 f302 	lsl.w	r3, r1, r2
   d6198:	ea40 0003 	orr.w	r0, r0, r3
   d619c:	fa21 f304 	lsr.w	r3, r1, r4
   d61a0:	ea45 0103 	orr.w	r1, r5, r3
   d61a4:	bd30      	pop	{r4, r5, pc}
   d61a6:	f1c4 040c 	rsb	r4, r4, #12
   d61aa:	f1c4 0220 	rsb	r2, r4, #32
   d61ae:	fa20 f002 	lsr.w	r0, r0, r2
   d61b2:	fa01 f304 	lsl.w	r3, r1, r4
   d61b6:	ea40 0003 	orr.w	r0, r0, r3
   d61ba:	4629      	mov	r1, r5
   d61bc:	bd30      	pop	{r4, r5, pc}
   d61be:	fa21 f004 	lsr.w	r0, r1, r4
   d61c2:	4629      	mov	r1, r5
   d61c4:	bd30      	pop	{r4, r5, pc}
   d61c6:	f094 0f00 	teq	r4, #0
   d61ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d61ce:	bf06      	itte	eq
   d61d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d61d4:	3401      	addeq	r4, #1
   d61d6:	3d01      	subne	r5, #1
   d61d8:	e74e      	b.n	d6078 <__adddf3+0x8c>
   d61da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d61de:	bf18      	it	ne
   d61e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d61e4:	d029      	beq.n	d623a <__adddf3+0x24e>
   d61e6:	ea94 0f05 	teq	r4, r5
   d61ea:	bf08      	it	eq
   d61ec:	ea90 0f02 	teqeq	r0, r2
   d61f0:	d005      	beq.n	d61fe <__adddf3+0x212>
   d61f2:	ea54 0c00 	orrs.w	ip, r4, r0
   d61f6:	bf04      	itt	eq
   d61f8:	4619      	moveq	r1, r3
   d61fa:	4610      	moveq	r0, r2
   d61fc:	bd30      	pop	{r4, r5, pc}
   d61fe:	ea91 0f03 	teq	r1, r3
   d6202:	bf1e      	ittt	ne
   d6204:	2100      	movne	r1, #0
   d6206:	2000      	movne	r0, #0
   d6208:	bd30      	popne	{r4, r5, pc}
   d620a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d620e:	d105      	bne.n	d621c <__adddf3+0x230>
   d6210:	0040      	lsls	r0, r0, #1
   d6212:	4149      	adcs	r1, r1
   d6214:	bf28      	it	cs
   d6216:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d621a:	bd30      	pop	{r4, r5, pc}
   d621c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6220:	bf3c      	itt	cc
   d6222:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6226:	bd30      	popcc	{r4, r5, pc}
   d6228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d622c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6230:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6234:	f04f 0000 	mov.w	r0, #0
   d6238:	bd30      	pop	{r4, r5, pc}
   d623a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d623e:	bf1a      	itte	ne
   d6240:	4619      	movne	r1, r3
   d6242:	4610      	movne	r0, r2
   d6244:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6248:	bf1c      	itt	ne
   d624a:	460b      	movne	r3, r1
   d624c:	4602      	movne	r2, r0
   d624e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6252:	bf06      	itte	eq
   d6254:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6258:	ea91 0f03 	teqeq	r1, r3
   d625c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6260:	bd30      	pop	{r4, r5, pc}
   d6262:	bf00      	nop

000d6264 <__aeabi_ui2d>:
   d6264:	f090 0f00 	teq	r0, #0
   d6268:	bf04      	itt	eq
   d626a:	2100      	moveq	r1, #0
   d626c:	4770      	bxeq	lr
   d626e:	b530      	push	{r4, r5, lr}
   d6270:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6274:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6278:	f04f 0500 	mov.w	r5, #0
   d627c:	f04f 0100 	mov.w	r1, #0
   d6280:	e750      	b.n	d6124 <__adddf3+0x138>
   d6282:	bf00      	nop

000d6284 <__aeabi_i2d>:
   d6284:	f090 0f00 	teq	r0, #0
   d6288:	bf04      	itt	eq
   d628a:	2100      	moveq	r1, #0
   d628c:	4770      	bxeq	lr
   d628e:	b530      	push	{r4, r5, lr}
   d6290:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6294:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6298:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d629c:	bf48      	it	mi
   d629e:	4240      	negmi	r0, r0
   d62a0:	f04f 0100 	mov.w	r1, #0
   d62a4:	e73e      	b.n	d6124 <__adddf3+0x138>
   d62a6:	bf00      	nop

000d62a8 <__aeabi_f2d>:
   d62a8:	0042      	lsls	r2, r0, #1
   d62aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d62ae:	ea4f 0131 	mov.w	r1, r1, rrx
   d62b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d62b6:	bf1f      	itttt	ne
   d62b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d62bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d62c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d62c4:	4770      	bxne	lr
   d62c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d62ca:	bf08      	it	eq
   d62cc:	4770      	bxeq	lr
   d62ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d62d2:	bf04      	itt	eq
   d62d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d62d8:	4770      	bxeq	lr
   d62da:	b530      	push	{r4, r5, lr}
   d62dc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d62e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d62e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d62e8:	e71c      	b.n	d6124 <__adddf3+0x138>
   d62ea:	bf00      	nop

000d62ec <__aeabi_ul2d>:
   d62ec:	ea50 0201 	orrs.w	r2, r0, r1
   d62f0:	bf08      	it	eq
   d62f2:	4770      	bxeq	lr
   d62f4:	b530      	push	{r4, r5, lr}
   d62f6:	f04f 0500 	mov.w	r5, #0
   d62fa:	e00a      	b.n	d6312 <__aeabi_l2d+0x16>

000d62fc <__aeabi_l2d>:
   d62fc:	ea50 0201 	orrs.w	r2, r0, r1
   d6300:	bf08      	it	eq
   d6302:	4770      	bxeq	lr
   d6304:	b530      	push	{r4, r5, lr}
   d6306:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d630a:	d502      	bpl.n	d6312 <__aeabi_l2d+0x16>
   d630c:	4240      	negs	r0, r0
   d630e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6312:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6316:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d631a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d631e:	f43f aed8 	beq.w	d60d2 <__adddf3+0xe6>
   d6322:	f04f 0203 	mov.w	r2, #3
   d6326:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d632a:	bf18      	it	ne
   d632c:	3203      	addne	r2, #3
   d632e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6332:	bf18      	it	ne
   d6334:	3203      	addne	r2, #3
   d6336:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d633a:	f1c2 0320 	rsb	r3, r2, #32
   d633e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6342:	fa20 f002 	lsr.w	r0, r0, r2
   d6346:	fa01 fe03 	lsl.w	lr, r1, r3
   d634a:	ea40 000e 	orr.w	r0, r0, lr
   d634e:	fa21 f102 	lsr.w	r1, r1, r2
   d6352:	4414      	add	r4, r2
   d6354:	e6bd      	b.n	d60d2 <__adddf3+0xe6>
   d6356:	bf00      	nop

000d6358 <__aeabi_dmul>:
   d6358:	b570      	push	{r4, r5, r6, lr}
   d635a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d635e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6362:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6366:	bf1d      	ittte	ne
   d6368:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d636c:	ea94 0f0c 	teqne	r4, ip
   d6370:	ea95 0f0c 	teqne	r5, ip
   d6374:	f000 f8de 	bleq	d6534 <__aeabi_dmul+0x1dc>
   d6378:	442c      	add	r4, r5
   d637a:	ea81 0603 	eor.w	r6, r1, r3
   d637e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6382:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6386:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d638a:	bf18      	it	ne
   d638c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6390:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6398:	d038      	beq.n	d640c <__aeabi_dmul+0xb4>
   d639a:	fba0 ce02 	umull	ip, lr, r0, r2
   d639e:	f04f 0500 	mov.w	r5, #0
   d63a2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d63a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d63aa:	fbe0 e503 	umlal	lr, r5, r0, r3
   d63ae:	f04f 0600 	mov.w	r6, #0
   d63b2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d63b6:	f09c 0f00 	teq	ip, #0
   d63ba:	bf18      	it	ne
   d63bc:	f04e 0e01 	orrne.w	lr, lr, #1
   d63c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d63c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d63c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d63cc:	d204      	bcs.n	d63d8 <__aeabi_dmul+0x80>
   d63ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d63d2:	416d      	adcs	r5, r5
   d63d4:	eb46 0606 	adc.w	r6, r6, r6
   d63d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d63dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d63e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d63e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d63e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d63ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d63f0:	bf88      	it	hi
   d63f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d63f6:	d81e      	bhi.n	d6436 <__aeabi_dmul+0xde>
   d63f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d63fc:	bf08      	it	eq
   d63fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6402:	f150 0000 	adcs.w	r0, r0, #0
   d6406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d640a:	bd70      	pop	{r4, r5, r6, pc}
   d640c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6410:	ea46 0101 	orr.w	r1, r6, r1
   d6414:	ea40 0002 	orr.w	r0, r0, r2
   d6418:	ea81 0103 	eor.w	r1, r1, r3
   d641c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6420:	bfc2      	ittt	gt
   d6422:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6426:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d642a:	bd70      	popgt	{r4, r5, r6, pc}
   d642c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6430:	f04f 0e00 	mov.w	lr, #0
   d6434:	3c01      	subs	r4, #1
   d6436:	f300 80ab 	bgt.w	d6590 <__aeabi_dmul+0x238>
   d643a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d643e:	bfde      	ittt	le
   d6440:	2000      	movle	r0, #0
   d6442:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d6446:	bd70      	pople	{r4, r5, r6, pc}
   d6448:	f1c4 0400 	rsb	r4, r4, #0
   d644c:	3c20      	subs	r4, #32
   d644e:	da35      	bge.n	d64bc <__aeabi_dmul+0x164>
   d6450:	340c      	adds	r4, #12
   d6452:	dc1b      	bgt.n	d648c <__aeabi_dmul+0x134>
   d6454:	f104 0414 	add.w	r4, r4, #20
   d6458:	f1c4 0520 	rsb	r5, r4, #32
   d645c:	fa00 f305 	lsl.w	r3, r0, r5
   d6460:	fa20 f004 	lsr.w	r0, r0, r4
   d6464:	fa01 f205 	lsl.w	r2, r1, r5
   d6468:	ea40 0002 	orr.w	r0, r0, r2
   d646c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d6470:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6474:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6478:	fa21 f604 	lsr.w	r6, r1, r4
   d647c:	eb42 0106 	adc.w	r1, r2, r6
   d6480:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6484:	bf08      	it	eq
   d6486:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d648a:	bd70      	pop	{r4, r5, r6, pc}
   d648c:	f1c4 040c 	rsb	r4, r4, #12
   d6490:	f1c4 0520 	rsb	r5, r4, #32
   d6494:	fa00 f304 	lsl.w	r3, r0, r4
   d6498:	fa20 f005 	lsr.w	r0, r0, r5
   d649c:	fa01 f204 	lsl.w	r2, r1, r4
   d64a0:	ea40 0002 	orr.w	r0, r0, r2
   d64a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d64a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d64ac:	f141 0100 	adc.w	r1, r1, #0
   d64b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d64b4:	bf08      	it	eq
   d64b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d64ba:	bd70      	pop	{r4, r5, r6, pc}
   d64bc:	f1c4 0520 	rsb	r5, r4, #32
   d64c0:	fa00 f205 	lsl.w	r2, r0, r5
   d64c4:	ea4e 0e02 	orr.w	lr, lr, r2
   d64c8:	fa20 f304 	lsr.w	r3, r0, r4
   d64cc:	fa01 f205 	lsl.w	r2, r1, r5
   d64d0:	ea43 0302 	orr.w	r3, r3, r2
   d64d4:	fa21 f004 	lsr.w	r0, r1, r4
   d64d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d64dc:	fa21 f204 	lsr.w	r2, r1, r4
   d64e0:	ea20 0002 	bic.w	r0, r0, r2
   d64e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d64e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d64ec:	bf08      	it	eq
   d64ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d64f2:	bd70      	pop	{r4, r5, r6, pc}
   d64f4:	f094 0f00 	teq	r4, #0
   d64f8:	d10f      	bne.n	d651a <__aeabi_dmul+0x1c2>
   d64fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d64fe:	0040      	lsls	r0, r0, #1
   d6500:	eb41 0101 	adc.w	r1, r1, r1
   d6504:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6508:	bf08      	it	eq
   d650a:	3c01      	subeq	r4, #1
   d650c:	d0f7      	beq.n	d64fe <__aeabi_dmul+0x1a6>
   d650e:	ea41 0106 	orr.w	r1, r1, r6
   d6512:	f095 0f00 	teq	r5, #0
   d6516:	bf18      	it	ne
   d6518:	4770      	bxne	lr
   d651a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d651e:	0052      	lsls	r2, r2, #1
   d6520:	eb43 0303 	adc.w	r3, r3, r3
   d6524:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d6528:	bf08      	it	eq
   d652a:	3d01      	subeq	r5, #1
   d652c:	d0f7      	beq.n	d651e <__aeabi_dmul+0x1c6>
   d652e:	ea43 0306 	orr.w	r3, r3, r6
   d6532:	4770      	bx	lr
   d6534:	ea94 0f0c 	teq	r4, ip
   d6538:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d653c:	bf18      	it	ne
   d653e:	ea95 0f0c 	teqne	r5, ip
   d6542:	d00c      	beq.n	d655e <__aeabi_dmul+0x206>
   d6544:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6548:	bf18      	it	ne
   d654a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d654e:	d1d1      	bne.n	d64f4 <__aeabi_dmul+0x19c>
   d6550:	ea81 0103 	eor.w	r1, r1, r3
   d6554:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6558:	f04f 0000 	mov.w	r0, #0
   d655c:	bd70      	pop	{r4, r5, r6, pc}
   d655e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6562:	bf06      	itte	eq
   d6564:	4610      	moveq	r0, r2
   d6566:	4619      	moveq	r1, r3
   d6568:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d656c:	d019      	beq.n	d65a2 <__aeabi_dmul+0x24a>
   d656e:	ea94 0f0c 	teq	r4, ip
   d6572:	d102      	bne.n	d657a <__aeabi_dmul+0x222>
   d6574:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d6578:	d113      	bne.n	d65a2 <__aeabi_dmul+0x24a>
   d657a:	ea95 0f0c 	teq	r5, ip
   d657e:	d105      	bne.n	d658c <__aeabi_dmul+0x234>
   d6580:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d6584:	bf1c      	itt	ne
   d6586:	4610      	movne	r0, r2
   d6588:	4619      	movne	r1, r3
   d658a:	d10a      	bne.n	d65a2 <__aeabi_dmul+0x24a>
   d658c:	ea81 0103 	eor.w	r1, r1, r3
   d6590:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6594:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6598:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d659c:	f04f 0000 	mov.w	r0, #0
   d65a0:	bd70      	pop	{r4, r5, r6, pc}
   d65a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d65a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d65aa:	bd70      	pop	{r4, r5, r6, pc}

000d65ac <__aeabi_ddiv>:
   d65ac:	b570      	push	{r4, r5, r6, lr}
   d65ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d65b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d65b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d65ba:	bf1d      	ittte	ne
   d65bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d65c0:	ea94 0f0c 	teqne	r4, ip
   d65c4:	ea95 0f0c 	teqne	r5, ip
   d65c8:	f000 f8a7 	bleq	d671a <__aeabi_ddiv+0x16e>
   d65cc:	eba4 0405 	sub.w	r4, r4, r5
   d65d0:	ea81 0e03 	eor.w	lr, r1, r3
   d65d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d65d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d65dc:	f000 8088 	beq.w	d66f0 <__aeabi_ddiv+0x144>
   d65e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d65e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d65e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d65ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d65f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d65f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d65f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d65fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6600:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6604:	429d      	cmp	r5, r3
   d6606:	bf08      	it	eq
   d6608:	4296      	cmpeq	r6, r2
   d660a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d660e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6612:	d202      	bcs.n	d661a <__aeabi_ddiv+0x6e>
   d6614:	085b      	lsrs	r3, r3, #1
   d6616:	ea4f 0232 	mov.w	r2, r2, rrx
   d661a:	1ab6      	subs	r6, r6, r2
   d661c:	eb65 0503 	sbc.w	r5, r5, r3
   d6620:	085b      	lsrs	r3, r3, #1
   d6622:	ea4f 0232 	mov.w	r2, r2, rrx
   d6626:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d662a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d662e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6632:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6636:	bf22      	ittt	cs
   d6638:	1ab6      	subcs	r6, r6, r2
   d663a:	4675      	movcs	r5, lr
   d663c:	ea40 000c 	orrcs.w	r0, r0, ip
   d6640:	085b      	lsrs	r3, r3, #1
   d6642:	ea4f 0232 	mov.w	r2, r2, rrx
   d6646:	ebb6 0e02 	subs.w	lr, r6, r2
   d664a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d664e:	bf22      	ittt	cs
   d6650:	1ab6      	subcs	r6, r6, r2
   d6652:	4675      	movcs	r5, lr
   d6654:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d6658:	085b      	lsrs	r3, r3, #1
   d665a:	ea4f 0232 	mov.w	r2, r2, rrx
   d665e:	ebb6 0e02 	subs.w	lr, r6, r2
   d6662:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6666:	bf22      	ittt	cs
   d6668:	1ab6      	subcs	r6, r6, r2
   d666a:	4675      	movcs	r5, lr
   d666c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d6670:	085b      	lsrs	r3, r3, #1
   d6672:	ea4f 0232 	mov.w	r2, r2, rrx
   d6676:	ebb6 0e02 	subs.w	lr, r6, r2
   d667a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d667e:	bf22      	ittt	cs
   d6680:	1ab6      	subcs	r6, r6, r2
   d6682:	4675      	movcs	r5, lr
   d6684:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6688:	ea55 0e06 	orrs.w	lr, r5, r6
   d668c:	d018      	beq.n	d66c0 <__aeabi_ddiv+0x114>
   d668e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d6692:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d6696:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d669a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d669e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d66a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d66a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d66aa:	d1c0      	bne.n	d662e <__aeabi_ddiv+0x82>
   d66ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d66b0:	d10b      	bne.n	d66ca <__aeabi_ddiv+0x11e>
   d66b2:	ea41 0100 	orr.w	r1, r1, r0
   d66b6:	f04f 0000 	mov.w	r0, #0
   d66ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d66be:	e7b6      	b.n	d662e <__aeabi_ddiv+0x82>
   d66c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d66c4:	bf04      	itt	eq
   d66c6:	4301      	orreq	r1, r0
   d66c8:	2000      	moveq	r0, #0
   d66ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d66ce:	bf88      	it	hi
   d66d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d66d4:	f63f aeaf 	bhi.w	d6436 <__aeabi_dmul+0xde>
   d66d8:	ebb5 0c03 	subs.w	ip, r5, r3
   d66dc:	bf04      	itt	eq
   d66de:	ebb6 0c02 	subseq.w	ip, r6, r2
   d66e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d66e6:	f150 0000 	adcs.w	r0, r0, #0
   d66ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d66ee:	bd70      	pop	{r4, r5, r6, pc}
   d66f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d66f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d66f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d66fc:	bfc2      	ittt	gt
   d66fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6702:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d6706:	bd70      	popgt	{r4, r5, r6, pc}
   d6708:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d670c:	f04f 0e00 	mov.w	lr, #0
   d6710:	3c01      	subs	r4, #1
   d6712:	e690      	b.n	d6436 <__aeabi_dmul+0xde>
   d6714:	ea45 0e06 	orr.w	lr, r5, r6
   d6718:	e68d      	b.n	d6436 <__aeabi_dmul+0xde>
   d671a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d671e:	ea94 0f0c 	teq	r4, ip
   d6722:	bf08      	it	eq
   d6724:	ea95 0f0c 	teqeq	r5, ip
   d6728:	f43f af3b 	beq.w	d65a2 <__aeabi_dmul+0x24a>
   d672c:	ea94 0f0c 	teq	r4, ip
   d6730:	d10a      	bne.n	d6748 <__aeabi_ddiv+0x19c>
   d6732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6736:	f47f af34 	bne.w	d65a2 <__aeabi_dmul+0x24a>
   d673a:	ea95 0f0c 	teq	r5, ip
   d673e:	f47f af25 	bne.w	d658c <__aeabi_dmul+0x234>
   d6742:	4610      	mov	r0, r2
   d6744:	4619      	mov	r1, r3
   d6746:	e72c      	b.n	d65a2 <__aeabi_dmul+0x24a>
   d6748:	ea95 0f0c 	teq	r5, ip
   d674c:	d106      	bne.n	d675c <__aeabi_ddiv+0x1b0>
   d674e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6752:	f43f aefd 	beq.w	d6550 <__aeabi_dmul+0x1f8>
   d6756:	4610      	mov	r0, r2
   d6758:	4619      	mov	r1, r3
   d675a:	e722      	b.n	d65a2 <__aeabi_dmul+0x24a>
   d675c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6760:	bf18      	it	ne
   d6762:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6766:	f47f aec5 	bne.w	d64f4 <__aeabi_dmul+0x19c>
   d676a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d676e:	f47f af0d 	bne.w	d658c <__aeabi_dmul+0x234>
   d6772:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d6776:	f47f aeeb 	bne.w	d6550 <__aeabi_dmul+0x1f8>
   d677a:	e712      	b.n	d65a2 <__aeabi_dmul+0x24a>

000d677c <__gedf2>:
   d677c:	f04f 3cff 	mov.w	ip, #4294967295
   d6780:	e006      	b.n	d6790 <__cmpdf2+0x4>
   d6782:	bf00      	nop

000d6784 <__ledf2>:
   d6784:	f04f 0c01 	mov.w	ip, #1
   d6788:	e002      	b.n	d6790 <__cmpdf2+0x4>
   d678a:	bf00      	nop

000d678c <__cmpdf2>:
   d678c:	f04f 0c01 	mov.w	ip, #1
   d6790:	f84d cd04 	str.w	ip, [sp, #-4]!
   d6794:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6798:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d679c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d67a0:	bf18      	it	ne
   d67a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d67a6:	d01b      	beq.n	d67e0 <__cmpdf2+0x54>
   d67a8:	b001      	add	sp, #4
   d67aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d67ae:	bf0c      	ite	eq
   d67b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d67b4:	ea91 0f03 	teqne	r1, r3
   d67b8:	bf02      	ittt	eq
   d67ba:	ea90 0f02 	teqeq	r0, r2
   d67be:	2000      	moveq	r0, #0
   d67c0:	4770      	bxeq	lr
   d67c2:	f110 0f00 	cmn.w	r0, #0
   d67c6:	ea91 0f03 	teq	r1, r3
   d67ca:	bf58      	it	pl
   d67cc:	4299      	cmppl	r1, r3
   d67ce:	bf08      	it	eq
   d67d0:	4290      	cmpeq	r0, r2
   d67d2:	bf2c      	ite	cs
   d67d4:	17d8      	asrcs	r0, r3, #31
   d67d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d67da:	f040 0001 	orr.w	r0, r0, #1
   d67de:	4770      	bx	lr
   d67e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d67e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d67e8:	d102      	bne.n	d67f0 <__cmpdf2+0x64>
   d67ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d67ee:	d107      	bne.n	d6800 <__cmpdf2+0x74>
   d67f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d67f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d67f8:	d1d6      	bne.n	d67a8 <__cmpdf2+0x1c>
   d67fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d67fe:	d0d3      	beq.n	d67a8 <__cmpdf2+0x1c>
   d6800:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6804:	4770      	bx	lr
   d6806:	bf00      	nop

000d6808 <__aeabi_cdrcmple>:
   d6808:	4684      	mov	ip, r0
   d680a:	4610      	mov	r0, r2
   d680c:	4662      	mov	r2, ip
   d680e:	468c      	mov	ip, r1
   d6810:	4619      	mov	r1, r3
   d6812:	4663      	mov	r3, ip
   d6814:	e000      	b.n	d6818 <__aeabi_cdcmpeq>
   d6816:	bf00      	nop

000d6818 <__aeabi_cdcmpeq>:
   d6818:	b501      	push	{r0, lr}
   d681a:	f7ff ffb7 	bl	d678c <__cmpdf2>
   d681e:	2800      	cmp	r0, #0
   d6820:	bf48      	it	mi
   d6822:	f110 0f00 	cmnmi.w	r0, #0
   d6826:	bd01      	pop	{r0, pc}

000d6828 <__aeabi_dcmpeq>:
   d6828:	f84d ed08 	str.w	lr, [sp, #-8]!
   d682c:	f7ff fff4 	bl	d6818 <__aeabi_cdcmpeq>
   d6830:	bf0c      	ite	eq
   d6832:	2001      	moveq	r0, #1
   d6834:	2000      	movne	r0, #0
   d6836:	f85d fb08 	ldr.w	pc, [sp], #8
   d683a:	bf00      	nop

000d683c <__aeabi_dcmplt>:
   d683c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6840:	f7ff ffea 	bl	d6818 <__aeabi_cdcmpeq>
   d6844:	bf34      	ite	cc
   d6846:	2001      	movcc	r0, #1
   d6848:	2000      	movcs	r0, #0
   d684a:	f85d fb08 	ldr.w	pc, [sp], #8
   d684e:	bf00      	nop

000d6850 <__aeabi_dcmple>:
   d6850:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6854:	f7ff ffe0 	bl	d6818 <__aeabi_cdcmpeq>
   d6858:	bf94      	ite	ls
   d685a:	2001      	movls	r0, #1
   d685c:	2000      	movhi	r0, #0
   d685e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6862:	bf00      	nop

000d6864 <__aeabi_dcmpge>:
   d6864:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6868:	f7ff ffce 	bl	d6808 <__aeabi_cdrcmple>
   d686c:	bf94      	ite	ls
   d686e:	2001      	movls	r0, #1
   d6870:	2000      	movhi	r0, #0
   d6872:	f85d fb08 	ldr.w	pc, [sp], #8
   d6876:	bf00      	nop

000d6878 <__aeabi_dcmpgt>:
   d6878:	f84d ed08 	str.w	lr, [sp, #-8]!
   d687c:	f7ff ffc4 	bl	d6808 <__aeabi_cdrcmple>
   d6880:	bf34      	ite	cc
   d6882:	2001      	movcc	r0, #1
   d6884:	2000      	movcs	r0, #0
   d6886:	f85d fb08 	ldr.w	pc, [sp], #8
   d688a:	bf00      	nop

000d688c <__aeabi_d2uiz>:
   d688c:	004a      	lsls	r2, r1, #1
   d688e:	d211      	bcs.n	d68b4 <__aeabi_d2uiz+0x28>
   d6890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6894:	d211      	bcs.n	d68ba <__aeabi_d2uiz+0x2e>
   d6896:	d50d      	bpl.n	d68b4 <__aeabi_d2uiz+0x28>
   d6898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d689c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d68a0:	d40e      	bmi.n	d68c0 <__aeabi_d2uiz+0x34>
   d68a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d68a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d68aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d68ae:	fa23 f002 	lsr.w	r0, r3, r2
   d68b2:	4770      	bx	lr
   d68b4:	f04f 0000 	mov.w	r0, #0
   d68b8:	4770      	bx	lr
   d68ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d68be:	d102      	bne.n	d68c6 <__aeabi_d2uiz+0x3a>
   d68c0:	f04f 30ff 	mov.w	r0, #4294967295
   d68c4:	4770      	bx	lr
   d68c6:	f04f 0000 	mov.w	r0, #0
   d68ca:	4770      	bx	lr

000d68cc <__aeabi_d2f>:
   d68cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d68d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d68d4:	bf24      	itt	cs
   d68d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d68da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d68de:	d90d      	bls.n	d68fc <__aeabi_d2f+0x30>
   d68e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d68e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d68e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d68ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d68f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d68f4:	bf08      	it	eq
   d68f6:	f020 0001 	biceq.w	r0, r0, #1
   d68fa:	4770      	bx	lr
   d68fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6900:	d121      	bne.n	d6946 <__aeabi_d2f+0x7a>
   d6902:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6906:	bfbc      	itt	lt
   d6908:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d690c:	4770      	bxlt	lr
   d690e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6912:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6916:	f1c2 0218 	rsb	r2, r2, #24
   d691a:	f1c2 0c20 	rsb	ip, r2, #32
   d691e:	fa10 f30c 	lsls.w	r3, r0, ip
   d6922:	fa20 f002 	lsr.w	r0, r0, r2
   d6926:	bf18      	it	ne
   d6928:	f040 0001 	orrne.w	r0, r0, #1
   d692c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6930:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6934:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6938:	ea40 000c 	orr.w	r0, r0, ip
   d693c:	fa23 f302 	lsr.w	r3, r3, r2
   d6940:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6944:	e7cc      	b.n	d68e0 <__aeabi_d2f+0x14>
   d6946:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d694a:	d107      	bne.n	d695c <__aeabi_d2f+0x90>
   d694c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6950:	bf1e      	ittt	ne
   d6952:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6956:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d695a:	4770      	bxne	lr
   d695c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6960:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6964:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6968:	4770      	bx	lr
   d696a:	bf00      	nop

000d696c <__aeabi_d2ulz>:
   d696c:	b5d0      	push	{r4, r6, r7, lr}
   d696e:	4b0c      	ldr	r3, [pc, #48]	; (d69a0 <__aeabi_d2ulz+0x34>)
   d6970:	2200      	movs	r2, #0
   d6972:	4606      	mov	r6, r0
   d6974:	460f      	mov	r7, r1
   d6976:	f7ff fcef 	bl	d6358 <__aeabi_dmul>
   d697a:	f7ff ff87 	bl	d688c <__aeabi_d2uiz>
   d697e:	4604      	mov	r4, r0
   d6980:	f7ff fc70 	bl	d6264 <__aeabi_ui2d>
   d6984:	4b07      	ldr	r3, [pc, #28]	; (d69a4 <__aeabi_d2ulz+0x38>)
   d6986:	2200      	movs	r2, #0
   d6988:	f7ff fce6 	bl	d6358 <__aeabi_dmul>
   d698c:	4602      	mov	r2, r0
   d698e:	460b      	mov	r3, r1
   d6990:	4630      	mov	r0, r6
   d6992:	4639      	mov	r1, r7
   d6994:	f7ff fb28 	bl	d5fe8 <__aeabi_dsub>
   d6998:	f7ff ff78 	bl	d688c <__aeabi_d2uiz>
   d699c:	4621      	mov	r1, r4
   d699e:	bdd0      	pop	{r4, r6, r7, pc}
   d69a0:	3df00000 	.word	0x3df00000
   d69a4:	41f00000 	.word	0x41f00000

000d69a8 <atof>:
   d69a8:	2100      	movs	r1, #0
   d69aa:	f000 bf1f 	b.w	d77ec <strtod>
	...

000d69b0 <__cxa_atexit>:
   d69b0:	b510      	push	{r4, lr}
   d69b2:	4c05      	ldr	r4, [pc, #20]	; (d69c8 <__cxa_atexit+0x18>)
   d69b4:	4613      	mov	r3, r2
   d69b6:	b12c      	cbz	r4, d69c4 <__cxa_atexit+0x14>
   d69b8:	460a      	mov	r2, r1
   d69ba:	4601      	mov	r1, r0
   d69bc:	2002      	movs	r0, #2
   d69be:	f3af 8000 	nop.w
   d69c2:	bd10      	pop	{r4, pc}
   d69c4:	4620      	mov	r0, r4
   d69c6:	e7fc      	b.n	d69c2 <__cxa_atexit+0x12>
   d69c8:	00000000 	.word	0x00000000

000d69cc <memcpy>:
   d69cc:	440a      	add	r2, r1
   d69ce:	4291      	cmp	r1, r2
   d69d0:	f100 33ff 	add.w	r3, r0, #4294967295
   d69d4:	d100      	bne.n	d69d8 <memcpy+0xc>
   d69d6:	4770      	bx	lr
   d69d8:	b510      	push	{r4, lr}
   d69da:	f811 4b01 	ldrb.w	r4, [r1], #1
   d69de:	f803 4f01 	strb.w	r4, [r3, #1]!
   d69e2:	4291      	cmp	r1, r2
   d69e4:	d1f9      	bne.n	d69da <memcpy+0xe>
   d69e6:	bd10      	pop	{r4, pc}

000d69e8 <memmove>:
   d69e8:	4288      	cmp	r0, r1
   d69ea:	b510      	push	{r4, lr}
   d69ec:	eb01 0402 	add.w	r4, r1, r2
   d69f0:	d902      	bls.n	d69f8 <memmove+0x10>
   d69f2:	4284      	cmp	r4, r0
   d69f4:	4623      	mov	r3, r4
   d69f6:	d807      	bhi.n	d6a08 <memmove+0x20>
   d69f8:	1e43      	subs	r3, r0, #1
   d69fa:	42a1      	cmp	r1, r4
   d69fc:	d008      	beq.n	d6a10 <memmove+0x28>
   d69fe:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6a02:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6a06:	e7f8      	b.n	d69fa <memmove+0x12>
   d6a08:	4402      	add	r2, r0
   d6a0a:	4601      	mov	r1, r0
   d6a0c:	428a      	cmp	r2, r1
   d6a0e:	d100      	bne.n	d6a12 <memmove+0x2a>
   d6a10:	bd10      	pop	{r4, pc}
   d6a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d6a1a:	e7f7      	b.n	d6a0c <memmove+0x24>

000d6a1c <memset>:
   d6a1c:	4402      	add	r2, r0
   d6a1e:	4603      	mov	r3, r0
   d6a20:	4293      	cmp	r3, r2
   d6a22:	d100      	bne.n	d6a26 <memset+0xa>
   d6a24:	4770      	bx	lr
   d6a26:	f803 1b01 	strb.w	r1, [r3], #1
   d6a2a:	e7f9      	b.n	d6a20 <memset+0x4>

000d6a2c <srand>:
   d6a2c:	b538      	push	{r3, r4, r5, lr}
   d6a2e:	4b0d      	ldr	r3, [pc, #52]	; (d6a64 <srand+0x38>)
   d6a30:	681d      	ldr	r5, [r3, #0]
   d6a32:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6a34:	4604      	mov	r4, r0
   d6a36:	b97b      	cbnz	r3, d6a58 <srand+0x2c>
   d6a38:	2018      	movs	r0, #24
   d6a3a:	f7fe fa43 	bl	d4ec4 <malloc>
   d6a3e:	4a0a      	ldr	r2, [pc, #40]	; (d6a68 <srand+0x3c>)
   d6a40:	4b0a      	ldr	r3, [pc, #40]	; (d6a6c <srand+0x40>)
   d6a42:	63a8      	str	r0, [r5, #56]	; 0x38
   d6a44:	e9c0 2300 	strd	r2, r3, [r0]
   d6a48:	4b09      	ldr	r3, [pc, #36]	; (d6a70 <srand+0x44>)
   d6a4a:	6083      	str	r3, [r0, #8]
   d6a4c:	230b      	movs	r3, #11
   d6a4e:	8183      	strh	r3, [r0, #12]
   d6a50:	2201      	movs	r2, #1
   d6a52:	2300      	movs	r3, #0
   d6a54:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6a58:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6a5a:	2200      	movs	r2, #0
   d6a5c:	611c      	str	r4, [r3, #16]
   d6a5e:	615a      	str	r2, [r3, #20]
   d6a60:	bd38      	pop	{r3, r4, r5, pc}
   d6a62:	bf00      	nop
   d6a64:	2003e340 	.word	0x2003e340
   d6a68:	abcd330e 	.word	0xabcd330e
   d6a6c:	e66d1234 	.word	0xe66d1234
   d6a70:	0005deec 	.word	0x0005deec

000d6a74 <rand>:
   d6a74:	4b13      	ldr	r3, [pc, #76]	; (d6ac4 <rand+0x50>)
   d6a76:	b510      	push	{r4, lr}
   d6a78:	681c      	ldr	r4, [r3, #0]
   d6a7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6a7c:	b97b      	cbnz	r3, d6a9e <rand+0x2a>
   d6a7e:	2018      	movs	r0, #24
   d6a80:	f7fe fa20 	bl	d4ec4 <malloc>
   d6a84:	4a10      	ldr	r2, [pc, #64]	; (d6ac8 <rand+0x54>)
   d6a86:	4b11      	ldr	r3, [pc, #68]	; (d6acc <rand+0x58>)
   d6a88:	63a0      	str	r0, [r4, #56]	; 0x38
   d6a8a:	e9c0 2300 	strd	r2, r3, [r0]
   d6a8e:	4b10      	ldr	r3, [pc, #64]	; (d6ad0 <rand+0x5c>)
   d6a90:	6083      	str	r3, [r0, #8]
   d6a92:	230b      	movs	r3, #11
   d6a94:	8183      	strh	r3, [r0, #12]
   d6a96:	2201      	movs	r2, #1
   d6a98:	2300      	movs	r3, #0
   d6a9a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6a9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d6aa0:	480c      	ldr	r0, [pc, #48]	; (d6ad4 <rand+0x60>)
   d6aa2:	690a      	ldr	r2, [r1, #16]
   d6aa4:	694b      	ldr	r3, [r1, #20]
   d6aa6:	4c0c      	ldr	r4, [pc, #48]	; (d6ad8 <rand+0x64>)
   d6aa8:	4350      	muls	r0, r2
   d6aaa:	fb04 0003 	mla	r0, r4, r3, r0
   d6aae:	fba2 3404 	umull	r3, r4, r2, r4
   d6ab2:	1c5a      	adds	r2, r3, #1
   d6ab4:	4404      	add	r4, r0
   d6ab6:	f144 0000 	adc.w	r0, r4, #0
   d6aba:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d6abe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d6ac2:	bd10      	pop	{r4, pc}
   d6ac4:	2003e340 	.word	0x2003e340
   d6ac8:	abcd330e 	.word	0xabcd330e
   d6acc:	e66d1234 	.word	0xe66d1234
   d6ad0:	0005deec 	.word	0x0005deec
   d6ad4:	5851f42d 	.word	0x5851f42d
   d6ad8:	4c957f2d 	.word	0x4c957f2d

000d6adc <strcmp>:
   d6adc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d6ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d6ae4:	2a01      	cmp	r2, #1
   d6ae6:	bf28      	it	cs
   d6ae8:	429a      	cmpcs	r2, r3
   d6aea:	d0f7      	beq.n	d6adc <strcmp>
   d6aec:	1ad0      	subs	r0, r2, r3
   d6aee:	4770      	bx	lr

000d6af0 <strcpy>:
   d6af0:	4603      	mov	r3, r0
   d6af2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6af6:	f803 2b01 	strb.w	r2, [r3], #1
   d6afa:	2a00      	cmp	r2, #0
   d6afc:	d1f9      	bne.n	d6af2 <strcpy+0x2>
   d6afe:	4770      	bx	lr

000d6b00 <strlen>:
   d6b00:	4603      	mov	r3, r0
   d6b02:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6b06:	2a00      	cmp	r2, #0
   d6b08:	d1fb      	bne.n	d6b02 <strlen+0x2>
   d6b0a:	1a18      	subs	r0, r3, r0
   d6b0c:	3801      	subs	r0, #1
   d6b0e:	4770      	bx	lr

000d6b10 <strncasecmp>:
   d6b10:	b570      	push	{r4, r5, r6, lr}
   d6b12:	4e0f      	ldr	r6, [pc, #60]	; (d6b50 <strncasecmp+0x40>)
   d6b14:	4604      	mov	r4, r0
   d6b16:	440a      	add	r2, r1
   d6b18:	428a      	cmp	r2, r1
   d6b1a:	d101      	bne.n	d6b20 <strncasecmp+0x10>
   d6b1c:	2000      	movs	r0, #0
   d6b1e:	e013      	b.n	d6b48 <strncasecmp+0x38>
   d6b20:	f814 3b01 	ldrb.w	r3, [r4], #1
   d6b24:	5d98      	ldrb	r0, [r3, r6]
   d6b26:	f000 0003 	and.w	r0, r0, #3
   d6b2a:	2801      	cmp	r0, #1
   d6b2c:	f811 0b01 	ldrb.w	r0, [r1], #1
   d6b30:	5c35      	ldrb	r5, [r6, r0]
   d6b32:	f005 0503 	and.w	r5, r5, #3
   d6b36:	bf08      	it	eq
   d6b38:	3320      	addeq	r3, #32
   d6b3a:	2d01      	cmp	r5, #1
   d6b3c:	bf08      	it	eq
   d6b3e:	3020      	addeq	r0, #32
   d6b40:	1a1b      	subs	r3, r3, r0
   d6b42:	d102      	bne.n	d6b4a <strncasecmp+0x3a>
   d6b44:	2800      	cmp	r0, #0
   d6b46:	d1e7      	bne.n	d6b18 <strncasecmp+0x8>
   d6b48:	bd70      	pop	{r4, r5, r6, pc}
   d6b4a:	4618      	mov	r0, r3
   d6b4c:	e7fc      	b.n	d6b48 <strncasecmp+0x38>
   d6b4e:	bf00      	nop
   d6b50:	000d8e79 	.word	0x000d8e79

000d6b54 <strncmp>:
   d6b54:	b510      	push	{r4, lr}
   d6b56:	b16a      	cbz	r2, d6b74 <strncmp+0x20>
   d6b58:	3901      	subs	r1, #1
   d6b5a:	1884      	adds	r4, r0, r2
   d6b5c:	f810 3b01 	ldrb.w	r3, [r0], #1
   d6b60:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6b64:	4293      	cmp	r3, r2
   d6b66:	d103      	bne.n	d6b70 <strncmp+0x1c>
   d6b68:	42a0      	cmp	r0, r4
   d6b6a:	d001      	beq.n	d6b70 <strncmp+0x1c>
   d6b6c:	2b00      	cmp	r3, #0
   d6b6e:	d1f5      	bne.n	d6b5c <strncmp+0x8>
   d6b70:	1a98      	subs	r0, r3, r2
   d6b72:	bd10      	pop	{r4, pc}
   d6b74:	4610      	mov	r0, r2
   d6b76:	e7fc      	b.n	d6b72 <strncmp+0x1e>

000d6b78 <strncpy>:
   d6b78:	b510      	push	{r4, lr}
   d6b7a:	3901      	subs	r1, #1
   d6b7c:	4603      	mov	r3, r0
   d6b7e:	b132      	cbz	r2, d6b8e <strncpy+0x16>
   d6b80:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6b84:	f803 4b01 	strb.w	r4, [r3], #1
   d6b88:	3a01      	subs	r2, #1
   d6b8a:	2c00      	cmp	r4, #0
   d6b8c:	d1f7      	bne.n	d6b7e <strncpy+0x6>
   d6b8e:	441a      	add	r2, r3
   d6b90:	2100      	movs	r1, #0
   d6b92:	4293      	cmp	r3, r2
   d6b94:	d100      	bne.n	d6b98 <strncpy+0x20>
   d6b96:	bd10      	pop	{r4, pc}
   d6b98:	f803 1b01 	strb.w	r1, [r3], #1
   d6b9c:	e7f9      	b.n	d6b92 <strncpy+0x1a>

000d6b9e <sulp>:
   d6b9e:	b570      	push	{r4, r5, r6, lr}
   d6ba0:	4604      	mov	r4, r0
   d6ba2:	460d      	mov	r5, r1
   d6ba4:	ec45 4b10 	vmov	d0, r4, r5
   d6ba8:	4616      	mov	r6, r2
   d6baa:	f001 fc97 	bl	d84dc <__ulp>
   d6bae:	ec51 0b10 	vmov	r0, r1, d0
   d6bb2:	b17e      	cbz	r6, d6bd4 <sulp+0x36>
   d6bb4:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d6bb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d6bbc:	2b00      	cmp	r3, #0
   d6bbe:	dd09      	ble.n	d6bd4 <sulp+0x36>
   d6bc0:	051b      	lsls	r3, r3, #20
   d6bc2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d6bc6:	2400      	movs	r4, #0
   d6bc8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d6bcc:	4622      	mov	r2, r4
   d6bce:	462b      	mov	r3, r5
   d6bd0:	f7ff fbc2 	bl	d6358 <__aeabi_dmul>
   d6bd4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6bd8 <_strtod_l>:
   d6bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6bdc:	b0a3      	sub	sp, #140	; 0x8c
   d6bde:	461f      	mov	r7, r3
   d6be0:	2300      	movs	r3, #0
   d6be2:	931e      	str	r3, [sp, #120]	; 0x78
   d6be4:	4ba4      	ldr	r3, [pc, #656]	; (d6e78 <_strtod_l+0x2a0>)
   d6be6:	9219      	str	r2, [sp, #100]	; 0x64
   d6be8:	681b      	ldr	r3, [r3, #0]
   d6bea:	9307      	str	r3, [sp, #28]
   d6bec:	4604      	mov	r4, r0
   d6bee:	4618      	mov	r0, r3
   d6bf0:	4688      	mov	r8, r1
   d6bf2:	f7ff ff85 	bl	d6b00 <strlen>
   d6bf6:	f04f 0a00 	mov.w	sl, #0
   d6bfa:	4605      	mov	r5, r0
   d6bfc:	f04f 0b00 	mov.w	fp, #0
   d6c00:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d6c04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d6c06:	781a      	ldrb	r2, [r3, #0]
   d6c08:	2a2b      	cmp	r2, #43	; 0x2b
   d6c0a:	d04c      	beq.n	d6ca6 <_strtod_l+0xce>
   d6c0c:	d839      	bhi.n	d6c82 <_strtod_l+0xaa>
   d6c0e:	2a0d      	cmp	r2, #13
   d6c10:	d832      	bhi.n	d6c78 <_strtod_l+0xa0>
   d6c12:	2a08      	cmp	r2, #8
   d6c14:	d832      	bhi.n	d6c7c <_strtod_l+0xa4>
   d6c16:	2a00      	cmp	r2, #0
   d6c18:	d03c      	beq.n	d6c94 <_strtod_l+0xbc>
   d6c1a:	2300      	movs	r3, #0
   d6c1c:	930e      	str	r3, [sp, #56]	; 0x38
   d6c1e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d6c20:	7833      	ldrb	r3, [r6, #0]
   d6c22:	2b30      	cmp	r3, #48	; 0x30
   d6c24:	f040 80b4 	bne.w	d6d90 <_strtod_l+0x1b8>
   d6c28:	7873      	ldrb	r3, [r6, #1]
   d6c2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d6c2e:	2b58      	cmp	r3, #88	; 0x58
   d6c30:	d16c      	bne.n	d6d0c <_strtod_l+0x134>
   d6c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d6c34:	9301      	str	r3, [sp, #4]
   d6c36:	ab1e      	add	r3, sp, #120	; 0x78
   d6c38:	9702      	str	r7, [sp, #8]
   d6c3a:	9300      	str	r3, [sp, #0]
   d6c3c:	4a8f      	ldr	r2, [pc, #572]	; (d6e7c <_strtod_l+0x2a4>)
   d6c3e:	ab1f      	add	r3, sp, #124	; 0x7c
   d6c40:	a91d      	add	r1, sp, #116	; 0x74
   d6c42:	4620      	mov	r0, r4
   d6c44:	f000 fe46 	bl	d78d4 <__gethex>
   d6c48:	f010 0707 	ands.w	r7, r0, #7
   d6c4c:	4605      	mov	r5, r0
   d6c4e:	d005      	beq.n	d6c5c <_strtod_l+0x84>
   d6c50:	2f06      	cmp	r7, #6
   d6c52:	d12a      	bne.n	d6caa <_strtod_l+0xd2>
   d6c54:	3601      	adds	r6, #1
   d6c56:	2300      	movs	r3, #0
   d6c58:	961d      	str	r6, [sp, #116]	; 0x74
   d6c5a:	930e      	str	r3, [sp, #56]	; 0x38
   d6c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d6c5e:	2b00      	cmp	r3, #0
   d6c60:	f040 8596 	bne.w	d7790 <_strtod_l+0xbb8>
   d6c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d6c66:	b1db      	cbz	r3, d6ca0 <_strtod_l+0xc8>
   d6c68:	4652      	mov	r2, sl
   d6c6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d6c6e:	ec43 2b10 	vmov	d0, r2, r3
   d6c72:	b023      	add	sp, #140	; 0x8c
   d6c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6c78:	2a20      	cmp	r2, #32
   d6c7a:	d1ce      	bne.n	d6c1a <_strtod_l+0x42>
   d6c7c:	3301      	adds	r3, #1
   d6c7e:	931d      	str	r3, [sp, #116]	; 0x74
   d6c80:	e7c0      	b.n	d6c04 <_strtod_l+0x2c>
   d6c82:	2a2d      	cmp	r2, #45	; 0x2d
   d6c84:	d1c9      	bne.n	d6c1a <_strtod_l+0x42>
   d6c86:	2201      	movs	r2, #1
   d6c88:	920e      	str	r2, [sp, #56]	; 0x38
   d6c8a:	1c5a      	adds	r2, r3, #1
   d6c8c:	921d      	str	r2, [sp, #116]	; 0x74
   d6c8e:	785b      	ldrb	r3, [r3, #1]
   d6c90:	2b00      	cmp	r3, #0
   d6c92:	d1c4      	bne.n	d6c1e <_strtod_l+0x46>
   d6c94:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d6c96:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d6c9a:	2b00      	cmp	r3, #0
   d6c9c:	f040 8576 	bne.w	d778c <_strtod_l+0xbb4>
   d6ca0:	4652      	mov	r2, sl
   d6ca2:	465b      	mov	r3, fp
   d6ca4:	e7e3      	b.n	d6c6e <_strtod_l+0x96>
   d6ca6:	2200      	movs	r2, #0
   d6ca8:	e7ee      	b.n	d6c88 <_strtod_l+0xb0>
   d6caa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d6cac:	b13a      	cbz	r2, d6cbe <_strtod_l+0xe6>
   d6cae:	2135      	movs	r1, #53	; 0x35
   d6cb0:	a820      	add	r0, sp, #128	; 0x80
   d6cb2:	f001 fd12 	bl	d86da <__copybits>
   d6cb6:	991e      	ldr	r1, [sp, #120]	; 0x78
   d6cb8:	4620      	mov	r0, r4
   d6cba:	f001 f947 	bl	d7f4c <_Bfree>
   d6cbe:	3f01      	subs	r7, #1
   d6cc0:	2f05      	cmp	r7, #5
   d6cc2:	d807      	bhi.n	d6cd4 <_strtod_l+0xfc>
   d6cc4:	e8df f007 	tbb	[pc, r7]
   d6cc8:	1d180b0e 	.word	0x1d180b0e
   d6ccc:	030e      	.short	0x030e
   d6cce:	f04f 0b00 	mov.w	fp, #0
   d6cd2:	46da      	mov	sl, fp
   d6cd4:	0728      	lsls	r0, r5, #28
   d6cd6:	d5c1      	bpl.n	d6c5c <_strtod_l+0x84>
   d6cd8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d6cdc:	e7be      	b.n	d6c5c <_strtod_l+0x84>
   d6cde:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d6ce2:	e7f7      	b.n	d6cd4 <_strtod_l+0xfc>
   d6ce4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d6ce8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d6cea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d6cee:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d6cf2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d6cf6:	e7ed      	b.n	d6cd4 <_strtod_l+0xfc>
   d6cf8:	f8df b184 	ldr.w	fp, [pc, #388]	; d6e80 <_strtod_l+0x2a8>
   d6cfc:	f04f 0a00 	mov.w	sl, #0
   d6d00:	e7e8      	b.n	d6cd4 <_strtod_l+0xfc>
   d6d02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d6d06:	f04f 3aff 	mov.w	sl, #4294967295
   d6d0a:	e7e3      	b.n	d6cd4 <_strtod_l+0xfc>
   d6d0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d6d0e:	1c5a      	adds	r2, r3, #1
   d6d10:	921d      	str	r2, [sp, #116]	; 0x74
   d6d12:	785b      	ldrb	r3, [r3, #1]
   d6d14:	2b30      	cmp	r3, #48	; 0x30
   d6d16:	d0f9      	beq.n	d6d0c <_strtod_l+0x134>
   d6d18:	2b00      	cmp	r3, #0
   d6d1a:	d09f      	beq.n	d6c5c <_strtod_l+0x84>
   d6d1c:	2301      	movs	r3, #1
   d6d1e:	f04f 0900 	mov.w	r9, #0
   d6d22:	9304      	str	r3, [sp, #16]
   d6d24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d6d26:	930a      	str	r3, [sp, #40]	; 0x28
   d6d28:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d6d2c:	464f      	mov	r7, r9
   d6d2e:	220a      	movs	r2, #10
   d6d30:	981d      	ldr	r0, [sp, #116]	; 0x74
   d6d32:	7806      	ldrb	r6, [r0, #0]
   d6d34:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d6d38:	b2d9      	uxtb	r1, r3
   d6d3a:	2909      	cmp	r1, #9
   d6d3c:	d92a      	bls.n	d6d94 <_strtod_l+0x1bc>
   d6d3e:	9907      	ldr	r1, [sp, #28]
   d6d40:	462a      	mov	r2, r5
   d6d42:	f7ff ff07 	bl	d6b54 <strncmp>
   d6d46:	b398      	cbz	r0, d6db0 <_strtod_l+0x1d8>
   d6d48:	2000      	movs	r0, #0
   d6d4a:	4633      	mov	r3, r6
   d6d4c:	463d      	mov	r5, r7
   d6d4e:	9007      	str	r0, [sp, #28]
   d6d50:	4602      	mov	r2, r0
   d6d52:	2b65      	cmp	r3, #101	; 0x65
   d6d54:	d001      	beq.n	d6d5a <_strtod_l+0x182>
   d6d56:	2b45      	cmp	r3, #69	; 0x45
   d6d58:	d118      	bne.n	d6d8c <_strtod_l+0x1b4>
   d6d5a:	b91d      	cbnz	r5, d6d64 <_strtod_l+0x18c>
   d6d5c:	9b04      	ldr	r3, [sp, #16]
   d6d5e:	4303      	orrs	r3, r0
   d6d60:	d098      	beq.n	d6c94 <_strtod_l+0xbc>
   d6d62:	2500      	movs	r5, #0
   d6d64:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d6d68:	f108 0301 	add.w	r3, r8, #1
   d6d6c:	931d      	str	r3, [sp, #116]	; 0x74
   d6d6e:	f898 3001 	ldrb.w	r3, [r8, #1]
   d6d72:	2b2b      	cmp	r3, #43	; 0x2b
   d6d74:	d075      	beq.n	d6e62 <_strtod_l+0x28a>
   d6d76:	2b2d      	cmp	r3, #45	; 0x2d
   d6d78:	d07b      	beq.n	d6e72 <_strtod_l+0x29a>
   d6d7a:	f04f 0c00 	mov.w	ip, #0
   d6d7e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d6d82:	2909      	cmp	r1, #9
   d6d84:	f240 8082 	bls.w	d6e8c <_strtod_l+0x2b4>
   d6d88:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d6d8c:	2600      	movs	r6, #0
   d6d8e:	e09d      	b.n	d6ecc <_strtod_l+0x2f4>
   d6d90:	2300      	movs	r3, #0
   d6d92:	e7c4      	b.n	d6d1e <_strtod_l+0x146>
   d6d94:	2f08      	cmp	r7, #8
   d6d96:	bfd8      	it	le
   d6d98:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d6d9a:	f100 0001 	add.w	r0, r0, #1
   d6d9e:	bfda      	itte	le
   d6da0:	fb02 3301 	mlale	r3, r2, r1, r3
   d6da4:	9309      	strle	r3, [sp, #36]	; 0x24
   d6da6:	fb02 3909 	mlagt	r9, r2, r9, r3
   d6daa:	3701      	adds	r7, #1
   d6dac:	901d      	str	r0, [sp, #116]	; 0x74
   d6dae:	e7bf      	b.n	d6d30 <_strtod_l+0x158>
   d6db0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d6db2:	195a      	adds	r2, r3, r5
   d6db4:	921d      	str	r2, [sp, #116]	; 0x74
   d6db6:	5d5b      	ldrb	r3, [r3, r5]
   d6db8:	2f00      	cmp	r7, #0
   d6dba:	d037      	beq.n	d6e2c <_strtod_l+0x254>
   d6dbc:	9007      	str	r0, [sp, #28]
   d6dbe:	463d      	mov	r5, r7
   d6dc0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d6dc4:	2a09      	cmp	r2, #9
   d6dc6:	d912      	bls.n	d6dee <_strtod_l+0x216>
   d6dc8:	2201      	movs	r2, #1
   d6dca:	e7c2      	b.n	d6d52 <_strtod_l+0x17a>
   d6dcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d6dce:	1c5a      	adds	r2, r3, #1
   d6dd0:	921d      	str	r2, [sp, #116]	; 0x74
   d6dd2:	785b      	ldrb	r3, [r3, #1]
   d6dd4:	3001      	adds	r0, #1
   d6dd6:	2b30      	cmp	r3, #48	; 0x30
   d6dd8:	d0f8      	beq.n	d6dcc <_strtod_l+0x1f4>
   d6dda:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d6dde:	2a08      	cmp	r2, #8
   d6de0:	f200 84db 	bhi.w	d779a <_strtod_l+0xbc2>
   d6de4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d6de6:	9007      	str	r0, [sp, #28]
   d6de8:	2000      	movs	r0, #0
   d6dea:	920a      	str	r2, [sp, #40]	; 0x28
   d6dec:	4605      	mov	r5, r0
   d6dee:	3b30      	subs	r3, #48	; 0x30
   d6df0:	f100 0201 	add.w	r2, r0, #1
   d6df4:	d014      	beq.n	d6e20 <_strtod_l+0x248>
   d6df6:	9907      	ldr	r1, [sp, #28]
   d6df8:	4411      	add	r1, r2
   d6dfa:	9107      	str	r1, [sp, #28]
   d6dfc:	462a      	mov	r2, r5
   d6dfe:	eb00 0e05 	add.w	lr, r0, r5
   d6e02:	210a      	movs	r1, #10
   d6e04:	4572      	cmp	r2, lr
   d6e06:	d113      	bne.n	d6e30 <_strtod_l+0x258>
   d6e08:	182a      	adds	r2, r5, r0
   d6e0a:	2a08      	cmp	r2, #8
   d6e0c:	f105 0501 	add.w	r5, r5, #1
   d6e10:	4405      	add	r5, r0
   d6e12:	dc1c      	bgt.n	d6e4e <_strtod_l+0x276>
   d6e14:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6e16:	220a      	movs	r2, #10
   d6e18:	fb02 3301 	mla	r3, r2, r1, r3
   d6e1c:	9309      	str	r3, [sp, #36]	; 0x24
   d6e1e:	2200      	movs	r2, #0
   d6e20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d6e22:	1c59      	adds	r1, r3, #1
   d6e24:	911d      	str	r1, [sp, #116]	; 0x74
   d6e26:	785b      	ldrb	r3, [r3, #1]
   d6e28:	4610      	mov	r0, r2
   d6e2a:	e7c9      	b.n	d6dc0 <_strtod_l+0x1e8>
   d6e2c:	4638      	mov	r0, r7
   d6e2e:	e7d2      	b.n	d6dd6 <_strtod_l+0x1fe>
   d6e30:	2a08      	cmp	r2, #8
   d6e32:	dc04      	bgt.n	d6e3e <_strtod_l+0x266>
   d6e34:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6e36:	434e      	muls	r6, r1
   d6e38:	9609      	str	r6, [sp, #36]	; 0x24
   d6e3a:	3201      	adds	r2, #1
   d6e3c:	e7e2      	b.n	d6e04 <_strtod_l+0x22c>
   d6e3e:	f102 0c01 	add.w	ip, r2, #1
   d6e42:	f1bc 0f10 	cmp.w	ip, #16
   d6e46:	bfd8      	it	le
   d6e48:	fb01 f909 	mulle.w	r9, r1, r9
   d6e4c:	e7f5      	b.n	d6e3a <_strtod_l+0x262>
   d6e4e:	2d10      	cmp	r5, #16
   d6e50:	bfdc      	itt	le
   d6e52:	220a      	movle	r2, #10
   d6e54:	fb02 3909 	mlale	r9, r2, r9, r3
   d6e58:	e7e1      	b.n	d6e1e <_strtod_l+0x246>
   d6e5a:	2300      	movs	r3, #0
   d6e5c:	9307      	str	r3, [sp, #28]
   d6e5e:	2201      	movs	r2, #1
   d6e60:	e77c      	b.n	d6d5c <_strtod_l+0x184>
   d6e62:	f04f 0c00 	mov.w	ip, #0
   d6e66:	f108 0302 	add.w	r3, r8, #2
   d6e6a:	931d      	str	r3, [sp, #116]	; 0x74
   d6e6c:	f898 3002 	ldrb.w	r3, [r8, #2]
   d6e70:	e785      	b.n	d6d7e <_strtod_l+0x1a6>
   d6e72:	f04f 0c01 	mov.w	ip, #1
   d6e76:	e7f6      	b.n	d6e66 <_strtod_l+0x28e>
   d6e78:	000d8f7c 	.word	0x000d8f7c
   d6e7c:	000d8e28 	.word	0x000d8e28
   d6e80:	7ff00000 	.word	0x7ff00000
   d6e84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d6e86:	1c59      	adds	r1, r3, #1
   d6e88:	911d      	str	r1, [sp, #116]	; 0x74
   d6e8a:	785b      	ldrb	r3, [r3, #1]
   d6e8c:	2b30      	cmp	r3, #48	; 0x30
   d6e8e:	d0f9      	beq.n	d6e84 <_strtod_l+0x2ac>
   d6e90:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d6e94:	2908      	cmp	r1, #8
   d6e96:	f63f af79 	bhi.w	d6d8c <_strtod_l+0x1b4>
   d6e9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d6e9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d6ea0:	9308      	str	r3, [sp, #32]
   d6ea2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d6ea4:	1c59      	adds	r1, r3, #1
   d6ea6:	911d      	str	r1, [sp, #116]	; 0x74
   d6ea8:	785b      	ldrb	r3, [r3, #1]
   d6eaa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d6eae:	2e09      	cmp	r6, #9
   d6eb0:	d937      	bls.n	d6f22 <_strtod_l+0x34a>
   d6eb2:	9e08      	ldr	r6, [sp, #32]
   d6eb4:	1b89      	subs	r1, r1, r6
   d6eb6:	2908      	cmp	r1, #8
   d6eb8:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d6ebc:	dc02      	bgt.n	d6ec4 <_strtod_l+0x2ec>
   d6ebe:	4576      	cmp	r6, lr
   d6ec0:	bfa8      	it	ge
   d6ec2:	4676      	movge	r6, lr
   d6ec4:	f1bc 0f00 	cmp.w	ip, #0
   d6ec8:	d000      	beq.n	d6ecc <_strtod_l+0x2f4>
   d6eca:	4276      	negs	r6, r6
   d6ecc:	2d00      	cmp	r5, #0
   d6ece:	d14f      	bne.n	d6f70 <_strtod_l+0x398>
   d6ed0:	9904      	ldr	r1, [sp, #16]
   d6ed2:	4301      	orrs	r1, r0
   d6ed4:	f47f aec2 	bne.w	d6c5c <_strtod_l+0x84>
   d6ed8:	2a00      	cmp	r2, #0
   d6eda:	f47f aedb 	bne.w	d6c94 <_strtod_l+0xbc>
   d6ede:	2b69      	cmp	r3, #105	; 0x69
   d6ee0:	d027      	beq.n	d6f32 <_strtod_l+0x35a>
   d6ee2:	dc24      	bgt.n	d6f2e <_strtod_l+0x356>
   d6ee4:	2b49      	cmp	r3, #73	; 0x49
   d6ee6:	d024      	beq.n	d6f32 <_strtod_l+0x35a>
   d6ee8:	2b4e      	cmp	r3, #78	; 0x4e
   d6eea:	f47f aed3 	bne.w	d6c94 <_strtod_l+0xbc>
   d6eee:	499e      	ldr	r1, [pc, #632]	; (d7168 <_strtod_l+0x590>)
   d6ef0:	a81d      	add	r0, sp, #116	; 0x74
   d6ef2:	f000 ff35 	bl	d7d60 <__match>
   d6ef6:	2800      	cmp	r0, #0
   d6ef8:	f43f aecc 	beq.w	d6c94 <_strtod_l+0xbc>
   d6efc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d6efe:	781b      	ldrb	r3, [r3, #0]
   d6f00:	2b28      	cmp	r3, #40	; 0x28
   d6f02:	d12d      	bne.n	d6f60 <_strtod_l+0x388>
   d6f04:	4999      	ldr	r1, [pc, #612]	; (d716c <_strtod_l+0x594>)
   d6f06:	aa20      	add	r2, sp, #128	; 0x80
   d6f08:	a81d      	add	r0, sp, #116	; 0x74
   d6f0a:	f000 ff3d 	bl	d7d88 <__hexnan>
   d6f0e:	2805      	cmp	r0, #5
   d6f10:	d126      	bne.n	d6f60 <_strtod_l+0x388>
   d6f12:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d6f14:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d6f18:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d6f1c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d6f20:	e69c      	b.n	d6c5c <_strtod_l+0x84>
   d6f22:	210a      	movs	r1, #10
   d6f24:	fb01 3e0e 	mla	lr, r1, lr, r3
   d6f28:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d6f2c:	e7b9      	b.n	d6ea2 <_strtod_l+0x2ca>
   d6f2e:	2b6e      	cmp	r3, #110	; 0x6e
   d6f30:	e7db      	b.n	d6eea <_strtod_l+0x312>
   d6f32:	498f      	ldr	r1, [pc, #572]	; (d7170 <_strtod_l+0x598>)
   d6f34:	a81d      	add	r0, sp, #116	; 0x74
   d6f36:	f000 ff13 	bl	d7d60 <__match>
   d6f3a:	2800      	cmp	r0, #0
   d6f3c:	f43f aeaa 	beq.w	d6c94 <_strtod_l+0xbc>
   d6f40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d6f42:	498c      	ldr	r1, [pc, #560]	; (d7174 <_strtod_l+0x59c>)
   d6f44:	3b01      	subs	r3, #1
   d6f46:	a81d      	add	r0, sp, #116	; 0x74
   d6f48:	931d      	str	r3, [sp, #116]	; 0x74
   d6f4a:	f000 ff09 	bl	d7d60 <__match>
   d6f4e:	b910      	cbnz	r0, d6f56 <_strtod_l+0x37e>
   d6f50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d6f52:	3301      	adds	r3, #1
   d6f54:	931d      	str	r3, [sp, #116]	; 0x74
   d6f56:	f8df b22c 	ldr.w	fp, [pc, #556]	; d7184 <_strtod_l+0x5ac>
   d6f5a:	f04f 0a00 	mov.w	sl, #0
   d6f5e:	e67d      	b.n	d6c5c <_strtod_l+0x84>
   d6f60:	4885      	ldr	r0, [pc, #532]	; (d7178 <_strtod_l+0x5a0>)
   d6f62:	f001 fc0d 	bl	d8780 <nan>
   d6f66:	ed8d 0b04 	vstr	d0, [sp, #16]
   d6f6a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d6f6e:	e675      	b.n	d6c5c <_strtod_l+0x84>
   d6f70:	9b07      	ldr	r3, [sp, #28]
   d6f72:	9809      	ldr	r0, [sp, #36]	; 0x24
   d6f74:	1af3      	subs	r3, r6, r3
   d6f76:	2f00      	cmp	r7, #0
   d6f78:	bf08      	it	eq
   d6f7a:	462f      	moveq	r7, r5
   d6f7c:	2d10      	cmp	r5, #16
   d6f7e:	9308      	str	r3, [sp, #32]
   d6f80:	46a8      	mov	r8, r5
   d6f82:	bfa8      	it	ge
   d6f84:	f04f 0810 	movge.w	r8, #16
   d6f88:	f7ff f96c 	bl	d6264 <__aeabi_ui2d>
   d6f8c:	2d09      	cmp	r5, #9
   d6f8e:	4682      	mov	sl, r0
   d6f90:	468b      	mov	fp, r1
   d6f92:	dd13      	ble.n	d6fbc <_strtod_l+0x3e4>
   d6f94:	4b79      	ldr	r3, [pc, #484]	; (d717c <_strtod_l+0x5a4>)
   d6f96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d6f9a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d6f9e:	f7ff f9db 	bl	d6358 <__aeabi_dmul>
   d6fa2:	4682      	mov	sl, r0
   d6fa4:	4648      	mov	r0, r9
   d6fa6:	468b      	mov	fp, r1
   d6fa8:	f7ff f95c 	bl	d6264 <__aeabi_ui2d>
   d6fac:	4602      	mov	r2, r0
   d6fae:	460b      	mov	r3, r1
   d6fb0:	4650      	mov	r0, sl
   d6fb2:	4659      	mov	r1, fp
   d6fb4:	f7ff f81a 	bl	d5fec <__adddf3>
   d6fb8:	4682      	mov	sl, r0
   d6fba:	468b      	mov	fp, r1
   d6fbc:	2d0f      	cmp	r5, #15
   d6fbe:	dc38      	bgt.n	d7032 <_strtod_l+0x45a>
   d6fc0:	9b08      	ldr	r3, [sp, #32]
   d6fc2:	2b00      	cmp	r3, #0
   d6fc4:	f43f ae4a 	beq.w	d6c5c <_strtod_l+0x84>
   d6fc8:	dd24      	ble.n	d7014 <_strtod_l+0x43c>
   d6fca:	2b16      	cmp	r3, #22
   d6fcc:	dc0b      	bgt.n	d6fe6 <_strtod_l+0x40e>
   d6fce:	4d6b      	ldr	r5, [pc, #428]	; (d717c <_strtod_l+0x5a4>)
   d6fd0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d6fd4:	e9d5 0100 	ldrd	r0, r1, [r5]
   d6fd8:	4652      	mov	r2, sl
   d6fda:	465b      	mov	r3, fp
   d6fdc:	f7ff f9bc 	bl	d6358 <__aeabi_dmul>
   d6fe0:	4682      	mov	sl, r0
   d6fe2:	468b      	mov	fp, r1
   d6fe4:	e63a      	b.n	d6c5c <_strtod_l+0x84>
   d6fe6:	9a08      	ldr	r2, [sp, #32]
   d6fe8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d6fec:	4293      	cmp	r3, r2
   d6fee:	db20      	blt.n	d7032 <_strtod_l+0x45a>
   d6ff0:	4c62      	ldr	r4, [pc, #392]	; (d717c <_strtod_l+0x5a4>)
   d6ff2:	f1c5 050f 	rsb	r5, r5, #15
   d6ff6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d6ffa:	4652      	mov	r2, sl
   d6ffc:	465b      	mov	r3, fp
   d6ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7002:	f7ff f9a9 	bl	d6358 <__aeabi_dmul>
   d7006:	9b08      	ldr	r3, [sp, #32]
   d7008:	1b5d      	subs	r5, r3, r5
   d700a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d700e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d7012:	e7e3      	b.n	d6fdc <_strtod_l+0x404>
   d7014:	9b08      	ldr	r3, [sp, #32]
   d7016:	3316      	adds	r3, #22
   d7018:	db0b      	blt.n	d7032 <_strtod_l+0x45a>
   d701a:	9b07      	ldr	r3, [sp, #28]
   d701c:	4a57      	ldr	r2, [pc, #348]	; (d717c <_strtod_l+0x5a4>)
   d701e:	1b9e      	subs	r6, r3, r6
   d7020:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d7024:	e9d6 2300 	ldrd	r2, r3, [r6]
   d7028:	4650      	mov	r0, sl
   d702a:	4659      	mov	r1, fp
   d702c:	f7ff fabe 	bl	d65ac <__aeabi_ddiv>
   d7030:	e7d6      	b.n	d6fe0 <_strtod_l+0x408>
   d7032:	9b08      	ldr	r3, [sp, #32]
   d7034:	eba5 0808 	sub.w	r8, r5, r8
   d7038:	4498      	add	r8, r3
   d703a:	f1b8 0f00 	cmp.w	r8, #0
   d703e:	dd71      	ble.n	d7124 <_strtod_l+0x54c>
   d7040:	f018 030f 	ands.w	r3, r8, #15
   d7044:	d00a      	beq.n	d705c <_strtod_l+0x484>
   d7046:	494d      	ldr	r1, [pc, #308]	; (d717c <_strtod_l+0x5a4>)
   d7048:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d704c:	4652      	mov	r2, sl
   d704e:	465b      	mov	r3, fp
   d7050:	e9d1 0100 	ldrd	r0, r1, [r1]
   d7054:	f7ff f980 	bl	d6358 <__aeabi_dmul>
   d7058:	4682      	mov	sl, r0
   d705a:	468b      	mov	fp, r1
   d705c:	f038 080f 	bics.w	r8, r8, #15
   d7060:	d04d      	beq.n	d70fe <_strtod_l+0x526>
   d7062:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d7066:	dd22      	ble.n	d70ae <_strtod_l+0x4d6>
   d7068:	2500      	movs	r5, #0
   d706a:	462e      	mov	r6, r5
   d706c:	9509      	str	r5, [sp, #36]	; 0x24
   d706e:	9507      	str	r5, [sp, #28]
   d7070:	2322      	movs	r3, #34	; 0x22
   d7072:	f8df b110 	ldr.w	fp, [pc, #272]	; d7184 <_strtod_l+0x5ac>
   d7076:	6023      	str	r3, [r4, #0]
   d7078:	f04f 0a00 	mov.w	sl, #0
   d707c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d707e:	2b00      	cmp	r3, #0
   d7080:	f43f adec 	beq.w	d6c5c <_strtod_l+0x84>
   d7084:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7086:	4620      	mov	r0, r4
   d7088:	f000 ff60 	bl	d7f4c <_Bfree>
   d708c:	9907      	ldr	r1, [sp, #28]
   d708e:	4620      	mov	r0, r4
   d7090:	f000 ff5c 	bl	d7f4c <_Bfree>
   d7094:	4631      	mov	r1, r6
   d7096:	4620      	mov	r0, r4
   d7098:	f000 ff58 	bl	d7f4c <_Bfree>
   d709c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d709e:	4620      	mov	r0, r4
   d70a0:	f000 ff54 	bl	d7f4c <_Bfree>
   d70a4:	4629      	mov	r1, r5
   d70a6:	4620      	mov	r0, r4
   d70a8:	f000 ff50 	bl	d7f4c <_Bfree>
   d70ac:	e5d6      	b.n	d6c5c <_strtod_l+0x84>
   d70ae:	2300      	movs	r3, #0
   d70b0:	ea4f 1828 	mov.w	r8, r8, asr #4
   d70b4:	4650      	mov	r0, sl
   d70b6:	4659      	mov	r1, fp
   d70b8:	4699      	mov	r9, r3
   d70ba:	f1b8 0f01 	cmp.w	r8, #1
   d70be:	dc21      	bgt.n	d7104 <_strtod_l+0x52c>
   d70c0:	b10b      	cbz	r3, d70c6 <_strtod_l+0x4ee>
   d70c2:	4682      	mov	sl, r0
   d70c4:	468b      	mov	fp, r1
   d70c6:	4b2e      	ldr	r3, [pc, #184]	; (d7180 <_strtod_l+0x5a8>)
   d70c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d70cc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d70d0:	4652      	mov	r2, sl
   d70d2:	465b      	mov	r3, fp
   d70d4:	e9d9 0100 	ldrd	r0, r1, [r9]
   d70d8:	f7ff f93e 	bl	d6358 <__aeabi_dmul>
   d70dc:	4b29      	ldr	r3, [pc, #164]	; (d7184 <_strtod_l+0x5ac>)
   d70de:	460a      	mov	r2, r1
   d70e0:	400b      	ands	r3, r1
   d70e2:	4929      	ldr	r1, [pc, #164]	; (d7188 <_strtod_l+0x5b0>)
   d70e4:	428b      	cmp	r3, r1
   d70e6:	4682      	mov	sl, r0
   d70e8:	d8be      	bhi.n	d7068 <_strtod_l+0x490>
   d70ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d70ee:	428b      	cmp	r3, r1
   d70f0:	bf86      	itte	hi
   d70f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d718c <_strtod_l+0x5b4>
   d70f6:	f04f 3aff 	movhi.w	sl, #4294967295
   d70fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d70fe:	2300      	movs	r3, #0
   d7100:	9304      	str	r3, [sp, #16]
   d7102:	e081      	b.n	d7208 <_strtod_l+0x630>
   d7104:	f018 0f01 	tst.w	r8, #1
   d7108:	d007      	beq.n	d711a <_strtod_l+0x542>
   d710a:	4b1d      	ldr	r3, [pc, #116]	; (d7180 <_strtod_l+0x5a8>)
   d710c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d7110:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7114:	f7ff f920 	bl	d6358 <__aeabi_dmul>
   d7118:	2301      	movs	r3, #1
   d711a:	f109 0901 	add.w	r9, r9, #1
   d711e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d7122:	e7ca      	b.n	d70ba <_strtod_l+0x4e2>
   d7124:	d0eb      	beq.n	d70fe <_strtod_l+0x526>
   d7126:	f1c8 0800 	rsb	r8, r8, #0
   d712a:	f018 020f 	ands.w	r2, r8, #15
   d712e:	d00a      	beq.n	d7146 <_strtod_l+0x56e>
   d7130:	4b12      	ldr	r3, [pc, #72]	; (d717c <_strtod_l+0x5a4>)
   d7132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d7136:	4650      	mov	r0, sl
   d7138:	4659      	mov	r1, fp
   d713a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d713e:	f7ff fa35 	bl	d65ac <__aeabi_ddiv>
   d7142:	4682      	mov	sl, r0
   d7144:	468b      	mov	fp, r1
   d7146:	ea5f 1828 	movs.w	r8, r8, asr #4
   d714a:	d0d8      	beq.n	d70fe <_strtod_l+0x526>
   d714c:	f1b8 0f1f 	cmp.w	r8, #31
   d7150:	dd1e      	ble.n	d7190 <_strtod_l+0x5b8>
   d7152:	2500      	movs	r5, #0
   d7154:	462e      	mov	r6, r5
   d7156:	9509      	str	r5, [sp, #36]	; 0x24
   d7158:	9507      	str	r5, [sp, #28]
   d715a:	2322      	movs	r3, #34	; 0x22
   d715c:	f04f 0a00 	mov.w	sl, #0
   d7160:	f04f 0b00 	mov.w	fp, #0
   d7164:	6023      	str	r3, [r4, #0]
   d7166:	e789      	b.n	d707c <_strtod_l+0x4a4>
   d7168:	000d8e22 	.word	0x000d8e22
   d716c:	000d8e3c 	.word	0x000d8e3c
   d7170:	000d8e19 	.word	0x000d8e19
   d7174:	000d8e1c 	.word	0x000d8e1c
   d7178:	000d88a7 	.word	0x000d88a7
   d717c:	000d8fb8 	.word	0x000d8fb8
   d7180:	000d8f90 	.word	0x000d8f90
   d7184:	7ff00000 	.word	0x7ff00000
   d7188:	7ca00000 	.word	0x7ca00000
   d718c:	7fefffff 	.word	0x7fefffff
   d7190:	f018 0310 	ands.w	r3, r8, #16
   d7194:	bf18      	it	ne
   d7196:	236a      	movne	r3, #106	; 0x6a
   d7198:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d7550 <_strtod_l+0x978>
   d719c:	9304      	str	r3, [sp, #16]
   d719e:	4650      	mov	r0, sl
   d71a0:	4659      	mov	r1, fp
   d71a2:	2300      	movs	r3, #0
   d71a4:	f018 0f01 	tst.w	r8, #1
   d71a8:	d004      	beq.n	d71b4 <_strtod_l+0x5dc>
   d71aa:	e9d9 2300 	ldrd	r2, r3, [r9]
   d71ae:	f7ff f8d3 	bl	d6358 <__aeabi_dmul>
   d71b2:	2301      	movs	r3, #1
   d71b4:	ea5f 0868 	movs.w	r8, r8, asr #1
   d71b8:	f109 0908 	add.w	r9, r9, #8
   d71bc:	d1f2      	bne.n	d71a4 <_strtod_l+0x5cc>
   d71be:	b10b      	cbz	r3, d71c4 <_strtod_l+0x5ec>
   d71c0:	4682      	mov	sl, r0
   d71c2:	468b      	mov	fp, r1
   d71c4:	9b04      	ldr	r3, [sp, #16]
   d71c6:	b1bb      	cbz	r3, d71f8 <_strtod_l+0x620>
   d71c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d71cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d71d0:	2b00      	cmp	r3, #0
   d71d2:	4659      	mov	r1, fp
   d71d4:	dd10      	ble.n	d71f8 <_strtod_l+0x620>
   d71d6:	2b1f      	cmp	r3, #31
   d71d8:	f340 8128 	ble.w	d742c <_strtod_l+0x854>
   d71dc:	2b34      	cmp	r3, #52	; 0x34
   d71de:	bfde      	ittt	le
   d71e0:	3b20      	suble	r3, #32
   d71e2:	f04f 32ff 	movle.w	r2, #4294967295
   d71e6:	fa02 f303 	lslle.w	r3, r2, r3
   d71ea:	f04f 0a00 	mov.w	sl, #0
   d71ee:	bfcc      	ite	gt
   d71f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d71f4:	ea03 0b01 	andle.w	fp, r3, r1
   d71f8:	2200      	movs	r2, #0
   d71fa:	2300      	movs	r3, #0
   d71fc:	4650      	mov	r0, sl
   d71fe:	4659      	mov	r1, fp
   d7200:	f7ff fb12 	bl	d6828 <__aeabi_dcmpeq>
   d7204:	2800      	cmp	r0, #0
   d7206:	d1a4      	bne.n	d7152 <_strtod_l+0x57a>
   d7208:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d720a:	9300      	str	r3, [sp, #0]
   d720c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d720e:	462b      	mov	r3, r5
   d7210:	463a      	mov	r2, r7
   d7212:	4620      	mov	r0, r4
   d7214:	f000 feef 	bl	d7ff6 <__s2b>
   d7218:	9009      	str	r0, [sp, #36]	; 0x24
   d721a:	2800      	cmp	r0, #0
   d721c:	f43f af24 	beq.w	d7068 <_strtod_l+0x490>
   d7220:	9b07      	ldr	r3, [sp, #28]
   d7222:	1b9e      	subs	r6, r3, r6
   d7224:	9b08      	ldr	r3, [sp, #32]
   d7226:	2b00      	cmp	r3, #0
   d7228:	bfb4      	ite	lt
   d722a:	4633      	movlt	r3, r6
   d722c:	2300      	movge	r3, #0
   d722e:	9310      	str	r3, [sp, #64]	; 0x40
   d7230:	9b08      	ldr	r3, [sp, #32]
   d7232:	2500      	movs	r5, #0
   d7234:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d7238:	9318      	str	r3, [sp, #96]	; 0x60
   d723a:	462e      	mov	r6, r5
   d723c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d723e:	4620      	mov	r0, r4
   d7240:	6859      	ldr	r1, [r3, #4]
   d7242:	f000 fe4f 	bl	d7ee4 <_Balloc>
   d7246:	9007      	str	r0, [sp, #28]
   d7248:	2800      	cmp	r0, #0
   d724a:	f43f af11 	beq.w	d7070 <_strtod_l+0x498>
   d724e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7250:	691a      	ldr	r2, [r3, #16]
   d7252:	3202      	adds	r2, #2
   d7254:	f103 010c 	add.w	r1, r3, #12
   d7258:	0092      	lsls	r2, r2, #2
   d725a:	300c      	adds	r0, #12
   d725c:	f7ff fbb6 	bl	d69cc <memcpy>
   d7260:	ec4b ab10 	vmov	d0, sl, fp
   d7264:	aa20      	add	r2, sp, #128	; 0x80
   d7266:	a91f      	add	r1, sp, #124	; 0x7c
   d7268:	4620      	mov	r0, r4
   d726a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d726e:	f001 f9b1 	bl	d85d4 <__d2b>
   d7272:	901e      	str	r0, [sp, #120]	; 0x78
   d7274:	2800      	cmp	r0, #0
   d7276:	f43f aefb 	beq.w	d7070 <_strtod_l+0x498>
   d727a:	2101      	movs	r1, #1
   d727c:	4620      	mov	r0, r4
   d727e:	f000 ff48 	bl	d8112 <__i2b>
   d7282:	4606      	mov	r6, r0
   d7284:	2800      	cmp	r0, #0
   d7286:	f43f aef3 	beq.w	d7070 <_strtod_l+0x498>
   d728a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d728c:	9904      	ldr	r1, [sp, #16]
   d728e:	2b00      	cmp	r3, #0
   d7290:	bfab      	itete	ge
   d7292:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d7294:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d7296:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d7298:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d729c:	bfac      	ite	ge
   d729e:	eb03 0902 	addge.w	r9, r3, r2
   d72a2:	1ad7      	sublt	r7, r2, r3
   d72a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d72a6:	eba3 0801 	sub.w	r8, r3, r1
   d72aa:	4490      	add	r8, r2
   d72ac:	4ba3      	ldr	r3, [pc, #652]	; (d753c <_strtod_l+0x964>)
   d72ae:	f108 38ff 	add.w	r8, r8, #4294967295
   d72b2:	4598      	cmp	r8, r3
   d72b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d72b8:	f280 80cc 	bge.w	d7454 <_strtod_l+0x87c>
   d72bc:	eba3 0308 	sub.w	r3, r3, r8
   d72c0:	2b1f      	cmp	r3, #31
   d72c2:	eba2 0203 	sub.w	r2, r2, r3
   d72c6:	f04f 0101 	mov.w	r1, #1
   d72ca:	f300 80b6 	bgt.w	d743a <_strtod_l+0x862>
   d72ce:	fa01 f303 	lsl.w	r3, r1, r3
   d72d2:	9311      	str	r3, [sp, #68]	; 0x44
   d72d4:	2300      	movs	r3, #0
   d72d6:	930c      	str	r3, [sp, #48]	; 0x30
   d72d8:	eb09 0802 	add.w	r8, r9, r2
   d72dc:	9b04      	ldr	r3, [sp, #16]
   d72de:	45c1      	cmp	r9, r8
   d72e0:	4417      	add	r7, r2
   d72e2:	441f      	add	r7, r3
   d72e4:	464b      	mov	r3, r9
   d72e6:	bfa8      	it	ge
   d72e8:	4643      	movge	r3, r8
   d72ea:	42bb      	cmp	r3, r7
   d72ec:	bfa8      	it	ge
   d72ee:	463b      	movge	r3, r7
   d72f0:	2b00      	cmp	r3, #0
   d72f2:	bfc2      	ittt	gt
   d72f4:	eba8 0803 	subgt.w	r8, r8, r3
   d72f8:	1aff      	subgt	r7, r7, r3
   d72fa:	eba9 0903 	subgt.w	r9, r9, r3
   d72fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d7300:	2b00      	cmp	r3, #0
   d7302:	dd17      	ble.n	d7334 <_strtod_l+0x75c>
   d7304:	4631      	mov	r1, r6
   d7306:	461a      	mov	r2, r3
   d7308:	4620      	mov	r0, r4
   d730a:	f000 ffa7 	bl	d825c <__pow5mult>
   d730e:	4606      	mov	r6, r0
   d7310:	2800      	cmp	r0, #0
   d7312:	f43f aead 	beq.w	d7070 <_strtod_l+0x498>
   d7316:	4601      	mov	r1, r0
   d7318:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d731a:	4620      	mov	r0, r4
   d731c:	f000 ff02 	bl	d8124 <__multiply>
   d7320:	900f      	str	r0, [sp, #60]	; 0x3c
   d7322:	2800      	cmp	r0, #0
   d7324:	f43f aea4 	beq.w	d7070 <_strtod_l+0x498>
   d7328:	991e      	ldr	r1, [sp, #120]	; 0x78
   d732a:	4620      	mov	r0, r4
   d732c:	f000 fe0e 	bl	d7f4c <_Bfree>
   d7330:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7332:	931e      	str	r3, [sp, #120]	; 0x78
   d7334:	f1b8 0f00 	cmp.w	r8, #0
   d7338:	f300 8091 	bgt.w	d745e <_strtod_l+0x886>
   d733c:	9b08      	ldr	r3, [sp, #32]
   d733e:	2b00      	cmp	r3, #0
   d7340:	dd08      	ble.n	d7354 <_strtod_l+0x77c>
   d7342:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d7344:	9907      	ldr	r1, [sp, #28]
   d7346:	4620      	mov	r0, r4
   d7348:	f000 ff88 	bl	d825c <__pow5mult>
   d734c:	9007      	str	r0, [sp, #28]
   d734e:	2800      	cmp	r0, #0
   d7350:	f43f ae8e 	beq.w	d7070 <_strtod_l+0x498>
   d7354:	2f00      	cmp	r7, #0
   d7356:	dd08      	ble.n	d736a <_strtod_l+0x792>
   d7358:	9907      	ldr	r1, [sp, #28]
   d735a:	463a      	mov	r2, r7
   d735c:	4620      	mov	r0, r4
   d735e:	f000 ffcb 	bl	d82f8 <__lshift>
   d7362:	9007      	str	r0, [sp, #28]
   d7364:	2800      	cmp	r0, #0
   d7366:	f43f ae83 	beq.w	d7070 <_strtod_l+0x498>
   d736a:	f1b9 0f00 	cmp.w	r9, #0
   d736e:	dd08      	ble.n	d7382 <_strtod_l+0x7aa>
   d7370:	4631      	mov	r1, r6
   d7372:	464a      	mov	r2, r9
   d7374:	4620      	mov	r0, r4
   d7376:	f000 ffbf 	bl	d82f8 <__lshift>
   d737a:	4606      	mov	r6, r0
   d737c:	2800      	cmp	r0, #0
   d737e:	f43f ae77 	beq.w	d7070 <_strtod_l+0x498>
   d7382:	9a07      	ldr	r2, [sp, #28]
   d7384:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7386:	4620      	mov	r0, r4
   d7388:	f001 f831 	bl	d83ee <__mdiff>
   d738c:	4605      	mov	r5, r0
   d738e:	2800      	cmp	r0, #0
   d7390:	f43f ae6e 	beq.w	d7070 <_strtod_l+0x498>
   d7394:	68c3      	ldr	r3, [r0, #12]
   d7396:	930f      	str	r3, [sp, #60]	; 0x3c
   d7398:	2300      	movs	r3, #0
   d739a:	60c3      	str	r3, [r0, #12]
   d739c:	4631      	mov	r1, r6
   d739e:	f001 f80a 	bl	d83b6 <__mcmp>
   d73a2:	2800      	cmp	r0, #0
   d73a4:	da65      	bge.n	d7472 <_strtod_l+0x89a>
   d73a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d73a8:	ea53 030a 	orrs.w	r3, r3, sl
   d73ac:	f040 8087 	bne.w	d74be <_strtod_l+0x8e6>
   d73b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d73b4:	2b00      	cmp	r3, #0
   d73b6:	f040 8082 	bne.w	d74be <_strtod_l+0x8e6>
   d73ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d73be:	0d1b      	lsrs	r3, r3, #20
   d73c0:	051b      	lsls	r3, r3, #20
   d73c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d73c6:	d97a      	bls.n	d74be <_strtod_l+0x8e6>
   d73c8:	696b      	ldr	r3, [r5, #20]
   d73ca:	b913      	cbnz	r3, d73d2 <_strtod_l+0x7fa>
   d73cc:	692b      	ldr	r3, [r5, #16]
   d73ce:	2b01      	cmp	r3, #1
   d73d0:	dd75      	ble.n	d74be <_strtod_l+0x8e6>
   d73d2:	4629      	mov	r1, r5
   d73d4:	2201      	movs	r2, #1
   d73d6:	4620      	mov	r0, r4
   d73d8:	f000 ff8e 	bl	d82f8 <__lshift>
   d73dc:	4631      	mov	r1, r6
   d73de:	4605      	mov	r5, r0
   d73e0:	f000 ffe9 	bl	d83b6 <__mcmp>
   d73e4:	2800      	cmp	r0, #0
   d73e6:	dd6a      	ble.n	d74be <_strtod_l+0x8e6>
   d73e8:	9904      	ldr	r1, [sp, #16]
   d73ea:	4a55      	ldr	r2, [pc, #340]	; (d7540 <_strtod_l+0x968>)
   d73ec:	465b      	mov	r3, fp
   d73ee:	2900      	cmp	r1, #0
   d73f0:	f000 8085 	beq.w	d74fe <_strtod_l+0x926>
   d73f4:	ea02 010b 	and.w	r1, r2, fp
   d73f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d73fc:	dc7f      	bgt.n	d74fe <_strtod_l+0x926>
   d73fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d7402:	f77f aeaa 	ble.w	d715a <_strtod_l+0x582>
   d7406:	4a4f      	ldr	r2, [pc, #316]	; (d7544 <_strtod_l+0x96c>)
   d7408:	2300      	movs	r3, #0
   d740a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d740e:	4650      	mov	r0, sl
   d7410:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d7414:	4659      	mov	r1, fp
   d7416:	f7fe ff9f 	bl	d6358 <__aeabi_dmul>
   d741a:	460b      	mov	r3, r1
   d741c:	4303      	orrs	r3, r0
   d741e:	bf08      	it	eq
   d7420:	2322      	moveq	r3, #34	; 0x22
   d7422:	4682      	mov	sl, r0
   d7424:	468b      	mov	fp, r1
   d7426:	bf08      	it	eq
   d7428:	6023      	streq	r3, [r4, #0]
   d742a:	e62b      	b.n	d7084 <_strtod_l+0x4ac>
   d742c:	f04f 32ff 	mov.w	r2, #4294967295
   d7430:	fa02 f303 	lsl.w	r3, r2, r3
   d7434:	ea03 0a0a 	and.w	sl, r3, sl
   d7438:	e6de      	b.n	d71f8 <_strtod_l+0x620>
   d743a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d743e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d7442:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d7446:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d744a:	fa01 f308 	lsl.w	r3, r1, r8
   d744e:	930c      	str	r3, [sp, #48]	; 0x30
   d7450:	9111      	str	r1, [sp, #68]	; 0x44
   d7452:	e741      	b.n	d72d8 <_strtod_l+0x700>
   d7454:	2300      	movs	r3, #0
   d7456:	930c      	str	r3, [sp, #48]	; 0x30
   d7458:	2301      	movs	r3, #1
   d745a:	9311      	str	r3, [sp, #68]	; 0x44
   d745c:	e73c      	b.n	d72d8 <_strtod_l+0x700>
   d745e:	991e      	ldr	r1, [sp, #120]	; 0x78
   d7460:	4642      	mov	r2, r8
   d7462:	4620      	mov	r0, r4
   d7464:	f000 ff48 	bl	d82f8 <__lshift>
   d7468:	901e      	str	r0, [sp, #120]	; 0x78
   d746a:	2800      	cmp	r0, #0
   d746c:	f47f af66 	bne.w	d733c <_strtod_l+0x764>
   d7470:	e5fe      	b.n	d7070 <_strtod_l+0x498>
   d7472:	465f      	mov	r7, fp
   d7474:	d16e      	bne.n	d7554 <_strtod_l+0x97c>
   d7476:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7478:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d747c:	b342      	cbz	r2, d74d0 <_strtod_l+0x8f8>
   d747e:	4a32      	ldr	r2, [pc, #200]	; (d7548 <_strtod_l+0x970>)
   d7480:	4293      	cmp	r3, r2
   d7482:	d128      	bne.n	d74d6 <_strtod_l+0x8fe>
   d7484:	9b04      	ldr	r3, [sp, #16]
   d7486:	4650      	mov	r0, sl
   d7488:	b1eb      	cbz	r3, d74c6 <_strtod_l+0x8ee>
   d748a:	4a2d      	ldr	r2, [pc, #180]	; (d7540 <_strtod_l+0x968>)
   d748c:	403a      	ands	r2, r7
   d748e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d7492:	f04f 31ff 	mov.w	r1, #4294967295
   d7496:	d819      	bhi.n	d74cc <_strtod_l+0x8f4>
   d7498:	0d12      	lsrs	r2, r2, #20
   d749a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d749e:	fa01 f303 	lsl.w	r3, r1, r3
   d74a2:	4298      	cmp	r0, r3
   d74a4:	d117      	bne.n	d74d6 <_strtod_l+0x8fe>
   d74a6:	4b29      	ldr	r3, [pc, #164]	; (d754c <_strtod_l+0x974>)
   d74a8:	429f      	cmp	r7, r3
   d74aa:	d102      	bne.n	d74b2 <_strtod_l+0x8da>
   d74ac:	3001      	adds	r0, #1
   d74ae:	f43f addf 	beq.w	d7070 <_strtod_l+0x498>
   d74b2:	4b23      	ldr	r3, [pc, #140]	; (d7540 <_strtod_l+0x968>)
   d74b4:	403b      	ands	r3, r7
   d74b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d74ba:	f04f 0a00 	mov.w	sl, #0
   d74be:	9b04      	ldr	r3, [sp, #16]
   d74c0:	2b00      	cmp	r3, #0
   d74c2:	d1a0      	bne.n	d7406 <_strtod_l+0x82e>
   d74c4:	e5de      	b.n	d7084 <_strtod_l+0x4ac>
   d74c6:	f04f 33ff 	mov.w	r3, #4294967295
   d74ca:	e7ea      	b.n	d74a2 <_strtod_l+0x8ca>
   d74cc:	460b      	mov	r3, r1
   d74ce:	e7e8      	b.n	d74a2 <_strtod_l+0x8ca>
   d74d0:	ea53 030a 	orrs.w	r3, r3, sl
   d74d4:	d088      	beq.n	d73e8 <_strtod_l+0x810>
   d74d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d74d8:	b1db      	cbz	r3, d7512 <_strtod_l+0x93a>
   d74da:	423b      	tst	r3, r7
   d74dc:	d0ef      	beq.n	d74be <_strtod_l+0x8e6>
   d74de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d74e0:	9a04      	ldr	r2, [sp, #16]
   d74e2:	4650      	mov	r0, sl
   d74e4:	4659      	mov	r1, fp
   d74e6:	b1c3      	cbz	r3, d751a <_strtod_l+0x942>
   d74e8:	f7ff fb59 	bl	d6b9e <sulp>
   d74ec:	4602      	mov	r2, r0
   d74ee:	460b      	mov	r3, r1
   d74f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d74f4:	f7fe fd7a 	bl	d5fec <__adddf3>
   d74f8:	4682      	mov	sl, r0
   d74fa:	468b      	mov	fp, r1
   d74fc:	e7df      	b.n	d74be <_strtod_l+0x8e6>
   d74fe:	4013      	ands	r3, r2
   d7500:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d7504:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d7508:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d750c:	f04f 3aff 	mov.w	sl, #4294967295
   d7510:	e7d5      	b.n	d74be <_strtod_l+0x8e6>
   d7512:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d7514:	ea13 0f0a 	tst.w	r3, sl
   d7518:	e7e0      	b.n	d74dc <_strtod_l+0x904>
   d751a:	f7ff fb40 	bl	d6b9e <sulp>
   d751e:	4602      	mov	r2, r0
   d7520:	460b      	mov	r3, r1
   d7522:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d7526:	f7fe fd5f 	bl	d5fe8 <__aeabi_dsub>
   d752a:	2200      	movs	r2, #0
   d752c:	2300      	movs	r3, #0
   d752e:	4682      	mov	sl, r0
   d7530:	468b      	mov	fp, r1
   d7532:	f7ff f979 	bl	d6828 <__aeabi_dcmpeq>
   d7536:	2800      	cmp	r0, #0
   d7538:	d0c1      	beq.n	d74be <_strtod_l+0x8e6>
   d753a:	e60e      	b.n	d715a <_strtod_l+0x582>
   d753c:	fffffc02 	.word	0xfffffc02
   d7540:	7ff00000 	.word	0x7ff00000
   d7544:	39500000 	.word	0x39500000
   d7548:	000fffff 	.word	0x000fffff
   d754c:	7fefffff 	.word	0x7fefffff
   d7550:	000d8e50 	.word	0x000d8e50
   d7554:	4631      	mov	r1, r6
   d7556:	4628      	mov	r0, r5
   d7558:	f001 f88c 	bl	d8674 <__ratio>
   d755c:	ec59 8b10 	vmov	r8, r9, d0
   d7560:	ee10 0a10 	vmov	r0, s0
   d7564:	2200      	movs	r2, #0
   d7566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d756a:	4649      	mov	r1, r9
   d756c:	f7ff f970 	bl	d6850 <__aeabi_dcmple>
   d7570:	2800      	cmp	r0, #0
   d7572:	d07c      	beq.n	d766e <_strtod_l+0xa96>
   d7574:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d7576:	2b00      	cmp	r3, #0
   d7578:	d04c      	beq.n	d7614 <_strtod_l+0xa3c>
   d757a:	4b95      	ldr	r3, [pc, #596]	; (d77d0 <_strtod_l+0xbf8>)
   d757c:	2200      	movs	r2, #0
   d757e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d7582:	f8df 924c 	ldr.w	r9, [pc, #588]	; d77d0 <_strtod_l+0xbf8>
   d7586:	f04f 0800 	mov.w	r8, #0
   d758a:	4b92      	ldr	r3, [pc, #584]	; (d77d4 <_strtod_l+0xbfc>)
   d758c:	403b      	ands	r3, r7
   d758e:	9311      	str	r3, [sp, #68]	; 0x44
   d7590:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7592:	4b91      	ldr	r3, [pc, #580]	; (d77d8 <_strtod_l+0xc00>)
   d7594:	429a      	cmp	r2, r3
   d7596:	f040 80b2 	bne.w	d76fe <_strtod_l+0xb26>
   d759a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d759e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d75a2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d75a6:	ec4b ab10 	vmov	d0, sl, fp
   d75aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d75ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d75b2:	f000 ff93 	bl	d84dc <__ulp>
   d75b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d75ba:	ec53 2b10 	vmov	r2, r3, d0
   d75be:	f7fe fecb 	bl	d6358 <__aeabi_dmul>
   d75c2:	4652      	mov	r2, sl
   d75c4:	465b      	mov	r3, fp
   d75c6:	f7fe fd11 	bl	d5fec <__adddf3>
   d75ca:	460b      	mov	r3, r1
   d75cc:	4981      	ldr	r1, [pc, #516]	; (d77d4 <_strtod_l+0xbfc>)
   d75ce:	4a83      	ldr	r2, [pc, #524]	; (d77dc <_strtod_l+0xc04>)
   d75d0:	4019      	ands	r1, r3
   d75d2:	4291      	cmp	r1, r2
   d75d4:	4682      	mov	sl, r0
   d75d6:	d95e      	bls.n	d7696 <_strtod_l+0xabe>
   d75d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d75da:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d75de:	4293      	cmp	r3, r2
   d75e0:	d103      	bne.n	d75ea <_strtod_l+0xa12>
   d75e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d75e4:	3301      	adds	r3, #1
   d75e6:	f43f ad43 	beq.w	d7070 <_strtod_l+0x498>
   d75ea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d77e8 <_strtod_l+0xc10>
   d75ee:	f04f 3aff 	mov.w	sl, #4294967295
   d75f2:	991e      	ldr	r1, [sp, #120]	; 0x78
   d75f4:	4620      	mov	r0, r4
   d75f6:	f000 fca9 	bl	d7f4c <_Bfree>
   d75fa:	9907      	ldr	r1, [sp, #28]
   d75fc:	4620      	mov	r0, r4
   d75fe:	f000 fca5 	bl	d7f4c <_Bfree>
   d7602:	4631      	mov	r1, r6
   d7604:	4620      	mov	r0, r4
   d7606:	f000 fca1 	bl	d7f4c <_Bfree>
   d760a:	4629      	mov	r1, r5
   d760c:	4620      	mov	r0, r4
   d760e:	f000 fc9d 	bl	d7f4c <_Bfree>
   d7612:	e613      	b.n	d723c <_strtod_l+0x664>
   d7614:	f1ba 0f00 	cmp.w	sl, #0
   d7618:	d11b      	bne.n	d7652 <_strtod_l+0xa7a>
   d761a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d761e:	b9f3      	cbnz	r3, d765e <_strtod_l+0xa86>
   d7620:	4b6b      	ldr	r3, [pc, #428]	; (d77d0 <_strtod_l+0xbf8>)
   d7622:	2200      	movs	r2, #0
   d7624:	4640      	mov	r0, r8
   d7626:	4649      	mov	r1, r9
   d7628:	f7ff f908 	bl	d683c <__aeabi_dcmplt>
   d762c:	b9d0      	cbnz	r0, d7664 <_strtod_l+0xa8c>
   d762e:	4640      	mov	r0, r8
   d7630:	4649      	mov	r1, r9
   d7632:	4b6b      	ldr	r3, [pc, #428]	; (d77e0 <_strtod_l+0xc08>)
   d7634:	2200      	movs	r2, #0
   d7636:	f7fe fe8f 	bl	d6358 <__aeabi_dmul>
   d763a:	4680      	mov	r8, r0
   d763c:	4689      	mov	r9, r1
   d763e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d7642:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d7646:	931b      	str	r3, [sp, #108]	; 0x6c
   d7648:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d764c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d7650:	e79b      	b.n	d758a <_strtod_l+0x9b2>
   d7652:	f1ba 0f01 	cmp.w	sl, #1
   d7656:	d102      	bne.n	d765e <_strtod_l+0xa86>
   d7658:	2f00      	cmp	r7, #0
   d765a:	f43f ad7e 	beq.w	d715a <_strtod_l+0x582>
   d765e:	4b61      	ldr	r3, [pc, #388]	; (d77e4 <_strtod_l+0xc0c>)
   d7660:	2200      	movs	r2, #0
   d7662:	e78c      	b.n	d757e <_strtod_l+0x9a6>
   d7664:	f8df 9178 	ldr.w	r9, [pc, #376]	; d77e0 <_strtod_l+0xc08>
   d7668:	f04f 0800 	mov.w	r8, #0
   d766c:	e7e7      	b.n	d763e <_strtod_l+0xa66>
   d766e:	4b5c      	ldr	r3, [pc, #368]	; (d77e0 <_strtod_l+0xc08>)
   d7670:	4640      	mov	r0, r8
   d7672:	4649      	mov	r1, r9
   d7674:	2200      	movs	r2, #0
   d7676:	f7fe fe6f 	bl	d6358 <__aeabi_dmul>
   d767a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d767c:	4680      	mov	r8, r0
   d767e:	4689      	mov	r9, r1
   d7680:	b933      	cbnz	r3, d7690 <_strtod_l+0xab8>
   d7682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7686:	9012      	str	r0, [sp, #72]	; 0x48
   d7688:	9313      	str	r3, [sp, #76]	; 0x4c
   d768a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d768e:	e7dd      	b.n	d764c <_strtod_l+0xa74>
   d7690:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d7694:	e7f9      	b.n	d768a <_strtod_l+0xab2>
   d7696:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d769a:	9b04      	ldr	r3, [sp, #16]
   d769c:	2b00      	cmp	r3, #0
   d769e:	d1a8      	bne.n	d75f2 <_strtod_l+0xa1a>
   d76a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d76a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d76a6:	0d1b      	lsrs	r3, r3, #20
   d76a8:	051b      	lsls	r3, r3, #20
   d76aa:	429a      	cmp	r2, r3
   d76ac:	d1a1      	bne.n	d75f2 <_strtod_l+0xa1a>
   d76ae:	4640      	mov	r0, r8
   d76b0:	4649      	mov	r1, r9
   d76b2:	f001 f87b 	bl	d87ac <__aeabi_d2lz>
   d76b6:	f7fe fe21 	bl	d62fc <__aeabi_l2d>
   d76ba:	4602      	mov	r2, r0
   d76bc:	460b      	mov	r3, r1
   d76be:	4640      	mov	r0, r8
   d76c0:	4649      	mov	r1, r9
   d76c2:	f7fe fc91 	bl	d5fe8 <__aeabi_dsub>
   d76c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d76c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d76cc:	ea43 030a 	orr.w	r3, r3, sl
   d76d0:	4313      	orrs	r3, r2
   d76d2:	4680      	mov	r8, r0
   d76d4:	4689      	mov	r9, r1
   d76d6:	d053      	beq.n	d7780 <_strtod_l+0xba8>
   d76d8:	a335      	add	r3, pc, #212	; (adr r3, d77b0 <_strtod_l+0xbd8>)
   d76da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d76de:	f7ff f8ad 	bl	d683c <__aeabi_dcmplt>
   d76e2:	2800      	cmp	r0, #0
   d76e4:	f47f acce 	bne.w	d7084 <_strtod_l+0x4ac>
   d76e8:	a333      	add	r3, pc, #204	; (adr r3, d77b8 <_strtod_l+0xbe0>)
   d76ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d76ee:	4640      	mov	r0, r8
   d76f0:	4649      	mov	r1, r9
   d76f2:	f7ff f8c1 	bl	d6878 <__aeabi_dcmpgt>
   d76f6:	2800      	cmp	r0, #0
   d76f8:	f43f af7b 	beq.w	d75f2 <_strtod_l+0xa1a>
   d76fc:	e4c2      	b.n	d7084 <_strtod_l+0x4ac>
   d76fe:	9b04      	ldr	r3, [sp, #16]
   d7700:	b333      	cbz	r3, d7750 <_strtod_l+0xb78>
   d7702:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d7704:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d7708:	d822      	bhi.n	d7750 <_strtod_l+0xb78>
   d770a:	a32d      	add	r3, pc, #180	; (adr r3, d77c0 <_strtod_l+0xbe8>)
   d770c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7710:	4640      	mov	r0, r8
   d7712:	4649      	mov	r1, r9
   d7714:	f7ff f89c 	bl	d6850 <__aeabi_dcmple>
   d7718:	b1a0      	cbz	r0, d7744 <_strtod_l+0xb6c>
   d771a:	4649      	mov	r1, r9
   d771c:	4640      	mov	r0, r8
   d771e:	f7ff f8b5 	bl	d688c <__aeabi_d2uiz>
   d7722:	2801      	cmp	r0, #1
   d7724:	bf38      	it	cc
   d7726:	2001      	movcc	r0, #1
   d7728:	f7fe fd9c 	bl	d6264 <__aeabi_ui2d>
   d772c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d772e:	4680      	mov	r8, r0
   d7730:	4689      	mov	r9, r1
   d7732:	bb13      	cbnz	r3, d777a <_strtod_l+0xba2>
   d7734:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d7738:	9014      	str	r0, [sp, #80]	; 0x50
   d773a:	9315      	str	r3, [sp, #84]	; 0x54
   d773c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d7740:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d7744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d7746:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7748:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d774c:	1a9b      	subs	r3, r3, r2
   d774e:	930d      	str	r3, [sp, #52]	; 0x34
   d7750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d7754:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d7758:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d775c:	f000 febe 	bl	d84dc <__ulp>
   d7760:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d7764:	ec53 2b10 	vmov	r2, r3, d0
   d7768:	f7fe fdf6 	bl	d6358 <__aeabi_dmul>
   d776c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7770:	f7fe fc3c 	bl	d5fec <__adddf3>
   d7774:	4682      	mov	sl, r0
   d7776:	468b      	mov	fp, r1
   d7778:	e78f      	b.n	d769a <_strtod_l+0xac2>
   d777a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d777e:	e7dd      	b.n	d773c <_strtod_l+0xb64>
   d7780:	a311      	add	r3, pc, #68	; (adr r3, d77c8 <_strtod_l+0xbf0>)
   d7782:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7786:	f7ff f859 	bl	d683c <__aeabi_dcmplt>
   d778a:	e7b4      	b.n	d76f6 <_strtod_l+0xb1e>
   d778c:	2300      	movs	r3, #0
   d778e:	930e      	str	r3, [sp, #56]	; 0x38
   d7790:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d7792:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d7794:	6013      	str	r3, [r2, #0]
   d7796:	f7ff ba65 	b.w	d6c64 <_strtod_l+0x8c>
   d779a:	2b65      	cmp	r3, #101	; 0x65
   d779c:	f43f ab5d 	beq.w	d6e5a <_strtod_l+0x282>
   d77a0:	2b45      	cmp	r3, #69	; 0x45
   d77a2:	f43f ab5a 	beq.w	d6e5a <_strtod_l+0x282>
   d77a6:	2201      	movs	r2, #1
   d77a8:	f7ff bb92 	b.w	d6ed0 <_strtod_l+0x2f8>
   d77ac:	f3af 8000 	nop.w
   d77b0:	94a03595 	.word	0x94a03595
   d77b4:	3fdfffff 	.word	0x3fdfffff
   d77b8:	35afe535 	.word	0x35afe535
   d77bc:	3fe00000 	.word	0x3fe00000
   d77c0:	ffc00000 	.word	0xffc00000
   d77c4:	41dfffff 	.word	0x41dfffff
   d77c8:	94a03595 	.word	0x94a03595
   d77cc:	3fcfffff 	.word	0x3fcfffff
   d77d0:	3ff00000 	.word	0x3ff00000
   d77d4:	7ff00000 	.word	0x7ff00000
   d77d8:	7fe00000 	.word	0x7fe00000
   d77dc:	7c9fffff 	.word	0x7c9fffff
   d77e0:	3fe00000 	.word	0x3fe00000
   d77e4:	bff00000 	.word	0xbff00000
   d77e8:	7fefffff 	.word	0x7fefffff

000d77ec <strtod>:
   d77ec:	460a      	mov	r2, r1
   d77ee:	4601      	mov	r1, r0
   d77f0:	4802      	ldr	r0, [pc, #8]	; (d77fc <strtod+0x10>)
   d77f2:	4b03      	ldr	r3, [pc, #12]	; (d7800 <strtod+0x14>)
   d77f4:	6800      	ldr	r0, [r0, #0]
   d77f6:	f7ff b9ef 	b.w	d6bd8 <_strtod_l>
   d77fa:	bf00      	nop
   d77fc:	2003e340 	.word	0x2003e340
   d7800:	2003e3a8 	.word	0x2003e3a8

000d7804 <rshift>:
   d7804:	6903      	ldr	r3, [r0, #16]
   d7806:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d780a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d780e:	ea4f 1261 	mov.w	r2, r1, asr #5
   d7812:	f100 0414 	add.w	r4, r0, #20
   d7816:	dd45      	ble.n	d78a4 <rshift+0xa0>
   d7818:	f011 011f 	ands.w	r1, r1, #31
   d781c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d7820:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d7824:	d10c      	bne.n	d7840 <rshift+0x3c>
   d7826:	f100 0710 	add.w	r7, r0, #16
   d782a:	4629      	mov	r1, r5
   d782c:	42b1      	cmp	r1, r6
   d782e:	d334      	bcc.n	d789a <rshift+0x96>
   d7830:	1a9b      	subs	r3, r3, r2
   d7832:	009b      	lsls	r3, r3, #2
   d7834:	1eea      	subs	r2, r5, #3
   d7836:	4296      	cmp	r6, r2
   d7838:	bf38      	it	cc
   d783a:	2300      	movcc	r3, #0
   d783c:	4423      	add	r3, r4
   d783e:	e015      	b.n	d786c <rshift+0x68>
   d7840:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d7844:	f1c1 0820 	rsb	r8, r1, #32
   d7848:	40cf      	lsrs	r7, r1
   d784a:	f105 0e04 	add.w	lr, r5, #4
   d784e:	46a1      	mov	r9, r4
   d7850:	4576      	cmp	r6, lr
   d7852:	46f4      	mov	ip, lr
   d7854:	d815      	bhi.n	d7882 <rshift+0x7e>
   d7856:	1a9b      	subs	r3, r3, r2
   d7858:	009a      	lsls	r2, r3, #2
   d785a:	3a04      	subs	r2, #4
   d785c:	3501      	adds	r5, #1
   d785e:	42ae      	cmp	r6, r5
   d7860:	bf38      	it	cc
   d7862:	2200      	movcc	r2, #0
   d7864:	18a3      	adds	r3, r4, r2
   d7866:	50a7      	str	r7, [r4, r2]
   d7868:	b107      	cbz	r7, d786c <rshift+0x68>
   d786a:	3304      	adds	r3, #4
   d786c:	1b1a      	subs	r2, r3, r4
   d786e:	42a3      	cmp	r3, r4
   d7870:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d7874:	bf08      	it	eq
   d7876:	2300      	moveq	r3, #0
   d7878:	6102      	str	r2, [r0, #16]
   d787a:	bf08      	it	eq
   d787c:	6143      	streq	r3, [r0, #20]
   d787e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7882:	f8dc c000 	ldr.w	ip, [ip]
   d7886:	fa0c fc08 	lsl.w	ip, ip, r8
   d788a:	ea4c 0707 	orr.w	r7, ip, r7
   d788e:	f849 7b04 	str.w	r7, [r9], #4
   d7892:	f85e 7b04 	ldr.w	r7, [lr], #4
   d7896:	40cf      	lsrs	r7, r1
   d7898:	e7da      	b.n	d7850 <rshift+0x4c>
   d789a:	f851 cb04 	ldr.w	ip, [r1], #4
   d789e:	f847 cf04 	str.w	ip, [r7, #4]!
   d78a2:	e7c3      	b.n	d782c <rshift+0x28>
   d78a4:	4623      	mov	r3, r4
   d78a6:	e7e1      	b.n	d786c <rshift+0x68>

000d78a8 <__hexdig_fun>:
   d78a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d78ac:	2b09      	cmp	r3, #9
   d78ae:	d802      	bhi.n	d78b6 <__hexdig_fun+0xe>
   d78b0:	3820      	subs	r0, #32
   d78b2:	b2c0      	uxtb	r0, r0
   d78b4:	4770      	bx	lr
   d78b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d78ba:	2b05      	cmp	r3, #5
   d78bc:	d801      	bhi.n	d78c2 <__hexdig_fun+0x1a>
   d78be:	3847      	subs	r0, #71	; 0x47
   d78c0:	e7f7      	b.n	d78b2 <__hexdig_fun+0xa>
   d78c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d78c6:	2b05      	cmp	r3, #5
   d78c8:	d801      	bhi.n	d78ce <__hexdig_fun+0x26>
   d78ca:	3827      	subs	r0, #39	; 0x27
   d78cc:	e7f1      	b.n	d78b2 <__hexdig_fun+0xa>
   d78ce:	2000      	movs	r0, #0
   d78d0:	4770      	bx	lr
	...

000d78d4 <__gethex>:
   d78d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d78d8:	ed2d 8b02 	vpush	{d8}
   d78dc:	b089      	sub	sp, #36	; 0x24
   d78de:	ee08 0a10 	vmov	s16, r0
   d78e2:	9304      	str	r3, [sp, #16]
   d78e4:	4bbc      	ldr	r3, [pc, #752]	; (d7bd8 <__gethex+0x304>)
   d78e6:	681b      	ldr	r3, [r3, #0]
   d78e8:	9301      	str	r3, [sp, #4]
   d78ea:	4618      	mov	r0, r3
   d78ec:	468b      	mov	fp, r1
   d78ee:	4690      	mov	r8, r2
   d78f0:	f7ff f906 	bl	d6b00 <strlen>
   d78f4:	9b01      	ldr	r3, [sp, #4]
   d78f6:	f8db 2000 	ldr.w	r2, [fp]
   d78fa:	4403      	add	r3, r0
   d78fc:	4682      	mov	sl, r0
   d78fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d7902:	9305      	str	r3, [sp, #20]
   d7904:	1c93      	adds	r3, r2, #2
   d7906:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d790a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d790e:	32fe      	adds	r2, #254	; 0xfe
   d7910:	18d1      	adds	r1, r2, r3
   d7912:	461f      	mov	r7, r3
   d7914:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7918:	9100      	str	r1, [sp, #0]
   d791a:	2830      	cmp	r0, #48	; 0x30
   d791c:	d0f8      	beq.n	d7910 <__gethex+0x3c>
   d791e:	f7ff ffc3 	bl	d78a8 <__hexdig_fun>
   d7922:	4604      	mov	r4, r0
   d7924:	2800      	cmp	r0, #0
   d7926:	d13a      	bne.n	d799e <__gethex+0xca>
   d7928:	9901      	ldr	r1, [sp, #4]
   d792a:	4652      	mov	r2, sl
   d792c:	4638      	mov	r0, r7
   d792e:	f7ff f911 	bl	d6b54 <strncmp>
   d7932:	4605      	mov	r5, r0
   d7934:	2800      	cmp	r0, #0
   d7936:	d168      	bne.n	d7a0a <__gethex+0x136>
   d7938:	f817 000a 	ldrb.w	r0, [r7, sl]
   d793c:	eb07 060a 	add.w	r6, r7, sl
   d7940:	f7ff ffb2 	bl	d78a8 <__hexdig_fun>
   d7944:	2800      	cmp	r0, #0
   d7946:	d062      	beq.n	d7a0e <__gethex+0x13a>
   d7948:	4633      	mov	r3, r6
   d794a:	7818      	ldrb	r0, [r3, #0]
   d794c:	2830      	cmp	r0, #48	; 0x30
   d794e:	461f      	mov	r7, r3
   d7950:	f103 0301 	add.w	r3, r3, #1
   d7954:	d0f9      	beq.n	d794a <__gethex+0x76>
   d7956:	f7ff ffa7 	bl	d78a8 <__hexdig_fun>
   d795a:	2301      	movs	r3, #1
   d795c:	fab0 f480 	clz	r4, r0
   d7960:	0964      	lsrs	r4, r4, #5
   d7962:	4635      	mov	r5, r6
   d7964:	9300      	str	r3, [sp, #0]
   d7966:	463a      	mov	r2, r7
   d7968:	4616      	mov	r6, r2
   d796a:	3201      	adds	r2, #1
   d796c:	7830      	ldrb	r0, [r6, #0]
   d796e:	f7ff ff9b 	bl	d78a8 <__hexdig_fun>
   d7972:	2800      	cmp	r0, #0
   d7974:	d1f8      	bne.n	d7968 <__gethex+0x94>
   d7976:	9901      	ldr	r1, [sp, #4]
   d7978:	4652      	mov	r2, sl
   d797a:	4630      	mov	r0, r6
   d797c:	f7ff f8ea 	bl	d6b54 <strncmp>
   d7980:	b980      	cbnz	r0, d79a4 <__gethex+0xd0>
   d7982:	b94d      	cbnz	r5, d7998 <__gethex+0xc4>
   d7984:	eb06 050a 	add.w	r5, r6, sl
   d7988:	462a      	mov	r2, r5
   d798a:	4616      	mov	r6, r2
   d798c:	3201      	adds	r2, #1
   d798e:	7830      	ldrb	r0, [r6, #0]
   d7990:	f7ff ff8a 	bl	d78a8 <__hexdig_fun>
   d7994:	2800      	cmp	r0, #0
   d7996:	d1f8      	bne.n	d798a <__gethex+0xb6>
   d7998:	1bad      	subs	r5, r5, r6
   d799a:	00ad      	lsls	r5, r5, #2
   d799c:	e004      	b.n	d79a8 <__gethex+0xd4>
   d799e:	2400      	movs	r4, #0
   d79a0:	4625      	mov	r5, r4
   d79a2:	e7e0      	b.n	d7966 <__gethex+0x92>
   d79a4:	2d00      	cmp	r5, #0
   d79a6:	d1f7      	bne.n	d7998 <__gethex+0xc4>
   d79a8:	7833      	ldrb	r3, [r6, #0]
   d79aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d79ae:	2b50      	cmp	r3, #80	; 0x50
   d79b0:	d13b      	bne.n	d7a2a <__gethex+0x156>
   d79b2:	7873      	ldrb	r3, [r6, #1]
   d79b4:	2b2b      	cmp	r3, #43	; 0x2b
   d79b6:	d02c      	beq.n	d7a12 <__gethex+0x13e>
   d79b8:	2b2d      	cmp	r3, #45	; 0x2d
   d79ba:	d02e      	beq.n	d7a1a <__gethex+0x146>
   d79bc:	1c71      	adds	r1, r6, #1
   d79be:	f04f 0900 	mov.w	r9, #0
   d79c2:	7808      	ldrb	r0, [r1, #0]
   d79c4:	f7ff ff70 	bl	d78a8 <__hexdig_fun>
   d79c8:	1e43      	subs	r3, r0, #1
   d79ca:	b2db      	uxtb	r3, r3
   d79cc:	2b18      	cmp	r3, #24
   d79ce:	d82c      	bhi.n	d7a2a <__gethex+0x156>
   d79d0:	f1a0 0210 	sub.w	r2, r0, #16
   d79d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d79d8:	f7ff ff66 	bl	d78a8 <__hexdig_fun>
   d79dc:	1e43      	subs	r3, r0, #1
   d79de:	b2db      	uxtb	r3, r3
   d79e0:	2b18      	cmp	r3, #24
   d79e2:	d91d      	bls.n	d7a20 <__gethex+0x14c>
   d79e4:	f1b9 0f00 	cmp.w	r9, #0
   d79e8:	d000      	beq.n	d79ec <__gethex+0x118>
   d79ea:	4252      	negs	r2, r2
   d79ec:	4415      	add	r5, r2
   d79ee:	f8cb 1000 	str.w	r1, [fp]
   d79f2:	b1e4      	cbz	r4, d7a2e <__gethex+0x15a>
   d79f4:	9b00      	ldr	r3, [sp, #0]
   d79f6:	2b00      	cmp	r3, #0
   d79f8:	bf14      	ite	ne
   d79fa:	2700      	movne	r7, #0
   d79fc:	2706      	moveq	r7, #6
   d79fe:	4638      	mov	r0, r7
   d7a00:	b009      	add	sp, #36	; 0x24
   d7a02:	ecbd 8b02 	vpop	{d8}
   d7a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7a0a:	463e      	mov	r6, r7
   d7a0c:	4625      	mov	r5, r4
   d7a0e:	2401      	movs	r4, #1
   d7a10:	e7ca      	b.n	d79a8 <__gethex+0xd4>
   d7a12:	f04f 0900 	mov.w	r9, #0
   d7a16:	1cb1      	adds	r1, r6, #2
   d7a18:	e7d3      	b.n	d79c2 <__gethex+0xee>
   d7a1a:	f04f 0901 	mov.w	r9, #1
   d7a1e:	e7fa      	b.n	d7a16 <__gethex+0x142>
   d7a20:	230a      	movs	r3, #10
   d7a22:	fb03 0202 	mla	r2, r3, r2, r0
   d7a26:	3a10      	subs	r2, #16
   d7a28:	e7d4      	b.n	d79d4 <__gethex+0x100>
   d7a2a:	4631      	mov	r1, r6
   d7a2c:	e7df      	b.n	d79ee <__gethex+0x11a>
   d7a2e:	1bf3      	subs	r3, r6, r7
   d7a30:	3b01      	subs	r3, #1
   d7a32:	4621      	mov	r1, r4
   d7a34:	2b07      	cmp	r3, #7
   d7a36:	dc52      	bgt.n	d7ade <__gethex+0x20a>
   d7a38:	ee18 0a10 	vmov	r0, s16
   d7a3c:	f000 fa52 	bl	d7ee4 <_Balloc>
   d7a40:	f04f 0b00 	mov.w	fp, #0
   d7a44:	f100 0914 	add.w	r9, r0, #20
   d7a48:	f1ca 0301 	rsb	r3, sl, #1
   d7a4c:	4604      	mov	r4, r0
   d7a4e:	f8cd 9008 	str.w	r9, [sp, #8]
   d7a52:	f8cd b000 	str.w	fp, [sp]
   d7a56:	9306      	str	r3, [sp, #24]
   d7a58:	42b7      	cmp	r7, r6
   d7a5a:	d343      	bcc.n	d7ae4 <__gethex+0x210>
   d7a5c:	9802      	ldr	r0, [sp, #8]
   d7a5e:	9b00      	ldr	r3, [sp, #0]
   d7a60:	f840 3b04 	str.w	r3, [r0], #4
   d7a64:	eba0 0009 	sub.w	r0, r0, r9
   d7a68:	1080      	asrs	r0, r0, #2
   d7a6a:	0146      	lsls	r6, r0, #5
   d7a6c:	6120      	str	r0, [r4, #16]
   d7a6e:	4618      	mov	r0, r3
   d7a70:	f000 faff 	bl	d8072 <__hi0bits>
   d7a74:	1a30      	subs	r0, r6, r0
   d7a76:	f8d8 6000 	ldr.w	r6, [r8]
   d7a7a:	42b0      	cmp	r0, r6
   d7a7c:	dd66      	ble.n	d7b4c <__gethex+0x278>
   d7a7e:	1b87      	subs	r7, r0, r6
   d7a80:	4639      	mov	r1, r7
   d7a82:	4620      	mov	r0, r4
   d7a84:	f000 fe4c 	bl	d8720 <__any_on>
   d7a88:	4682      	mov	sl, r0
   d7a8a:	b1a8      	cbz	r0, d7ab8 <__gethex+0x1e4>
   d7a8c:	1e7b      	subs	r3, r7, #1
   d7a8e:	1159      	asrs	r1, r3, #5
   d7a90:	f003 021f 	and.w	r2, r3, #31
   d7a94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d7a98:	f04f 0a01 	mov.w	sl, #1
   d7a9c:	fa0a f202 	lsl.w	r2, sl, r2
   d7aa0:	420a      	tst	r2, r1
   d7aa2:	d009      	beq.n	d7ab8 <__gethex+0x1e4>
   d7aa4:	4553      	cmp	r3, sl
   d7aa6:	dd05      	ble.n	d7ab4 <__gethex+0x1e0>
   d7aa8:	1eb9      	subs	r1, r7, #2
   d7aaa:	4620      	mov	r0, r4
   d7aac:	f000 fe38 	bl	d8720 <__any_on>
   d7ab0:	2800      	cmp	r0, #0
   d7ab2:	d148      	bne.n	d7b46 <__gethex+0x272>
   d7ab4:	f04f 0a02 	mov.w	sl, #2
   d7ab8:	4639      	mov	r1, r7
   d7aba:	4620      	mov	r0, r4
   d7abc:	f7ff fea2 	bl	d7804 <rshift>
   d7ac0:	443d      	add	r5, r7
   d7ac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d7ac6:	42ab      	cmp	r3, r5
   d7ac8:	da4f      	bge.n	d7b6a <__gethex+0x296>
   d7aca:	ee18 0a10 	vmov	r0, s16
   d7ace:	4621      	mov	r1, r4
   d7ad0:	f000 fa3c 	bl	d7f4c <_Bfree>
   d7ad4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d7ad6:	2300      	movs	r3, #0
   d7ad8:	6013      	str	r3, [r2, #0]
   d7ada:	27a3      	movs	r7, #163	; 0xa3
   d7adc:	e78f      	b.n	d79fe <__gethex+0x12a>
   d7ade:	3101      	adds	r1, #1
   d7ae0:	105b      	asrs	r3, r3, #1
   d7ae2:	e7a7      	b.n	d7a34 <__gethex+0x160>
   d7ae4:	1e73      	subs	r3, r6, #1
   d7ae6:	9a05      	ldr	r2, [sp, #20]
   d7ae8:	9303      	str	r3, [sp, #12]
   d7aea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d7aee:	4293      	cmp	r3, r2
   d7af0:	d019      	beq.n	d7b26 <__gethex+0x252>
   d7af2:	f1bb 0f20 	cmp.w	fp, #32
   d7af6:	d107      	bne.n	d7b08 <__gethex+0x234>
   d7af8:	9b02      	ldr	r3, [sp, #8]
   d7afa:	9a00      	ldr	r2, [sp, #0]
   d7afc:	f843 2b04 	str.w	r2, [r3], #4
   d7b00:	9302      	str	r3, [sp, #8]
   d7b02:	2300      	movs	r3, #0
   d7b04:	9300      	str	r3, [sp, #0]
   d7b06:	469b      	mov	fp, r3
   d7b08:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d7b0c:	f7ff fecc 	bl	d78a8 <__hexdig_fun>
   d7b10:	9b00      	ldr	r3, [sp, #0]
   d7b12:	f000 000f 	and.w	r0, r0, #15
   d7b16:	fa00 f00b 	lsl.w	r0, r0, fp
   d7b1a:	4303      	orrs	r3, r0
   d7b1c:	9300      	str	r3, [sp, #0]
   d7b1e:	f10b 0b04 	add.w	fp, fp, #4
   d7b22:	9b03      	ldr	r3, [sp, #12]
   d7b24:	e00d      	b.n	d7b42 <__gethex+0x26e>
   d7b26:	9b03      	ldr	r3, [sp, #12]
   d7b28:	9a06      	ldr	r2, [sp, #24]
   d7b2a:	4413      	add	r3, r2
   d7b2c:	42bb      	cmp	r3, r7
   d7b2e:	d3e0      	bcc.n	d7af2 <__gethex+0x21e>
   d7b30:	4618      	mov	r0, r3
   d7b32:	9901      	ldr	r1, [sp, #4]
   d7b34:	9307      	str	r3, [sp, #28]
   d7b36:	4652      	mov	r2, sl
   d7b38:	f7ff f80c 	bl	d6b54 <strncmp>
   d7b3c:	9b07      	ldr	r3, [sp, #28]
   d7b3e:	2800      	cmp	r0, #0
   d7b40:	d1d7      	bne.n	d7af2 <__gethex+0x21e>
   d7b42:	461e      	mov	r6, r3
   d7b44:	e788      	b.n	d7a58 <__gethex+0x184>
   d7b46:	f04f 0a03 	mov.w	sl, #3
   d7b4a:	e7b5      	b.n	d7ab8 <__gethex+0x1e4>
   d7b4c:	da0a      	bge.n	d7b64 <__gethex+0x290>
   d7b4e:	1a37      	subs	r7, r6, r0
   d7b50:	4621      	mov	r1, r4
   d7b52:	ee18 0a10 	vmov	r0, s16
   d7b56:	463a      	mov	r2, r7
   d7b58:	f000 fbce 	bl	d82f8 <__lshift>
   d7b5c:	1bed      	subs	r5, r5, r7
   d7b5e:	4604      	mov	r4, r0
   d7b60:	f100 0914 	add.w	r9, r0, #20
   d7b64:	f04f 0a00 	mov.w	sl, #0
   d7b68:	e7ab      	b.n	d7ac2 <__gethex+0x1ee>
   d7b6a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d7b6e:	42a8      	cmp	r0, r5
   d7b70:	dd6d      	ble.n	d7c4e <__gethex+0x37a>
   d7b72:	1b45      	subs	r5, r0, r5
   d7b74:	42ae      	cmp	r6, r5
   d7b76:	dc31      	bgt.n	d7bdc <__gethex+0x308>
   d7b78:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d7b7c:	2b02      	cmp	r3, #2
   d7b7e:	d023      	beq.n	d7bc8 <__gethex+0x2f4>
   d7b80:	2b03      	cmp	r3, #3
   d7b82:	d025      	beq.n	d7bd0 <__gethex+0x2fc>
   d7b84:	2b01      	cmp	r3, #1
   d7b86:	d115      	bne.n	d7bb4 <__gethex+0x2e0>
   d7b88:	42ae      	cmp	r6, r5
   d7b8a:	d113      	bne.n	d7bb4 <__gethex+0x2e0>
   d7b8c:	2e01      	cmp	r6, #1
   d7b8e:	d10b      	bne.n	d7ba8 <__gethex+0x2d4>
   d7b90:	9a04      	ldr	r2, [sp, #16]
   d7b92:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d7b96:	6013      	str	r3, [r2, #0]
   d7b98:	2301      	movs	r3, #1
   d7b9a:	6123      	str	r3, [r4, #16]
   d7b9c:	f8c9 3000 	str.w	r3, [r9]
   d7ba0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d7ba2:	2762      	movs	r7, #98	; 0x62
   d7ba4:	601c      	str	r4, [r3, #0]
   d7ba6:	e72a      	b.n	d79fe <__gethex+0x12a>
   d7ba8:	1e71      	subs	r1, r6, #1
   d7baa:	4620      	mov	r0, r4
   d7bac:	f000 fdb8 	bl	d8720 <__any_on>
   d7bb0:	2800      	cmp	r0, #0
   d7bb2:	d1ed      	bne.n	d7b90 <__gethex+0x2bc>
   d7bb4:	ee18 0a10 	vmov	r0, s16
   d7bb8:	4621      	mov	r1, r4
   d7bba:	f000 f9c7 	bl	d7f4c <_Bfree>
   d7bbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d7bc0:	2300      	movs	r3, #0
   d7bc2:	6013      	str	r3, [r2, #0]
   d7bc4:	2750      	movs	r7, #80	; 0x50
   d7bc6:	e71a      	b.n	d79fe <__gethex+0x12a>
   d7bc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d7bca:	2b00      	cmp	r3, #0
   d7bcc:	d1f2      	bne.n	d7bb4 <__gethex+0x2e0>
   d7bce:	e7df      	b.n	d7b90 <__gethex+0x2bc>
   d7bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d7bd2:	2b00      	cmp	r3, #0
   d7bd4:	d1dc      	bne.n	d7b90 <__gethex+0x2bc>
   d7bd6:	e7ed      	b.n	d7bb4 <__gethex+0x2e0>
   d7bd8:	000d8f7c 	.word	0x000d8f7c
   d7bdc:	1e6f      	subs	r7, r5, #1
   d7bde:	f1ba 0f00 	cmp.w	sl, #0
   d7be2:	d131      	bne.n	d7c48 <__gethex+0x374>
   d7be4:	b127      	cbz	r7, d7bf0 <__gethex+0x31c>
   d7be6:	4639      	mov	r1, r7
   d7be8:	4620      	mov	r0, r4
   d7bea:	f000 fd99 	bl	d8720 <__any_on>
   d7bee:	4682      	mov	sl, r0
   d7bf0:	117b      	asrs	r3, r7, #5
   d7bf2:	2101      	movs	r1, #1
   d7bf4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d7bf8:	f007 071f 	and.w	r7, r7, #31
   d7bfc:	fa01 f707 	lsl.w	r7, r1, r7
   d7c00:	421f      	tst	r7, r3
   d7c02:	4629      	mov	r1, r5
   d7c04:	4620      	mov	r0, r4
   d7c06:	bf18      	it	ne
   d7c08:	f04a 0a02 	orrne.w	sl, sl, #2
   d7c0c:	1b76      	subs	r6, r6, r5
   d7c0e:	f7ff fdf9 	bl	d7804 <rshift>
   d7c12:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d7c16:	2702      	movs	r7, #2
   d7c18:	f1ba 0f00 	cmp.w	sl, #0
   d7c1c:	d048      	beq.n	d7cb0 <__gethex+0x3dc>
   d7c1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d7c22:	2b02      	cmp	r3, #2
   d7c24:	d015      	beq.n	d7c52 <__gethex+0x37e>
   d7c26:	2b03      	cmp	r3, #3
   d7c28:	d017      	beq.n	d7c5a <__gethex+0x386>
   d7c2a:	2b01      	cmp	r3, #1
   d7c2c:	d109      	bne.n	d7c42 <__gethex+0x36e>
   d7c2e:	f01a 0f02 	tst.w	sl, #2
   d7c32:	d006      	beq.n	d7c42 <__gethex+0x36e>
   d7c34:	f8d9 0000 	ldr.w	r0, [r9]
   d7c38:	ea4a 0a00 	orr.w	sl, sl, r0
   d7c3c:	f01a 0f01 	tst.w	sl, #1
   d7c40:	d10e      	bne.n	d7c60 <__gethex+0x38c>
   d7c42:	f047 0710 	orr.w	r7, r7, #16
   d7c46:	e033      	b.n	d7cb0 <__gethex+0x3dc>
   d7c48:	f04f 0a01 	mov.w	sl, #1
   d7c4c:	e7d0      	b.n	d7bf0 <__gethex+0x31c>
   d7c4e:	2701      	movs	r7, #1
   d7c50:	e7e2      	b.n	d7c18 <__gethex+0x344>
   d7c52:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d7c54:	f1c3 0301 	rsb	r3, r3, #1
   d7c58:	9315      	str	r3, [sp, #84]	; 0x54
   d7c5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d7c5c:	2b00      	cmp	r3, #0
   d7c5e:	d0f0      	beq.n	d7c42 <__gethex+0x36e>
   d7c60:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7c64:	f104 0314 	add.w	r3, r4, #20
   d7c68:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d7c6c:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d7c70:	f04f 0c00 	mov.w	ip, #0
   d7c74:	4618      	mov	r0, r3
   d7c76:	f853 2b04 	ldr.w	r2, [r3], #4
   d7c7a:	f1b2 3fff 	cmp.w	r2, #4294967295
   d7c7e:	d01c      	beq.n	d7cba <__gethex+0x3e6>
   d7c80:	3201      	adds	r2, #1
   d7c82:	6002      	str	r2, [r0, #0]
   d7c84:	2f02      	cmp	r7, #2
   d7c86:	f104 0314 	add.w	r3, r4, #20
   d7c8a:	d13a      	bne.n	d7d02 <__gethex+0x42e>
   d7c8c:	f8d8 2000 	ldr.w	r2, [r8]
   d7c90:	3a01      	subs	r2, #1
   d7c92:	42b2      	cmp	r2, r6
   d7c94:	d10a      	bne.n	d7cac <__gethex+0x3d8>
   d7c96:	1171      	asrs	r1, r6, #5
   d7c98:	2201      	movs	r2, #1
   d7c9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d7c9e:	f006 061f 	and.w	r6, r6, #31
   d7ca2:	fa02 f606 	lsl.w	r6, r2, r6
   d7ca6:	421e      	tst	r6, r3
   d7ca8:	bf18      	it	ne
   d7caa:	4617      	movne	r7, r2
   d7cac:	f047 0720 	orr.w	r7, r7, #32
   d7cb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d7cb2:	601c      	str	r4, [r3, #0]
   d7cb4:	9b04      	ldr	r3, [sp, #16]
   d7cb6:	601d      	str	r5, [r3, #0]
   d7cb8:	e6a1      	b.n	d79fe <__gethex+0x12a>
   d7cba:	4299      	cmp	r1, r3
   d7cbc:	f843 cc04 	str.w	ip, [r3, #-4]
   d7cc0:	d8d8      	bhi.n	d7c74 <__gethex+0x3a0>
   d7cc2:	68a3      	ldr	r3, [r4, #8]
   d7cc4:	4599      	cmp	r9, r3
   d7cc6:	db14      	blt.n	d7cf2 <__gethex+0x41e>
   d7cc8:	6861      	ldr	r1, [r4, #4]
   d7cca:	ee18 0a10 	vmov	r0, s16
   d7cce:	3101      	adds	r1, #1
   d7cd0:	f000 f908 	bl	d7ee4 <_Balloc>
   d7cd4:	6922      	ldr	r2, [r4, #16]
   d7cd6:	3202      	adds	r2, #2
   d7cd8:	f104 010c 	add.w	r1, r4, #12
   d7cdc:	4682      	mov	sl, r0
   d7cde:	0092      	lsls	r2, r2, #2
   d7ce0:	300c      	adds	r0, #12
   d7ce2:	f7fe fe73 	bl	d69cc <memcpy>
   d7ce6:	4621      	mov	r1, r4
   d7ce8:	ee18 0a10 	vmov	r0, s16
   d7cec:	f000 f92e 	bl	d7f4c <_Bfree>
   d7cf0:	4654      	mov	r4, sl
   d7cf2:	6923      	ldr	r3, [r4, #16]
   d7cf4:	1c5a      	adds	r2, r3, #1
   d7cf6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d7cfa:	6122      	str	r2, [r4, #16]
   d7cfc:	2201      	movs	r2, #1
   d7cfe:	615a      	str	r2, [r3, #20]
   d7d00:	e7c0      	b.n	d7c84 <__gethex+0x3b0>
   d7d02:	6922      	ldr	r2, [r4, #16]
   d7d04:	454a      	cmp	r2, r9
   d7d06:	dd0b      	ble.n	d7d20 <__gethex+0x44c>
   d7d08:	2101      	movs	r1, #1
   d7d0a:	4620      	mov	r0, r4
   d7d0c:	f7ff fd7a 	bl	d7804 <rshift>
   d7d10:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d7d14:	3501      	adds	r5, #1
   d7d16:	42ab      	cmp	r3, r5
   d7d18:	f6ff aed7 	blt.w	d7aca <__gethex+0x1f6>
   d7d1c:	2701      	movs	r7, #1
   d7d1e:	e7c5      	b.n	d7cac <__gethex+0x3d8>
   d7d20:	f016 061f 	ands.w	r6, r6, #31
   d7d24:	d0fa      	beq.n	d7d1c <__gethex+0x448>
   d7d26:	449b      	add	fp, r3
   d7d28:	f1c6 0620 	rsb	r6, r6, #32
   d7d2c:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   d7d30:	f000 f99f 	bl	d8072 <__hi0bits>
   d7d34:	42b0      	cmp	r0, r6
   d7d36:	dbe7      	blt.n	d7d08 <__gethex+0x434>
   d7d38:	e7f0      	b.n	d7d1c <__gethex+0x448>
   d7d3a:	bf00      	nop

000d7d3c <L_shift>:
   d7d3c:	f1c2 0208 	rsb	r2, r2, #8
   d7d40:	0092      	lsls	r2, r2, #2
   d7d42:	b570      	push	{r4, r5, r6, lr}
   d7d44:	f1c2 0620 	rsb	r6, r2, #32
   d7d48:	6843      	ldr	r3, [r0, #4]
   d7d4a:	6804      	ldr	r4, [r0, #0]
   d7d4c:	fa03 f506 	lsl.w	r5, r3, r6
   d7d50:	432c      	orrs	r4, r5
   d7d52:	40d3      	lsrs	r3, r2
   d7d54:	6004      	str	r4, [r0, #0]
   d7d56:	f840 3f04 	str.w	r3, [r0, #4]!
   d7d5a:	4288      	cmp	r0, r1
   d7d5c:	d3f4      	bcc.n	d7d48 <L_shift+0xc>
   d7d5e:	bd70      	pop	{r4, r5, r6, pc}

000d7d60 <__match>:
   d7d60:	b530      	push	{r4, r5, lr}
   d7d62:	6803      	ldr	r3, [r0, #0]
   d7d64:	3301      	adds	r3, #1
   d7d66:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7d6a:	b914      	cbnz	r4, d7d72 <__match+0x12>
   d7d6c:	6003      	str	r3, [r0, #0]
   d7d6e:	2001      	movs	r0, #1
   d7d70:	bd30      	pop	{r4, r5, pc}
   d7d72:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7d76:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d7d7a:	2d19      	cmp	r5, #25
   d7d7c:	bf98      	it	ls
   d7d7e:	3220      	addls	r2, #32
   d7d80:	42a2      	cmp	r2, r4
   d7d82:	d0f0      	beq.n	d7d66 <__match+0x6>
   d7d84:	2000      	movs	r0, #0
   d7d86:	e7f3      	b.n	d7d70 <__match+0x10>

000d7d88 <__hexnan>:
   d7d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d8c:	680b      	ldr	r3, [r1, #0]
   d7d8e:	6801      	ldr	r1, [r0, #0]
   d7d90:	115e      	asrs	r6, r3, #5
   d7d92:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d7d96:	f013 031f 	ands.w	r3, r3, #31
   d7d9a:	b087      	sub	sp, #28
   d7d9c:	bf18      	it	ne
   d7d9e:	3604      	addne	r6, #4
   d7da0:	2500      	movs	r5, #0
   d7da2:	1f37      	subs	r7, r6, #4
   d7da4:	4682      	mov	sl, r0
   d7da6:	4690      	mov	r8, r2
   d7da8:	9301      	str	r3, [sp, #4]
   d7daa:	f846 5c04 	str.w	r5, [r6, #-4]
   d7dae:	46b9      	mov	r9, r7
   d7db0:	463c      	mov	r4, r7
   d7db2:	9502      	str	r5, [sp, #8]
   d7db4:	46ab      	mov	fp, r5
   d7db6:	784a      	ldrb	r2, [r1, #1]
   d7db8:	1c4b      	adds	r3, r1, #1
   d7dba:	9303      	str	r3, [sp, #12]
   d7dbc:	b342      	cbz	r2, d7e10 <__hexnan+0x88>
   d7dbe:	4610      	mov	r0, r2
   d7dc0:	9105      	str	r1, [sp, #20]
   d7dc2:	9204      	str	r2, [sp, #16]
   d7dc4:	f7ff fd70 	bl	d78a8 <__hexdig_fun>
   d7dc8:	2800      	cmp	r0, #0
   d7dca:	d14f      	bne.n	d7e6c <__hexnan+0xe4>
   d7dcc:	9a04      	ldr	r2, [sp, #16]
   d7dce:	9905      	ldr	r1, [sp, #20]
   d7dd0:	2a20      	cmp	r2, #32
   d7dd2:	d818      	bhi.n	d7e06 <__hexnan+0x7e>
   d7dd4:	9b02      	ldr	r3, [sp, #8]
   d7dd6:	459b      	cmp	fp, r3
   d7dd8:	dd13      	ble.n	d7e02 <__hexnan+0x7a>
   d7dda:	454c      	cmp	r4, r9
   d7ddc:	d206      	bcs.n	d7dec <__hexnan+0x64>
   d7dde:	2d07      	cmp	r5, #7
   d7de0:	dc04      	bgt.n	d7dec <__hexnan+0x64>
   d7de2:	462a      	mov	r2, r5
   d7de4:	4649      	mov	r1, r9
   d7de6:	4620      	mov	r0, r4
   d7de8:	f7ff ffa8 	bl	d7d3c <L_shift>
   d7dec:	4544      	cmp	r4, r8
   d7dee:	d950      	bls.n	d7e92 <__hexnan+0x10a>
   d7df0:	2300      	movs	r3, #0
   d7df2:	f1a4 0904 	sub.w	r9, r4, #4
   d7df6:	f844 3c04 	str.w	r3, [r4, #-4]
   d7dfa:	f8cd b008 	str.w	fp, [sp, #8]
   d7dfe:	464c      	mov	r4, r9
   d7e00:	461d      	mov	r5, r3
   d7e02:	9903      	ldr	r1, [sp, #12]
   d7e04:	e7d7      	b.n	d7db6 <__hexnan+0x2e>
   d7e06:	2a29      	cmp	r2, #41	; 0x29
   d7e08:	d156      	bne.n	d7eb8 <__hexnan+0x130>
   d7e0a:	3102      	adds	r1, #2
   d7e0c:	f8ca 1000 	str.w	r1, [sl]
   d7e10:	f1bb 0f00 	cmp.w	fp, #0
   d7e14:	d050      	beq.n	d7eb8 <__hexnan+0x130>
   d7e16:	454c      	cmp	r4, r9
   d7e18:	d206      	bcs.n	d7e28 <__hexnan+0xa0>
   d7e1a:	2d07      	cmp	r5, #7
   d7e1c:	dc04      	bgt.n	d7e28 <__hexnan+0xa0>
   d7e1e:	462a      	mov	r2, r5
   d7e20:	4649      	mov	r1, r9
   d7e22:	4620      	mov	r0, r4
   d7e24:	f7ff ff8a 	bl	d7d3c <L_shift>
   d7e28:	4544      	cmp	r4, r8
   d7e2a:	d934      	bls.n	d7e96 <__hexnan+0x10e>
   d7e2c:	f1a8 0204 	sub.w	r2, r8, #4
   d7e30:	4623      	mov	r3, r4
   d7e32:	f853 1b04 	ldr.w	r1, [r3], #4
   d7e36:	f842 1f04 	str.w	r1, [r2, #4]!
   d7e3a:	429f      	cmp	r7, r3
   d7e3c:	d2f9      	bcs.n	d7e32 <__hexnan+0xaa>
   d7e3e:	1b3b      	subs	r3, r7, r4
   d7e40:	f023 0303 	bic.w	r3, r3, #3
   d7e44:	3304      	adds	r3, #4
   d7e46:	3401      	adds	r4, #1
   d7e48:	3e03      	subs	r6, #3
   d7e4a:	42b4      	cmp	r4, r6
   d7e4c:	bf88      	it	hi
   d7e4e:	2304      	movhi	r3, #4
   d7e50:	4443      	add	r3, r8
   d7e52:	2200      	movs	r2, #0
   d7e54:	f843 2b04 	str.w	r2, [r3], #4
   d7e58:	429f      	cmp	r7, r3
   d7e5a:	d2fb      	bcs.n	d7e54 <__hexnan+0xcc>
   d7e5c:	683b      	ldr	r3, [r7, #0]
   d7e5e:	b91b      	cbnz	r3, d7e68 <__hexnan+0xe0>
   d7e60:	4547      	cmp	r7, r8
   d7e62:	d127      	bne.n	d7eb4 <__hexnan+0x12c>
   d7e64:	2301      	movs	r3, #1
   d7e66:	603b      	str	r3, [r7, #0]
   d7e68:	2005      	movs	r0, #5
   d7e6a:	e026      	b.n	d7eba <__hexnan+0x132>
   d7e6c:	3501      	adds	r5, #1
   d7e6e:	2d08      	cmp	r5, #8
   d7e70:	f10b 0b01 	add.w	fp, fp, #1
   d7e74:	dd06      	ble.n	d7e84 <__hexnan+0xfc>
   d7e76:	4544      	cmp	r4, r8
   d7e78:	d9c3      	bls.n	d7e02 <__hexnan+0x7a>
   d7e7a:	2300      	movs	r3, #0
   d7e7c:	f844 3c04 	str.w	r3, [r4, #-4]
   d7e80:	2501      	movs	r5, #1
   d7e82:	3c04      	subs	r4, #4
   d7e84:	6822      	ldr	r2, [r4, #0]
   d7e86:	f000 000f 	and.w	r0, r0, #15
   d7e8a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   d7e8e:	6022      	str	r2, [r4, #0]
   d7e90:	e7b7      	b.n	d7e02 <__hexnan+0x7a>
   d7e92:	2508      	movs	r5, #8
   d7e94:	e7b5      	b.n	d7e02 <__hexnan+0x7a>
   d7e96:	9b01      	ldr	r3, [sp, #4]
   d7e98:	2b00      	cmp	r3, #0
   d7e9a:	d0df      	beq.n	d7e5c <__hexnan+0xd4>
   d7e9c:	f04f 32ff 	mov.w	r2, #4294967295
   d7ea0:	f1c3 0320 	rsb	r3, r3, #32
   d7ea4:	fa22 f303 	lsr.w	r3, r2, r3
   d7ea8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d7eac:	401a      	ands	r2, r3
   d7eae:	f846 2c04 	str.w	r2, [r6, #-4]
   d7eb2:	e7d3      	b.n	d7e5c <__hexnan+0xd4>
   d7eb4:	3f04      	subs	r7, #4
   d7eb6:	e7d1      	b.n	d7e5c <__hexnan+0xd4>
   d7eb8:	2004      	movs	r0, #4
   d7eba:	b007      	add	sp, #28
   d7ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7ec0 <__ascii_mbtowc>:
   d7ec0:	b082      	sub	sp, #8
   d7ec2:	b901      	cbnz	r1, d7ec6 <__ascii_mbtowc+0x6>
   d7ec4:	a901      	add	r1, sp, #4
   d7ec6:	b142      	cbz	r2, d7eda <__ascii_mbtowc+0x1a>
   d7ec8:	b14b      	cbz	r3, d7ede <__ascii_mbtowc+0x1e>
   d7eca:	7813      	ldrb	r3, [r2, #0]
   d7ecc:	600b      	str	r3, [r1, #0]
   d7ece:	7812      	ldrb	r2, [r2, #0]
   d7ed0:	1e10      	subs	r0, r2, #0
   d7ed2:	bf18      	it	ne
   d7ed4:	2001      	movne	r0, #1
   d7ed6:	b002      	add	sp, #8
   d7ed8:	4770      	bx	lr
   d7eda:	4610      	mov	r0, r2
   d7edc:	e7fb      	b.n	d7ed6 <__ascii_mbtowc+0x16>
   d7ede:	f06f 0001 	mvn.w	r0, #1
   d7ee2:	e7f8      	b.n	d7ed6 <__ascii_mbtowc+0x16>

000d7ee4 <_Balloc>:
   d7ee4:	b570      	push	{r4, r5, r6, lr}
   d7ee6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d7ee8:	4604      	mov	r4, r0
   d7eea:	460d      	mov	r5, r1
   d7eec:	b93e      	cbnz	r6, d7efe <_Balloc+0x1a>
   d7eee:	2010      	movs	r0, #16
   d7ef0:	f7fc ffe8 	bl	d4ec4 <malloc>
   d7ef4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d7ef8:	6260      	str	r0, [r4, #36]	; 0x24
   d7efa:	6006      	str	r6, [r0, #0]
   d7efc:	60c6      	str	r6, [r0, #12]
   d7efe:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d7f00:	68f3      	ldr	r3, [r6, #12]
   d7f02:	b183      	cbz	r3, d7f26 <_Balloc+0x42>
   d7f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7f06:	68db      	ldr	r3, [r3, #12]
   d7f08:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   d7f0c:	b9b8      	cbnz	r0, d7f3e <_Balloc+0x5a>
   d7f0e:	2101      	movs	r1, #1
   d7f10:	fa01 f605 	lsl.w	r6, r1, r5
   d7f14:	1d72      	adds	r2, r6, #5
   d7f16:	0092      	lsls	r2, r2, #2
   d7f18:	4620      	mov	r0, r4
   d7f1a:	f000 fc22 	bl	d8762 <_calloc_r>
   d7f1e:	b160      	cbz	r0, d7f3a <_Balloc+0x56>
   d7f20:	e9c0 5601 	strd	r5, r6, [r0, #4]
   d7f24:	e00e      	b.n	d7f44 <_Balloc+0x60>
   d7f26:	2221      	movs	r2, #33	; 0x21
   d7f28:	2104      	movs	r1, #4
   d7f2a:	4620      	mov	r0, r4
   d7f2c:	f000 fc19 	bl	d8762 <_calloc_r>
   d7f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d7f32:	60f0      	str	r0, [r6, #12]
   d7f34:	68db      	ldr	r3, [r3, #12]
   d7f36:	2b00      	cmp	r3, #0
   d7f38:	d1e4      	bne.n	d7f04 <_Balloc+0x20>
   d7f3a:	2000      	movs	r0, #0
   d7f3c:	bd70      	pop	{r4, r5, r6, pc}
   d7f3e:	6802      	ldr	r2, [r0, #0]
   d7f40:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   d7f44:	2300      	movs	r3, #0
   d7f46:	e9c0 3303 	strd	r3, r3, [r0, #12]
   d7f4a:	e7f7      	b.n	d7f3c <_Balloc+0x58>

000d7f4c <_Bfree>:
   d7f4c:	b570      	push	{r4, r5, r6, lr}
   d7f4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d7f50:	4605      	mov	r5, r0
   d7f52:	460c      	mov	r4, r1
   d7f54:	b93e      	cbnz	r6, d7f66 <_Bfree+0x1a>
   d7f56:	2010      	movs	r0, #16
   d7f58:	f7fc ffb4 	bl	d4ec4 <malloc>
   d7f5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d7f60:	6268      	str	r0, [r5, #36]	; 0x24
   d7f62:	6006      	str	r6, [r0, #0]
   d7f64:	60c6      	str	r6, [r0, #12]
   d7f66:	b13c      	cbz	r4, d7f78 <_Bfree+0x2c>
   d7f68:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d7f6a:	6862      	ldr	r2, [r4, #4]
   d7f6c:	68db      	ldr	r3, [r3, #12]
   d7f6e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d7f72:	6021      	str	r1, [r4, #0]
   d7f74:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   d7f78:	bd70      	pop	{r4, r5, r6, pc}

000d7f7a <__multadd>:
   d7f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7f7e:	690e      	ldr	r6, [r1, #16]
   d7f80:	4607      	mov	r7, r0
   d7f82:	4698      	mov	r8, r3
   d7f84:	460c      	mov	r4, r1
   d7f86:	f101 0014 	add.w	r0, r1, #20
   d7f8a:	2300      	movs	r3, #0
   d7f8c:	6805      	ldr	r5, [r0, #0]
   d7f8e:	b2a9      	uxth	r1, r5
   d7f90:	fb02 8101 	mla	r1, r2, r1, r8
   d7f94:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   d7f98:	0c2d      	lsrs	r5, r5, #16
   d7f9a:	fb02 c505 	mla	r5, r2, r5, ip
   d7f9e:	b289      	uxth	r1, r1
   d7fa0:	3301      	adds	r3, #1
   d7fa2:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   d7fa6:	429e      	cmp	r6, r3
   d7fa8:	f840 1b04 	str.w	r1, [r0], #4
   d7fac:	ea4f 4815 	mov.w	r8, r5, lsr #16
   d7fb0:	dcec      	bgt.n	d7f8c <__multadd+0x12>
   d7fb2:	f1b8 0f00 	cmp.w	r8, #0
   d7fb6:	d01b      	beq.n	d7ff0 <__multadd+0x76>
   d7fb8:	68a3      	ldr	r3, [r4, #8]
   d7fba:	42b3      	cmp	r3, r6
   d7fbc:	dc12      	bgt.n	d7fe4 <__multadd+0x6a>
   d7fbe:	6861      	ldr	r1, [r4, #4]
   d7fc0:	4638      	mov	r0, r7
   d7fc2:	3101      	adds	r1, #1
   d7fc4:	f7ff ff8e 	bl	d7ee4 <_Balloc>
   d7fc8:	6922      	ldr	r2, [r4, #16]
   d7fca:	3202      	adds	r2, #2
   d7fcc:	f104 010c 	add.w	r1, r4, #12
   d7fd0:	4605      	mov	r5, r0
   d7fd2:	0092      	lsls	r2, r2, #2
   d7fd4:	300c      	adds	r0, #12
   d7fd6:	f7fe fcf9 	bl	d69cc <memcpy>
   d7fda:	4621      	mov	r1, r4
   d7fdc:	4638      	mov	r0, r7
   d7fde:	f7ff ffb5 	bl	d7f4c <_Bfree>
   d7fe2:	462c      	mov	r4, r5
   d7fe4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   d7fe8:	3601      	adds	r6, #1
   d7fea:	f8c3 8014 	str.w	r8, [r3, #20]
   d7fee:	6126      	str	r6, [r4, #16]
   d7ff0:	4620      	mov	r0, r4
   d7ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7ff6 <__s2b>:
   d7ff6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d7ffa:	460c      	mov	r4, r1
   d7ffc:	4615      	mov	r5, r2
   d7ffe:	461f      	mov	r7, r3
   d8000:	2209      	movs	r2, #9
   d8002:	3308      	adds	r3, #8
   d8004:	4606      	mov	r6, r0
   d8006:	fb93 f3f2 	sdiv	r3, r3, r2
   d800a:	2100      	movs	r1, #0
   d800c:	2201      	movs	r2, #1
   d800e:	429a      	cmp	r2, r3
   d8010:	db20      	blt.n	d8054 <__s2b+0x5e>
   d8012:	4630      	mov	r0, r6
   d8014:	f7ff ff66 	bl	d7ee4 <_Balloc>
   d8018:	9b08      	ldr	r3, [sp, #32]
   d801a:	6143      	str	r3, [r0, #20]
   d801c:	2d09      	cmp	r5, #9
   d801e:	f04f 0301 	mov.w	r3, #1
   d8022:	6103      	str	r3, [r0, #16]
   d8024:	dd19      	ble.n	d805a <__s2b+0x64>
   d8026:	f104 0909 	add.w	r9, r4, #9
   d802a:	46c8      	mov	r8, r9
   d802c:	442c      	add	r4, r5
   d802e:	f818 3b01 	ldrb.w	r3, [r8], #1
   d8032:	4601      	mov	r1, r0
   d8034:	3b30      	subs	r3, #48	; 0x30
   d8036:	220a      	movs	r2, #10
   d8038:	4630      	mov	r0, r6
   d803a:	f7ff ff9e 	bl	d7f7a <__multadd>
   d803e:	45a0      	cmp	r8, r4
   d8040:	d1f5      	bne.n	d802e <__s2b+0x38>
   d8042:	f1a5 0408 	sub.w	r4, r5, #8
   d8046:	444c      	add	r4, r9
   d8048:	1b2d      	subs	r5, r5, r4
   d804a:	1963      	adds	r3, r4, r5
   d804c:	42bb      	cmp	r3, r7
   d804e:	db07      	blt.n	d8060 <__s2b+0x6a>
   d8050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8054:	0052      	lsls	r2, r2, #1
   d8056:	3101      	adds	r1, #1
   d8058:	e7d9      	b.n	d800e <__s2b+0x18>
   d805a:	340a      	adds	r4, #10
   d805c:	2509      	movs	r5, #9
   d805e:	e7f3      	b.n	d8048 <__s2b+0x52>
   d8060:	f814 3b01 	ldrb.w	r3, [r4], #1
   d8064:	4601      	mov	r1, r0
   d8066:	3b30      	subs	r3, #48	; 0x30
   d8068:	220a      	movs	r2, #10
   d806a:	4630      	mov	r0, r6
   d806c:	f7ff ff85 	bl	d7f7a <__multadd>
   d8070:	e7eb      	b.n	d804a <__s2b+0x54>

000d8072 <__hi0bits>:
   d8072:	0c03      	lsrs	r3, r0, #16
   d8074:	041b      	lsls	r3, r3, #16
   d8076:	b9d3      	cbnz	r3, d80ae <__hi0bits+0x3c>
   d8078:	0400      	lsls	r0, r0, #16
   d807a:	2310      	movs	r3, #16
   d807c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d8080:	bf04      	itt	eq
   d8082:	0200      	lsleq	r0, r0, #8
   d8084:	3308      	addeq	r3, #8
   d8086:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d808a:	bf04      	itt	eq
   d808c:	0100      	lsleq	r0, r0, #4
   d808e:	3304      	addeq	r3, #4
   d8090:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d8094:	bf04      	itt	eq
   d8096:	0080      	lsleq	r0, r0, #2
   d8098:	3302      	addeq	r3, #2
   d809a:	2800      	cmp	r0, #0
   d809c:	db05      	blt.n	d80aa <__hi0bits+0x38>
   d809e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   d80a2:	f103 0301 	add.w	r3, r3, #1
   d80a6:	bf08      	it	eq
   d80a8:	2320      	moveq	r3, #32
   d80aa:	4618      	mov	r0, r3
   d80ac:	4770      	bx	lr
   d80ae:	2300      	movs	r3, #0
   d80b0:	e7e4      	b.n	d807c <__hi0bits+0xa>

000d80b2 <__lo0bits>:
   d80b2:	6803      	ldr	r3, [r0, #0]
   d80b4:	f013 0207 	ands.w	r2, r3, #7
   d80b8:	4601      	mov	r1, r0
   d80ba:	d00b      	beq.n	d80d4 <__lo0bits+0x22>
   d80bc:	07da      	lsls	r2, r3, #31
   d80be:	d424      	bmi.n	d810a <__lo0bits+0x58>
   d80c0:	0798      	lsls	r0, r3, #30
   d80c2:	bf49      	itett	mi
   d80c4:	085b      	lsrmi	r3, r3, #1
   d80c6:	089b      	lsrpl	r3, r3, #2
   d80c8:	2001      	movmi	r0, #1
   d80ca:	600b      	strmi	r3, [r1, #0]
   d80cc:	bf5c      	itt	pl
   d80ce:	600b      	strpl	r3, [r1, #0]
   d80d0:	2002      	movpl	r0, #2
   d80d2:	4770      	bx	lr
   d80d4:	b298      	uxth	r0, r3
   d80d6:	b9b0      	cbnz	r0, d8106 <__lo0bits+0x54>
   d80d8:	0c1b      	lsrs	r3, r3, #16
   d80da:	2010      	movs	r0, #16
   d80dc:	f013 0fff 	tst.w	r3, #255	; 0xff
   d80e0:	bf04      	itt	eq
   d80e2:	0a1b      	lsreq	r3, r3, #8
   d80e4:	3008      	addeq	r0, #8
   d80e6:	071a      	lsls	r2, r3, #28
   d80e8:	bf04      	itt	eq
   d80ea:	091b      	lsreq	r3, r3, #4
   d80ec:	3004      	addeq	r0, #4
   d80ee:	079a      	lsls	r2, r3, #30
   d80f0:	bf04      	itt	eq
   d80f2:	089b      	lsreq	r3, r3, #2
   d80f4:	3002      	addeq	r0, #2
   d80f6:	07da      	lsls	r2, r3, #31
   d80f8:	d403      	bmi.n	d8102 <__lo0bits+0x50>
   d80fa:	085b      	lsrs	r3, r3, #1
   d80fc:	f100 0001 	add.w	r0, r0, #1
   d8100:	d005      	beq.n	d810e <__lo0bits+0x5c>
   d8102:	600b      	str	r3, [r1, #0]
   d8104:	4770      	bx	lr
   d8106:	4610      	mov	r0, r2
   d8108:	e7e8      	b.n	d80dc <__lo0bits+0x2a>
   d810a:	2000      	movs	r0, #0
   d810c:	4770      	bx	lr
   d810e:	2020      	movs	r0, #32
   d8110:	4770      	bx	lr

000d8112 <__i2b>:
   d8112:	b510      	push	{r4, lr}
   d8114:	460c      	mov	r4, r1
   d8116:	2101      	movs	r1, #1
   d8118:	f7ff fee4 	bl	d7ee4 <_Balloc>
   d811c:	2201      	movs	r2, #1
   d811e:	6144      	str	r4, [r0, #20]
   d8120:	6102      	str	r2, [r0, #16]
   d8122:	bd10      	pop	{r4, pc}

000d8124 <__multiply>:
   d8124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8128:	4615      	mov	r5, r2
   d812a:	690a      	ldr	r2, [r1, #16]
   d812c:	692b      	ldr	r3, [r5, #16]
   d812e:	429a      	cmp	r2, r3
   d8130:	bfb8      	it	lt
   d8132:	460b      	movlt	r3, r1
   d8134:	460c      	mov	r4, r1
   d8136:	bfbc      	itt	lt
   d8138:	462c      	movlt	r4, r5
   d813a:	461d      	movlt	r5, r3
   d813c:	6927      	ldr	r7, [r4, #16]
   d813e:	f8d5 9010 	ldr.w	r9, [r5, #16]
   d8142:	68a3      	ldr	r3, [r4, #8]
   d8144:	6861      	ldr	r1, [r4, #4]
   d8146:	eb07 0609 	add.w	r6, r7, r9
   d814a:	42b3      	cmp	r3, r6
   d814c:	bfb8      	it	lt
   d814e:	3101      	addlt	r1, #1
   d8150:	b085      	sub	sp, #20
   d8152:	f7ff fec7 	bl	d7ee4 <_Balloc>
   d8156:	f100 0114 	add.w	r1, r0, #20
   d815a:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   d815e:	460b      	mov	r3, r1
   d8160:	2200      	movs	r2, #0
   d8162:	4543      	cmp	r3, r8
   d8164:	d31d      	bcc.n	d81a2 <__multiply+0x7e>
   d8166:	f104 0314 	add.w	r3, r4, #20
   d816a:	f105 0214 	add.w	r2, r5, #20
   d816e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   d8172:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d8176:	9302      	str	r3, [sp, #8]
   d8178:	1b3b      	subs	r3, r7, r4
   d817a:	3b15      	subs	r3, #21
   d817c:	f023 0303 	bic.w	r3, r3, #3
   d8180:	3304      	adds	r3, #4
   d8182:	f104 0515 	add.w	r5, r4, #21
   d8186:	42af      	cmp	r7, r5
   d8188:	bf38      	it	cc
   d818a:	2304      	movcc	r3, #4
   d818c:	9301      	str	r3, [sp, #4]
   d818e:	9b02      	ldr	r3, [sp, #8]
   d8190:	9203      	str	r2, [sp, #12]
   d8192:	4293      	cmp	r3, r2
   d8194:	d808      	bhi.n	d81a8 <__multiply+0x84>
   d8196:	2e00      	cmp	r6, #0
   d8198:	dc5a      	bgt.n	d8250 <__multiply+0x12c>
   d819a:	6106      	str	r6, [r0, #16]
   d819c:	b005      	add	sp, #20
   d819e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d81a2:	f843 2b04 	str.w	r2, [r3], #4
   d81a6:	e7dc      	b.n	d8162 <__multiply+0x3e>
   d81a8:	f8b2 a000 	ldrh.w	sl, [r2]
   d81ac:	f1ba 0f00 	cmp.w	sl, #0
   d81b0:	d024      	beq.n	d81fc <__multiply+0xd8>
   d81b2:	f104 0e14 	add.w	lr, r4, #20
   d81b6:	4689      	mov	r9, r1
   d81b8:	f04f 0c00 	mov.w	ip, #0
   d81bc:	f85e 5b04 	ldr.w	r5, [lr], #4
   d81c0:	f8d9 b000 	ldr.w	fp, [r9]
   d81c4:	b2ab      	uxth	r3, r5
   d81c6:	fa1f fb8b 	uxth.w	fp, fp
   d81ca:	fb0a b303 	mla	r3, sl, r3, fp
   d81ce:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   d81d2:	f8d9 5000 	ldr.w	r5, [r9]
   d81d6:	4463      	add	r3, ip
   d81d8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d81dc:	fb0a c50b 	mla	r5, sl, fp, ip
   d81e0:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   d81e4:	b29b      	uxth	r3, r3
   d81e6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   d81ea:	4577      	cmp	r7, lr
   d81ec:	f849 3b04 	str.w	r3, [r9], #4
   d81f0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d81f4:	d8e2      	bhi.n	d81bc <__multiply+0x98>
   d81f6:	9b01      	ldr	r3, [sp, #4]
   d81f8:	f841 c003 	str.w	ip, [r1, r3]
   d81fc:	9b03      	ldr	r3, [sp, #12]
   d81fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   d8202:	3204      	adds	r2, #4
   d8204:	f1b9 0f00 	cmp.w	r9, #0
   d8208:	d020      	beq.n	d824c <__multiply+0x128>
   d820a:	680b      	ldr	r3, [r1, #0]
   d820c:	f104 0c14 	add.w	ip, r4, #20
   d8210:	468e      	mov	lr, r1
   d8212:	f04f 0a00 	mov.w	sl, #0
   d8216:	f8bc 5000 	ldrh.w	r5, [ip]
   d821a:	f8be b002 	ldrh.w	fp, [lr, #2]
   d821e:	fb09 b505 	mla	r5, r9, r5, fp
   d8222:	44aa      	add	sl, r5
   d8224:	b29b      	uxth	r3, r3
   d8226:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   d822a:	f84e 3b04 	str.w	r3, [lr], #4
   d822e:	f85c 3b04 	ldr.w	r3, [ip], #4
   d8232:	f8be 5000 	ldrh.w	r5, [lr]
   d8236:	0c1b      	lsrs	r3, r3, #16
   d8238:	fb09 5303 	mla	r3, r9, r3, r5
   d823c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   d8240:	4567      	cmp	r7, ip
   d8242:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   d8246:	d8e6      	bhi.n	d8216 <__multiply+0xf2>
   d8248:	9d01      	ldr	r5, [sp, #4]
   d824a:	514b      	str	r3, [r1, r5]
   d824c:	3104      	adds	r1, #4
   d824e:	e79e      	b.n	d818e <__multiply+0x6a>
   d8250:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   d8254:	2b00      	cmp	r3, #0
   d8256:	d1a0      	bne.n	d819a <__multiply+0x76>
   d8258:	3e01      	subs	r6, #1
   d825a:	e79c      	b.n	d8196 <__multiply+0x72>

000d825c <__pow5mult>:
   d825c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8260:	4615      	mov	r5, r2
   d8262:	f012 0203 	ands.w	r2, r2, #3
   d8266:	4606      	mov	r6, r0
   d8268:	460f      	mov	r7, r1
   d826a:	d007      	beq.n	d827c <__pow5mult+0x20>
   d826c:	4c21      	ldr	r4, [pc, #132]	; (d82f4 <__pow5mult+0x98>)
   d826e:	3a01      	subs	r2, #1
   d8270:	2300      	movs	r3, #0
   d8272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d8276:	f7ff fe80 	bl	d7f7a <__multadd>
   d827a:	4607      	mov	r7, r0
   d827c:	10ad      	asrs	r5, r5, #2
   d827e:	d035      	beq.n	d82ec <__pow5mult+0x90>
   d8280:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d8282:	b93c      	cbnz	r4, d8294 <__pow5mult+0x38>
   d8284:	2010      	movs	r0, #16
   d8286:	f7fc fe1d 	bl	d4ec4 <malloc>
   d828a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d828e:	6270      	str	r0, [r6, #36]	; 0x24
   d8290:	6004      	str	r4, [r0, #0]
   d8292:	60c4      	str	r4, [r0, #12]
   d8294:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d8298:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d829c:	b94c      	cbnz	r4, d82b2 <__pow5mult+0x56>
   d829e:	f240 2171 	movw	r1, #625	; 0x271
   d82a2:	4630      	mov	r0, r6
   d82a4:	f7ff ff35 	bl	d8112 <__i2b>
   d82a8:	2300      	movs	r3, #0
   d82aa:	f8c8 0008 	str.w	r0, [r8, #8]
   d82ae:	4604      	mov	r4, r0
   d82b0:	6003      	str	r3, [r0, #0]
   d82b2:	f04f 0900 	mov.w	r9, #0
   d82b6:	07eb      	lsls	r3, r5, #31
   d82b8:	d50a      	bpl.n	d82d0 <__pow5mult+0x74>
   d82ba:	4639      	mov	r1, r7
   d82bc:	4622      	mov	r2, r4
   d82be:	4630      	mov	r0, r6
   d82c0:	f7ff ff30 	bl	d8124 <__multiply>
   d82c4:	4639      	mov	r1, r7
   d82c6:	4680      	mov	r8, r0
   d82c8:	4630      	mov	r0, r6
   d82ca:	f7ff fe3f 	bl	d7f4c <_Bfree>
   d82ce:	4647      	mov	r7, r8
   d82d0:	106d      	asrs	r5, r5, #1
   d82d2:	d00b      	beq.n	d82ec <__pow5mult+0x90>
   d82d4:	6820      	ldr	r0, [r4, #0]
   d82d6:	b938      	cbnz	r0, d82e8 <__pow5mult+0x8c>
   d82d8:	4622      	mov	r2, r4
   d82da:	4621      	mov	r1, r4
   d82dc:	4630      	mov	r0, r6
   d82de:	f7ff ff21 	bl	d8124 <__multiply>
   d82e2:	6020      	str	r0, [r4, #0]
   d82e4:	f8c0 9000 	str.w	r9, [r0]
   d82e8:	4604      	mov	r4, r0
   d82ea:	e7e4      	b.n	d82b6 <__pow5mult+0x5a>
   d82ec:	4638      	mov	r0, r7
   d82ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d82f2:	bf00      	nop
   d82f4:	000d9080 	.word	0x000d9080

000d82f8 <__lshift>:
   d82f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d82fc:	460c      	mov	r4, r1
   d82fe:	6849      	ldr	r1, [r1, #4]
   d8300:	6923      	ldr	r3, [r4, #16]
   d8302:	eb03 1862 	add.w	r8, r3, r2, asr #5
   d8306:	68a3      	ldr	r3, [r4, #8]
   d8308:	4607      	mov	r7, r0
   d830a:	4691      	mov	r9, r2
   d830c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d8310:	f108 0601 	add.w	r6, r8, #1
   d8314:	42b3      	cmp	r3, r6
   d8316:	db3f      	blt.n	d8398 <__lshift+0xa0>
   d8318:	4638      	mov	r0, r7
   d831a:	f7ff fde3 	bl	d7ee4 <_Balloc>
   d831e:	2300      	movs	r3, #0
   d8320:	4605      	mov	r5, r0
   d8322:	f100 0114 	add.w	r1, r0, #20
   d8326:	f100 0210 	add.w	r2, r0, #16
   d832a:	4618      	mov	r0, r3
   d832c:	4553      	cmp	r3, sl
   d832e:	db36      	blt.n	d839e <__lshift+0xa6>
   d8330:	6920      	ldr	r0, [r4, #16]
   d8332:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   d8336:	f104 0314 	add.w	r3, r4, #20
   d833a:	f019 091f 	ands.w	r9, r9, #31
   d833e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   d8342:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   d8346:	d02e      	beq.n	d83a6 <__lshift+0xae>
   d8348:	f1c9 0e20 	rsb	lr, r9, #32
   d834c:	468a      	mov	sl, r1
   d834e:	2200      	movs	r2, #0
   d8350:	6818      	ldr	r0, [r3, #0]
   d8352:	fa00 f009 	lsl.w	r0, r0, r9
   d8356:	4302      	orrs	r2, r0
   d8358:	f84a 2b04 	str.w	r2, [sl], #4
   d835c:	f853 2b04 	ldr.w	r2, [r3], #4
   d8360:	459c      	cmp	ip, r3
   d8362:	fa22 f20e 	lsr.w	r2, r2, lr
   d8366:	d8f3      	bhi.n	d8350 <__lshift+0x58>
   d8368:	ebac 0304 	sub.w	r3, ip, r4
   d836c:	3b15      	subs	r3, #21
   d836e:	f023 0303 	bic.w	r3, r3, #3
   d8372:	3304      	adds	r3, #4
   d8374:	f104 0015 	add.w	r0, r4, #21
   d8378:	4560      	cmp	r0, ip
   d837a:	bf88      	it	hi
   d837c:	2304      	movhi	r3, #4
   d837e:	50ca      	str	r2, [r1, r3]
   d8380:	b10a      	cbz	r2, d8386 <__lshift+0x8e>
   d8382:	f108 0602 	add.w	r6, r8, #2
   d8386:	3e01      	subs	r6, #1
   d8388:	4638      	mov	r0, r7
   d838a:	612e      	str	r6, [r5, #16]
   d838c:	4621      	mov	r1, r4
   d838e:	f7ff fddd 	bl	d7f4c <_Bfree>
   d8392:	4628      	mov	r0, r5
   d8394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8398:	3101      	adds	r1, #1
   d839a:	005b      	lsls	r3, r3, #1
   d839c:	e7ba      	b.n	d8314 <__lshift+0x1c>
   d839e:	f842 0f04 	str.w	r0, [r2, #4]!
   d83a2:	3301      	adds	r3, #1
   d83a4:	e7c2      	b.n	d832c <__lshift+0x34>
   d83a6:	3904      	subs	r1, #4
   d83a8:	f853 2b04 	ldr.w	r2, [r3], #4
   d83ac:	f841 2f04 	str.w	r2, [r1, #4]!
   d83b0:	459c      	cmp	ip, r3
   d83b2:	d8f9      	bhi.n	d83a8 <__lshift+0xb0>
   d83b4:	e7e7      	b.n	d8386 <__lshift+0x8e>

000d83b6 <__mcmp>:
   d83b6:	b530      	push	{r4, r5, lr}
   d83b8:	6902      	ldr	r2, [r0, #16]
   d83ba:	690c      	ldr	r4, [r1, #16]
   d83bc:	1b12      	subs	r2, r2, r4
   d83be:	d10e      	bne.n	d83de <__mcmp+0x28>
   d83c0:	f100 0314 	add.w	r3, r0, #20
   d83c4:	3114      	adds	r1, #20
   d83c6:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   d83ca:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   d83ce:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   d83d2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   d83d6:	42a5      	cmp	r5, r4
   d83d8:	d003      	beq.n	d83e2 <__mcmp+0x2c>
   d83da:	d305      	bcc.n	d83e8 <__mcmp+0x32>
   d83dc:	2201      	movs	r2, #1
   d83de:	4610      	mov	r0, r2
   d83e0:	bd30      	pop	{r4, r5, pc}
   d83e2:	4283      	cmp	r3, r0
   d83e4:	d3f3      	bcc.n	d83ce <__mcmp+0x18>
   d83e6:	e7fa      	b.n	d83de <__mcmp+0x28>
   d83e8:	f04f 32ff 	mov.w	r2, #4294967295
   d83ec:	e7f7      	b.n	d83de <__mcmp+0x28>

000d83ee <__mdiff>:
   d83ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d83f2:	460c      	mov	r4, r1
   d83f4:	4606      	mov	r6, r0
   d83f6:	4611      	mov	r1, r2
   d83f8:	4620      	mov	r0, r4
   d83fa:	4617      	mov	r7, r2
   d83fc:	f7ff ffdb 	bl	d83b6 <__mcmp>
   d8400:	1e05      	subs	r5, r0, #0
   d8402:	d108      	bne.n	d8416 <__mdiff+0x28>
   d8404:	4629      	mov	r1, r5
   d8406:	4630      	mov	r0, r6
   d8408:	f7ff fd6c 	bl	d7ee4 <_Balloc>
   d840c:	2301      	movs	r3, #1
   d840e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   d8412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8416:	bfa4      	itt	ge
   d8418:	463b      	movge	r3, r7
   d841a:	4627      	movge	r7, r4
   d841c:	4630      	mov	r0, r6
   d841e:	6879      	ldr	r1, [r7, #4]
   d8420:	bfa6      	itte	ge
   d8422:	461c      	movge	r4, r3
   d8424:	2500      	movge	r5, #0
   d8426:	2501      	movlt	r5, #1
   d8428:	f7ff fd5c 	bl	d7ee4 <_Balloc>
   d842c:	693e      	ldr	r6, [r7, #16]
   d842e:	60c5      	str	r5, [r0, #12]
   d8430:	6925      	ldr	r5, [r4, #16]
   d8432:	f107 0114 	add.w	r1, r7, #20
   d8436:	f104 0914 	add.w	r9, r4, #20
   d843a:	f100 0e14 	add.w	lr, r0, #20
   d843e:	f107 0210 	add.w	r2, r7, #16
   d8442:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   d8446:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   d844a:	46f2      	mov	sl, lr
   d844c:	2700      	movs	r7, #0
   d844e:	f859 3b04 	ldr.w	r3, [r9], #4
   d8452:	f852 bf04 	ldr.w	fp, [r2, #4]!
   d8456:	fa1f f883 	uxth.w	r8, r3
   d845a:	fa17 f78b 	uxtah	r7, r7, fp
   d845e:	0c1b      	lsrs	r3, r3, #16
   d8460:	eba7 0808 	sub.w	r8, r7, r8
   d8464:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   d8468:	eb03 4328 	add.w	r3, r3, r8, asr #16
   d846c:	fa1f f888 	uxth.w	r8, r8
   d8470:	141f      	asrs	r7, r3, #16
   d8472:	454d      	cmp	r5, r9
   d8474:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   d8478:	f84a 3b04 	str.w	r3, [sl], #4
   d847c:	d8e7      	bhi.n	d844e <__mdiff+0x60>
   d847e:	1b2b      	subs	r3, r5, r4
   d8480:	3b15      	subs	r3, #21
   d8482:	f023 0303 	bic.w	r3, r3, #3
   d8486:	3304      	adds	r3, #4
   d8488:	3415      	adds	r4, #21
   d848a:	42a5      	cmp	r5, r4
   d848c:	bf38      	it	cc
   d848e:	2304      	movcc	r3, #4
   d8490:	4419      	add	r1, r3
   d8492:	4473      	add	r3, lr
   d8494:	469e      	mov	lr, r3
   d8496:	460d      	mov	r5, r1
   d8498:	4565      	cmp	r5, ip
   d849a:	d30e      	bcc.n	d84ba <__mdiff+0xcc>
   d849c:	f10c 0203 	add.w	r2, ip, #3
   d84a0:	1a52      	subs	r2, r2, r1
   d84a2:	f022 0203 	bic.w	r2, r2, #3
   d84a6:	3903      	subs	r1, #3
   d84a8:	458c      	cmp	ip, r1
   d84aa:	bf38      	it	cc
   d84ac:	2200      	movcc	r2, #0
   d84ae:	441a      	add	r2, r3
   d84b0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   d84b4:	b17b      	cbz	r3, d84d6 <__mdiff+0xe8>
   d84b6:	6106      	str	r6, [r0, #16]
   d84b8:	e7ab      	b.n	d8412 <__mdiff+0x24>
   d84ba:	f855 8b04 	ldr.w	r8, [r5], #4
   d84be:	fa17 f488 	uxtah	r4, r7, r8
   d84c2:	1422      	asrs	r2, r4, #16
   d84c4:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   d84c8:	b2a4      	uxth	r4, r4
   d84ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   d84ce:	f84e 4b04 	str.w	r4, [lr], #4
   d84d2:	1417      	asrs	r7, r2, #16
   d84d4:	e7e0      	b.n	d8498 <__mdiff+0xaa>
   d84d6:	3e01      	subs	r6, #1
   d84d8:	e7ea      	b.n	d84b0 <__mdiff+0xc2>
	...

000d84dc <__ulp>:
   d84dc:	b082      	sub	sp, #8
   d84de:	ed8d 0b00 	vstr	d0, [sp]
   d84e2:	9b01      	ldr	r3, [sp, #4]
   d84e4:	4912      	ldr	r1, [pc, #72]	; (d8530 <__ulp+0x54>)
   d84e6:	4019      	ands	r1, r3
   d84e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   d84ec:	2900      	cmp	r1, #0
   d84ee:	dd05      	ble.n	d84fc <__ulp+0x20>
   d84f0:	2200      	movs	r2, #0
   d84f2:	460b      	mov	r3, r1
   d84f4:	ec43 2b10 	vmov	d0, r2, r3
   d84f8:	b002      	add	sp, #8
   d84fa:	4770      	bx	lr
   d84fc:	4249      	negs	r1, r1
   d84fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   d8502:	ea4f 5021 	mov.w	r0, r1, asr #20
   d8506:	f04f 0200 	mov.w	r2, #0
   d850a:	f04f 0300 	mov.w	r3, #0
   d850e:	da04      	bge.n	d851a <__ulp+0x3e>
   d8510:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   d8514:	fa41 f300 	asr.w	r3, r1, r0
   d8518:	e7ec      	b.n	d84f4 <__ulp+0x18>
   d851a:	f1a0 0114 	sub.w	r1, r0, #20
   d851e:	291e      	cmp	r1, #30
   d8520:	bfda      	itte	le
   d8522:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   d8526:	fa20 f101 	lsrle.w	r1, r0, r1
   d852a:	2101      	movgt	r1, #1
   d852c:	460a      	mov	r2, r1
   d852e:	e7e1      	b.n	d84f4 <__ulp+0x18>
   d8530:	7ff00000 	.word	0x7ff00000

000d8534 <__b2d>:
   d8534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8536:	6905      	ldr	r5, [r0, #16]
   d8538:	f100 0714 	add.w	r7, r0, #20
   d853c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   d8540:	1f2e      	subs	r6, r5, #4
   d8542:	f855 4c04 	ldr.w	r4, [r5, #-4]
   d8546:	4620      	mov	r0, r4
   d8548:	f7ff fd93 	bl	d8072 <__hi0bits>
   d854c:	f1c0 0320 	rsb	r3, r0, #32
   d8550:	280a      	cmp	r0, #10
   d8552:	f8df c07c 	ldr.w	ip, [pc, #124]	; d85d0 <__b2d+0x9c>
   d8556:	600b      	str	r3, [r1, #0]
   d8558:	dc14      	bgt.n	d8584 <__b2d+0x50>
   d855a:	f1c0 0e0b 	rsb	lr, r0, #11
   d855e:	fa24 f10e 	lsr.w	r1, r4, lr
   d8562:	42b7      	cmp	r7, r6
   d8564:	ea41 030c 	orr.w	r3, r1, ip
   d8568:	bf34      	ite	cc
   d856a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d856e:	2100      	movcs	r1, #0
   d8570:	3015      	adds	r0, #21
   d8572:	fa04 f000 	lsl.w	r0, r4, r0
   d8576:	fa21 f10e 	lsr.w	r1, r1, lr
   d857a:	ea40 0201 	orr.w	r2, r0, r1
   d857e:	ec43 2b10 	vmov	d0, r2, r3
   d8582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8584:	42b7      	cmp	r7, r6
   d8586:	bf3a      	itte	cc
   d8588:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   d858c:	f1a5 0608 	subcc.w	r6, r5, #8
   d8590:	2100      	movcs	r1, #0
   d8592:	380b      	subs	r0, #11
   d8594:	d017      	beq.n	d85c6 <__b2d+0x92>
   d8596:	f1c0 0c20 	rsb	ip, r0, #32
   d859a:	fa04 f500 	lsl.w	r5, r4, r0
   d859e:	42be      	cmp	r6, r7
   d85a0:	fa21 f40c 	lsr.w	r4, r1, ip
   d85a4:	ea45 0504 	orr.w	r5, r5, r4
   d85a8:	bf8c      	ite	hi
   d85aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   d85ae:	2400      	movls	r4, #0
   d85b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   d85b4:	fa01 f000 	lsl.w	r0, r1, r0
   d85b8:	fa24 f40c 	lsr.w	r4, r4, ip
   d85bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   d85c0:	ea40 0204 	orr.w	r2, r0, r4
   d85c4:	e7db      	b.n	d857e <__b2d+0x4a>
   d85c6:	ea44 030c 	orr.w	r3, r4, ip
   d85ca:	460a      	mov	r2, r1
   d85cc:	e7d7      	b.n	d857e <__b2d+0x4a>
   d85ce:	bf00      	nop
   d85d0:	3ff00000 	.word	0x3ff00000

000d85d4 <__d2b>:
   d85d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d85d8:	4689      	mov	r9, r1
   d85da:	2101      	movs	r1, #1
   d85dc:	ec57 6b10 	vmov	r6, r7, d0
   d85e0:	4690      	mov	r8, r2
   d85e2:	f7ff fc7f 	bl	d7ee4 <_Balloc>
   d85e6:	f3c7 550a 	ubfx	r5, r7, #20, #11
   d85ea:	4604      	mov	r4, r0
   d85ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
   d85f0:	bb35      	cbnz	r5, d8640 <__d2b+0x6c>
   d85f2:	2e00      	cmp	r6, #0
   d85f4:	9301      	str	r3, [sp, #4]
   d85f6:	d028      	beq.n	d864a <__d2b+0x76>
   d85f8:	4668      	mov	r0, sp
   d85fa:	9600      	str	r6, [sp, #0]
   d85fc:	f7ff fd59 	bl	d80b2 <__lo0bits>
   d8600:	9900      	ldr	r1, [sp, #0]
   d8602:	b300      	cbz	r0, d8646 <__d2b+0x72>
   d8604:	9a01      	ldr	r2, [sp, #4]
   d8606:	f1c0 0320 	rsb	r3, r0, #32
   d860a:	fa02 f303 	lsl.w	r3, r2, r3
   d860e:	430b      	orrs	r3, r1
   d8610:	40c2      	lsrs	r2, r0
   d8612:	6163      	str	r3, [r4, #20]
   d8614:	9201      	str	r2, [sp, #4]
   d8616:	9b01      	ldr	r3, [sp, #4]
   d8618:	61a3      	str	r3, [r4, #24]
   d861a:	2b00      	cmp	r3, #0
   d861c:	bf14      	ite	ne
   d861e:	2202      	movne	r2, #2
   d8620:	2201      	moveq	r2, #1
   d8622:	6122      	str	r2, [r4, #16]
   d8624:	b1d5      	cbz	r5, d865c <__d2b+0x88>
   d8626:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   d862a:	4405      	add	r5, r0
   d862c:	f8c9 5000 	str.w	r5, [r9]
   d8630:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   d8634:	f8c8 0000 	str.w	r0, [r8]
   d8638:	4620      	mov	r0, r4
   d863a:	b003      	add	sp, #12
   d863c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8644:	e7d5      	b.n	d85f2 <__d2b+0x1e>
   d8646:	6161      	str	r1, [r4, #20]
   d8648:	e7e5      	b.n	d8616 <__d2b+0x42>
   d864a:	a801      	add	r0, sp, #4
   d864c:	f7ff fd31 	bl	d80b2 <__lo0bits>
   d8650:	9b01      	ldr	r3, [sp, #4]
   d8652:	6163      	str	r3, [r4, #20]
   d8654:	2201      	movs	r2, #1
   d8656:	6122      	str	r2, [r4, #16]
   d8658:	3020      	adds	r0, #32
   d865a:	e7e3      	b.n	d8624 <__d2b+0x50>
   d865c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   d8660:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   d8664:	f8c9 0000 	str.w	r0, [r9]
   d8668:	6918      	ldr	r0, [r3, #16]
   d866a:	f7ff fd02 	bl	d8072 <__hi0bits>
   d866e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   d8672:	e7df      	b.n	d8634 <__d2b+0x60>

000d8674 <__ratio>:
   d8674:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8678:	4688      	mov	r8, r1
   d867a:	4669      	mov	r1, sp
   d867c:	4681      	mov	r9, r0
   d867e:	f7ff ff59 	bl	d8534 <__b2d>
   d8682:	a901      	add	r1, sp, #4
   d8684:	4640      	mov	r0, r8
   d8686:	ec55 4b10 	vmov	r4, r5, d0
   d868a:	f7ff ff53 	bl	d8534 <__b2d>
   d868e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   d8692:	f8d8 2010 	ldr.w	r2, [r8, #16]
   d8696:	eba3 0c02 	sub.w	ip, r3, r2
   d869a:	e9dd 3200 	ldrd	r3, r2, [sp]
   d869e:	1a9b      	subs	r3, r3, r2
   d86a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   d86a4:	ec51 0b10 	vmov	r0, r1, d0
   d86a8:	2b00      	cmp	r3, #0
   d86aa:	bfd6      	itet	le
   d86ac:	460a      	movle	r2, r1
   d86ae:	462a      	movgt	r2, r5
   d86b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   d86b4:	468b      	mov	fp, r1
   d86b6:	462f      	mov	r7, r5
   d86b8:	bfd4      	ite	le
   d86ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   d86be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   d86c2:	4620      	mov	r0, r4
   d86c4:	ee10 2a10 	vmov	r2, s0
   d86c8:	465b      	mov	r3, fp
   d86ca:	4639      	mov	r1, r7
   d86cc:	f7fd ff6e 	bl	d65ac <__aeabi_ddiv>
   d86d0:	ec41 0b10 	vmov	d0, r0, r1
   d86d4:	b003      	add	sp, #12
   d86d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d86da <__copybits>:
   d86da:	3901      	subs	r1, #1
   d86dc:	b570      	push	{r4, r5, r6, lr}
   d86de:	1149      	asrs	r1, r1, #5
   d86e0:	6914      	ldr	r4, [r2, #16]
   d86e2:	3101      	adds	r1, #1
   d86e4:	f102 0314 	add.w	r3, r2, #20
   d86e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   d86ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d86f0:	1f05      	subs	r5, r0, #4
   d86f2:	42a3      	cmp	r3, r4
   d86f4:	d30c      	bcc.n	d8710 <__copybits+0x36>
   d86f6:	1aa3      	subs	r3, r4, r2
   d86f8:	3b11      	subs	r3, #17
   d86fa:	f023 0303 	bic.w	r3, r3, #3
   d86fe:	3211      	adds	r2, #17
   d8700:	42a2      	cmp	r2, r4
   d8702:	bf88      	it	hi
   d8704:	2300      	movhi	r3, #0
   d8706:	4418      	add	r0, r3
   d8708:	2300      	movs	r3, #0
   d870a:	4288      	cmp	r0, r1
   d870c:	d305      	bcc.n	d871a <__copybits+0x40>
   d870e:	bd70      	pop	{r4, r5, r6, pc}
   d8710:	f853 6b04 	ldr.w	r6, [r3], #4
   d8714:	f845 6f04 	str.w	r6, [r5, #4]!
   d8718:	e7eb      	b.n	d86f2 <__copybits+0x18>
   d871a:	f840 3b04 	str.w	r3, [r0], #4
   d871e:	e7f4      	b.n	d870a <__copybits+0x30>

000d8720 <__any_on>:
   d8720:	f100 0214 	add.w	r2, r0, #20
   d8724:	6900      	ldr	r0, [r0, #16]
   d8726:	114b      	asrs	r3, r1, #5
   d8728:	4298      	cmp	r0, r3
   d872a:	b510      	push	{r4, lr}
   d872c:	db11      	blt.n	d8752 <__any_on+0x32>
   d872e:	dd0a      	ble.n	d8746 <__any_on+0x26>
   d8730:	f011 011f 	ands.w	r1, r1, #31
   d8734:	d007      	beq.n	d8746 <__any_on+0x26>
   d8736:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   d873a:	fa24 f001 	lsr.w	r0, r4, r1
   d873e:	fa00 f101 	lsl.w	r1, r0, r1
   d8742:	428c      	cmp	r4, r1
   d8744:	d10b      	bne.n	d875e <__any_on+0x3e>
   d8746:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d874a:	4293      	cmp	r3, r2
   d874c:	d803      	bhi.n	d8756 <__any_on+0x36>
   d874e:	2000      	movs	r0, #0
   d8750:	bd10      	pop	{r4, pc}
   d8752:	4603      	mov	r3, r0
   d8754:	e7f7      	b.n	d8746 <__any_on+0x26>
   d8756:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   d875a:	2900      	cmp	r1, #0
   d875c:	d0f5      	beq.n	d874a <__any_on+0x2a>
   d875e:	2001      	movs	r0, #1
   d8760:	e7f6      	b.n	d8750 <__any_on+0x30>

000d8762 <_calloc_r>:
   d8762:	b513      	push	{r0, r1, r4, lr}
   d8764:	434a      	muls	r2, r1
   d8766:	4611      	mov	r1, r2
   d8768:	9201      	str	r2, [sp, #4]
   d876a:	f7fc fbcb 	bl	d4f04 <_malloc_r>
   d876e:	4604      	mov	r4, r0
   d8770:	b118      	cbz	r0, d877a <_calloc_r+0x18>
   d8772:	9a01      	ldr	r2, [sp, #4]
   d8774:	2100      	movs	r1, #0
   d8776:	f7fe f951 	bl	d6a1c <memset>
   d877a:	4620      	mov	r0, r4
   d877c:	b002      	add	sp, #8
   d877e:	bd10      	pop	{r4, pc}

000d8780 <nan>:
   d8780:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8788 <nan+0x8>
   d8784:	4770      	bx	lr
   d8786:	bf00      	nop
   d8788:	00000000 	.word	0x00000000
   d878c:	7ff80000 	.word	0x7ff80000

000d8790 <__ascii_wctomb>:
   d8790:	b149      	cbz	r1, d87a6 <__ascii_wctomb+0x16>
   d8792:	2aff      	cmp	r2, #255	; 0xff
   d8794:	bf85      	ittet	hi
   d8796:	238a      	movhi	r3, #138	; 0x8a
   d8798:	6003      	strhi	r3, [r0, #0]
   d879a:	700a      	strbls	r2, [r1, #0]
   d879c:	f04f 30ff 	movhi.w	r0, #4294967295
   d87a0:	bf98      	it	ls
   d87a2:	2001      	movls	r0, #1
   d87a4:	4770      	bx	lr
   d87a6:	4608      	mov	r0, r1
   d87a8:	4770      	bx	lr
	...

000d87ac <__aeabi_d2lz>:
   d87ac:	b538      	push	{r3, r4, r5, lr}
   d87ae:	2200      	movs	r2, #0
   d87b0:	2300      	movs	r3, #0
   d87b2:	4604      	mov	r4, r0
   d87b4:	460d      	mov	r5, r1
   d87b6:	f7fe f841 	bl	d683c <__aeabi_dcmplt>
   d87ba:	b928      	cbnz	r0, d87c8 <__aeabi_d2lz+0x1c>
   d87bc:	4620      	mov	r0, r4
   d87be:	4629      	mov	r1, r5
   d87c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d87c4:	f7fe b8d2 	b.w	d696c <__aeabi_d2ulz>
   d87c8:	4620      	mov	r0, r4
   d87ca:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   d87ce:	f7fe f8cd 	bl	d696c <__aeabi_d2ulz>
   d87d2:	4240      	negs	r0, r0
   d87d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d87d8:	bd38      	pop	{r3, r4, r5, pc}
   d87da:	bf00      	nop

000d87dc <dynalib_user>:
   d87dc:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d87ec:	0000 0000 6f43 6e6e 6365 6974 676e 7420     ....Connecting t
   d87fc:	206f 514d 5454 2e2e 202e 2500 0a73 5200     o MQTT... .%s..R
   d880c:	7465 7972 6e69 2067 514d 5454 6320 6e6f     etrying MQTT con
   d881c:	656e 7463 6f69 206e 6e69 3520 7320 6365     nection in 5 sec
   d882c:	6e6f 7364 2e2e 000a 514d 5454 4320 6e6f     onds....MQTT Con
   d883c:	656e 7463 6465 0a21 5000 6e69 6967 676e     nected!..Pinging
   d884c:	4d20 5451 2054 000a 6944 6373 6e6f 656e      MQTT ..Disconne
   d885c:	7463 6e69 2067 000a 7550 6c62 7369 6968     cting ..Publishi
   d886c:	676e 2520 2e30 6632 0a20 5200 6365 6965     ng %0.2f ..Recei
   d887c:	6576 2064 3025 322e 2066 7266 6d6f 4120     ved %0.2f from A
   d888c:	6164 7266 6975 2e74 6f69 6620 6565 2064     dafruit.io feed 
   d889c:	6546 6465 614e 656d 2042 000a 753c 6573     FeedNameB ..<use
   d88ac:	6e72 6d61 3e65 6900 2e6f 6461 6661 7572     rname>.io.adafru
   d88bc:	7469 632e 6d6f 3c00 656b 3e79 3c00 7375     it.com.<key>.<us
   d88cc:	7265 616e 656d 2f3e 6566 6465 2f73 463c     ername>/feeds/<F
   d88dc:	6565 4e64 6d61 4165 3c00 7375 7265 616e     eedNameA.<userna
   d88ec:	656d 2f3e 6566 6465 2f73 6546 6465 614e     me>/feeds/FeedNa
   d88fc:	656d 0042                                   meB.

000d8900 <_ZTV19Adafruit_MQTT_SPARK>:
	...
   d8908:	40c5 000d 4361 000d 4429 000d 44d5 000d     .@..aC..)D...D..
   d8918:	4507 000d 443d 000d 447d 000d 7244 706f     .E..=D..}D..Drop
   d8928:	6570 2064 2061 6170 6b63 7465 5500 6b6e     ped a packet.Unk
   d8938:	6f6e 6e77 6520 7272 726f 4d00 5451 0054     nown error.MQTT.
   d8948:	2525 6425 252e 6664 4600 6961 656c 2064     %%%d.%df.Failed 
   d8958:	6f74 7320 6275 6373 6972 6562 4300 6e6f     to subscribe.Con
   d8968:	656e 7463 6f69 206e 6166 6c69 6465 5400     nection failed.T
   d8978:	6568 5320 7265 6576 2072 6f64 7365 6e20     he Server does n
   d8988:	746f 7320 7075 6f70 7472 7420 6568 6c20     ot support the l
   d8998:	7665 6c65 6f20 2066 6874 2065 514d 5454     evel of the MQTT
   d89a8:	7020 6f72 6f74 6f63 206c 6572 7571 7365      protocol reques
   d89b8:	6574 0064 6854 2065 6c43 6569 746e 6920     ted.The Client i
   d89c8:	6564 746e 6669 6569 2072 7369 6320 726f     dentifier is cor
   d89d8:	6572 7463 5520 4654 382d 6220 7475 6e20     rect UTF-8 but n
   d89e8:	746f 6120 6c6c 776f 6465 6220 2079 6874     ot allowed by th
   d89f8:	2065 6553 7672 7265 5400 6568 4d20 5451     e Server.The MQT
   d8a08:	2054 6573 7672 6369 2065 7369 7520 616e     T service is una
   d8a18:	6176 6c69 6261 656c 5400 6568 6420 7461     vailable.The dat
   d8a28:	2061 6e69 7420 6568 7520 6573 2072 616e     a in the user na
   d8a38:	656d 6f20 2072 6170 7373 6f77 6472 6920     me or password i
   d8a48:	2073 616d 666c 726f 656d 0064 6f4e 2074     s malformed.Not 
   d8a58:	7561 6874 726f 7a69 6465 7420 206f 6f63     authorized to co
   d8a68:	6e6e 6365 0074 7845 6563 6465 6465 7220     nnect.Exceeded r
   d8a78:	6365 6e6f 656e 7463 7220 7461 2065 696c     econnect rate li
   d8a88:	696d 2e74 5020 656c 7361 2065 7274 2079     mit. Please try 
   d8a98:	6761 6961 206e 616c 6574 2e72 5900 756f     again later..You
   d8aa8:	6820 7661 2065 6562 6e65 6220 6e61 656e      have been banne
   d8ab8:	2064 7266 6d6f 6320 6e6f 656e 7463 6e69     d from connectin
   d8ac8:	2e67 5020 656c 7361 2065 6f63 746e 6361     g. Please contac
   d8ad8:	2074 6874 2065 514d 5454 7320 7265 6576     t the MQTT serve
   d8ae8:	2072 6461 696d 696e 7473 6172 6f74 2072     r administrator 
   d8af8:	6f66 2072 6f6d 6572 6420 7465 6961 736c     for more details
   d8b08:	002e 0000                                   ....

000d8b0c <_ZTV13Adafruit_MQTT>:
	...
   d8b1c:	40a1 000d 40a1 000d 40a1 000d 40a1 000d     .@...@...@...@..
   d8b2c:	40a1 000d                                   .@..

000d8b30 <CSWTCH.44>:
   d8b30:	8951 000d 8965 000d 8935 000d 8977 000d     Q...e...5...w...
   d8b40:	89bc 000d 8a01 000d 8a21 000d 8a54 000d     ........!...T...
   d8b50:	8a6e 000d 8aa5 000d                         n.......

000d8b58 <_ZTVN5spark13EthernetClassE>:
	...
   d8b60:	4f93 000d 4f89 000d 4f7f 000d 4f75 000d     .O...O...O..uO..
   d8b70:	4f69 000d 4f5d 000d 5c81 000d 5c89 000d     iO..]O...\...\..
   d8b80:	4f51 000d 4f49 000d 4f3f 000d 4f35 000d     QO..IO..?O..5O..
   d8b90:	5cb9 000d                                   .\..

000d8b94 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d8b9c:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d8bac:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d8bbc <_ZTV9IPAddress>:
	...
   d8bc4:	5311 000d 5301 000d 5303 000d               .S...S...S..

000d8bd0 <_ZTV9USBSerial>:
	...
   d8bd8:	541d 000d 5485 000d 545b 000d 5055 000d     .T...T..[T..UP..
   d8be8:	544d 000d 541f 000d 542f 000d 547f 000d     MT...T../T...T..
   d8bf8:	543f 000d 5419 000d                         ?T...T..

000d8c00 <_ZTV11USARTSerial>:
	...
   d8c08:	5531 000d 559d 000d 5575 000d 5055 000d     1U...U..uU..UP..
   d8c18:	5545 000d 5561 000d 5553 000d 556f 000d     EU..aU..SU..oU..
   d8c28:	5533 000d 5537 000d 6977 6972 676e 7200     3U..7U..wiring.r
   d8c38:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000d8c48 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8c50:	56d9 000d 56fd 000d 5acf 000d 570b 000d     .V...V...Z...W..
   d8c60:	56dd 000d                                   .V..

000d8c64 <_ZTV9TCPClient>:
	...
   d8c6c:	40c9 000d 4129 000d 5657 000d 5671 000d     .@..)A..WV..qV..
   d8c7c:	5965 000d 57d7 000d 57a9 000d 569b 000d     eY...W...W...V..
   d8c8c:	586f 000d 5ad5 000d 580b 000d 5a19 000d     oX...Z...X...Z..
   d8c9c:	569d 000d 56cf 000d 5683 000d 570f 000d     .V...V...V...W..
   d8cac:	5789 000d                                   .W..

000d8cb0 <_ZTVN5spark9WiFiClassE>:
	...
   d8cb8:	5c23 000d 5c19 000d 5c0f 000d 5bd1 000d     #\...\...\...[..
   d8cc8:	517d 000d 5c03 000d 5c81 000d 5c89 000d     }Q...\...\...\..
   d8cd8:	5bf7 000d 5bef 000d 5be5 000d 5bdb 000d     .[...[...[...[..
   d8ce8:	5cb9 000d                                   .\..

000d8cec <_ZTVN5spark12NetworkClassE>:
	...
   d8cf4:	5c41 000d 5c4b 000d 5c55 000d 5c5f 000d     A\..K\..U\.._\..
   d8d04:	5c69 000d 5c75 000d 5c81 000d 5c89 000d     i\..u\...\...\..
   d8d14:	5c91 000d 5c9d 000d 5ca5 000d 5caf 000d     .\...\...\...\..
   d8d24:	5cb9 000d                                   .\..

000d8d28 <_ZTSSt19_Sp_make_shared_tag>:
   d8d28:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d8d38:	6572 5f64 6174 0067                         red_tag.

000d8d40 <_ZTISt19_Sp_make_shared_tag>:
   d8d40:	8d80 000d 8d28 000d                         ....(...

000d8d48 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d8d48:	8de0 000d 8d54 000d 8e04 000d               ....T.......

000d8d54 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d8d54:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d8d64:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d8d74:	0045 0000                                   E...

000d8d78 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d8d78:	0000 0000 8d48 000d 5e09 000d 5e1d 000d     ....H....^...^..
   d8d88:	5fb1 000d 5fb1 000d 5e87 000d 5dc9 000d     ._..._...^...]..
   d8d98:	5e6f 000d 5e31 000d 5dfd 000d               o^..1^...]..

000d8da4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d8da4:	8de0 000d 8db0 000d 8d48 000d               ........H...

000d8db0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d8db0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d8dc0:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d8dd0:	666e 456f 0000 0000                         nfoE....

000d8dd8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d8dd8:	0000 0000 8da4 000d 5eb1 000d 5ec5 000d     .........^...^..
   d8de8:	5fb1 000d 5fb1 000d 5e87 000d 5dc9 000d     ._..._...^...]..
   d8df8:	5f85 000d 5f11 000d 5ed9 000d               ._..._...^..

000d8e04 <_ZTISt9type_info>:
   d8e04:	8d80 000d 8e0c 000d                         ........

000d8e0c <_ZTSSt9type_info>:
   d8e0c:	7453 7439 7079 5f65 6e69 6f66 6e00 0066     St9type_info.nf.
   d8e1c:	6e69 7469 0079 6e61 0000 0000               inity.an....

000d8e28 <fpi.7566>:
   d8e28:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   d8e38:	0000 0000                                   ....

000d8e3c <fpinan.7602>:
   d8e3c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   d8e4c:	0000 0000                                   ....

000d8e50 <tinytens>:
   d8e50:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   d8e60:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   d8e70:	6f43 64ac 0628 1168                         Co.d(.h.

000d8e78 <_ctype_>:
   d8e78:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d8e88:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d8e98:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d8ea8:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d8eb8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d8ec8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d8ed8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d8ee8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d8ef8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d8f7c <_C_numeric_locale>:
   d8f7c:	8aa3 000d 88a7 000d e3a4 2003 0043 4f50     ........... C.PO
   d8f8c:	4953 0058                                   SIX.

000d8f90 <__mprec_bigtens>:
   d8f90:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   d8fa0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   d8fb0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000d8fb8 <__mprec_tens>:
   d8fb8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   d8fc8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   d8fd8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   d8fe8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   d8ff8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   d9008:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   d9018:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   d9028:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   d9038:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   d9048:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   d9058:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   d9068:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   d9078:	9db4 79d9 7843 44ea                         ...yCx.D

000d9080 <p05.7490>:
   d9080:	0005 0000 0019 0000 007d 0000               ........}...

000d908c <link_const_variable_data_end>:
   d908c:	000d4371 	.word	0x000d4371
   d9090:	000d4f9d 	.word	0x000d4f9d
   d9094:	000d4fb1 	.word	0x000d4fb1
   d9098:	000d502d 	.word	0x000d502d
   d909c:	000d5189 	.word	0x000d5189
   d90a0:	000d5199 	.word	0x000d5199
   d90a4:	000d51c1 	.word	0x000d51c1
   d90a8:	000d5c2d 	.word	0x000d5c2d
   d90ac:	000d5d99 	.word	0x000d5d99
